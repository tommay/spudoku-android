!!! XML

- puts '<?xml version="1.0" encoding="utf-8"?>'

-# Put a comment in the generated file about editing *this* file instead,
/ Do not edit this file.  It is generated from activity_help.haml by "make haml".

-# This help page is a ConstraintLayout with a ScrollView with the
-# text, and an Ok Button.  Using a ConstraintLayout allows the button
-# to be stationary in the bottom right while the text scrolls behind
-# it.  Actually I'm not sure I like it and it may be fine to have the
-# button in the bottom right with the text scrolling above it.

-# The ScollView contains a LinearLayout with a vertical stack of
-# headings and paragraphs.  This was the only way (or at least best
-# way) I could find to ge the headings and paragraphs nicely styled
-# and spaced.

-# This is done in haml because using Java to create this layout by
-# parsing the markdown-influenced help text then inflating and adding
-# sublayouts to the main activity_help.xml was getting painful and
-# required things to be broken into way too many confusing files.
-# Here everything is in one file.

:ruby
  text = <<-EOT
    # What's Spudoku?
    Spudoku is sudoku with colors.

    You can use Spudoku to create puzzles (with solutions) that you
    can set up and solve on a <a href="http://colorku.com/">ColorKu
    board</a>.  Or you can solve them right here on your device.

    # Create a puzzle
    Use the spinners to select a <i>difficulty</i> and a <i>layout</i>,
    which is the arrangement of colors that are preset as part of the puzzle.

    Then touch the <i>New</i> button and Spudoku will make you a
    puzzle never before seen&mdash;by anyone!

    Some combinations of difficulty and layout may be imposssible to
    create a puzzle for, such as a <i>Wicked</i> puzzle with the
    <i>Identical Squares</i> layout.  If puzzle creation is taking too
    long just press the <i>Cancel</i> button and ask it to make
    something more possible.

    # Use the buttons
    Touch the <i>Puzzle</i> button to temporarily remove any colors
    you've placed and show only the original puzzle colors.

    Touch the <i>Solution</i> button to show the solution.

    Touch either button again to return to your work-in-progress.

    Hold the <i>Puzzle</i> button to reset the puzzle to its original
    state.

    # Solve the puzzle
    Place colors by dragging them from the row of colored circles and
    dropping them into place on the board.

    Remove them by flicking them off the board.

    If you've placed a color you're not sure about, tap it to mark it
    with a question mark as a reminder you're not sure about it.  Tap
    it again to remove the question mark.

    # Get hints
    Got stuck somewhere?  Touch the <i>Hint</i> button and Spudoku
    will give you a hint to help you place the next color.

    # Training wheels
    Turn on <i>Training wheels</i> to prevent you from putting a color
    in the wrong place.  If you drag a color to a place it doesn't
    belong it will just go back to the row of colors.

    You can turn off <i>training wheels</i> at any time but you can
    only turn them on if you haven't placed any colors on the puzzle
    yet because they may be wrong.

    # How do you pronounce Spudoku?
    The same way you do.
  EOT

%android__support__constraint__ConstraintLayout(                      |
    xmlns:android="http://schemas.android.com/apk/res/android"     |
    xmlns:app="http://schemas.android.com/apk/res-auto"            |
    android:layout_width="match_parent"                            |
    android:layout_height="match_parent")                          |
  -#
  %ScrollView(                                        |
      android:layout_width="match_parent"             |
      android:layout_height="match_parent"            |
      app:layout_constraintTop_toTopOf="parent"       |
      app:layout_constraintLeft_toLeftOf="parent")    |
    -#
    %LinearLayout(                                    |
        android:layout_width="match_parent"           |
        android:layout_height="wrap_content"          |
        android:orientation="vertical")               |
      - text.scan(/#[^#]*/).each do |section|
        - heading, paragraphs = section.split(/\n+/, 2)
        - heading = heading.sub(/^# */, "")
        - paragraphs = paragraphs.strip
        %TextView(                                  |
            android:layout_width="match_parent"     |
            android:layout_height="wrap_content"    |
            android:layout_marginLeft="6dp"         |
            android:layout_marginRight="6dp"        |
            android:layout_marginTop="1sp"          |
            android:layout_marginBottom="1sp"       |
            android:textSize="20sp"                 |
            android:textStyle="bold"                |
            android:text=heading)                   |
        - paragraphs.split(/\n\n+/).each do |paragraph|
          - paragraph = paragraph.gsub(/\s+/, " ")
          - paragraph = paragraph.gsub(/\. /, ".  ")
          %TextView(                                |
              android:layout_width="match_parent"   |
              android:layout_height="wrap_content"  |
              android:layout_marginLeft="17dp"      |
              android:layout_marginRight="6dp"      |
              android:layout_marginTop="1sp"        |
              android:layout_marginBottom="8sp"     |
              android:textSize="16sp"               |
              android:text="#{paragraph.strip}")    |
      -#
      %Space(                                       |
          android:layout_width="match_parent"       |
          android:layout_height="36sp")             |
  -#
  %Button(                                            |
      android:layout_width="wrap_content"             |
      android:layout_height="wrap_content"            |
      android:text="Ok let's go!"                     |
      android:textColor="#ff0000"                     |
      app:layout_constraintBottom_toBottomOf="parent" |
      app:layout_constraintRight_toRightOf="parent"   |
      android:onClick="onClickOk")                    |
