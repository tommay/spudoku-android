/*
  Source code is in UTF-8 encoding. The following symbols may appear, among others:
  α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς σ τ υ φ χ ψ ω « • ¦ » ∀ ∃ ∷ … → ← ﬁ ﬂ ƒ
  If you can't read this, you're out of luck. This code was generated with the frege compiler version 3.24.141
  from ./net/tommay/sudoku/SolverUtil.fr Do not edit this file! Instead, edit the source file and recompile.
*/

package net.tommay.sudoku;

import frege.run7.Func;
import frege.run7.Lazy;
import frege.run7.Thunk;
import frege.run.Kind;
import frege.run.RunTM;
import frege.runtime.Meta;
import frege.runtime.Phantom.RealWorld;
import frege.Prelude;
import frege.control.Category;
import frege.control.Semigroupoid;
import frege.data.Bits;
import frege.data.Monoid;
import frege.java.IO;
import frege.java.Lang;
import frege.java.Util;
import frege.java.util.Regex;
import frege.prelude.Maybe;
import frege.prelude.PreludeArrays;
import frege.prelude.PreludeBase;
import frege.prelude.PreludeIO;
import frege.prelude.PreludeList;
import frege.prelude.PreludeMonad;
import frege.prelude.PreludeText;
import net.tommay.sudoku.Digit;
import net.tommay.sudoku.Unknown;

@SuppressWarnings("unused")
@Meta.FregePackage(
  source="./net/tommay/sudoku/SolverUtil.fr", time=1481937170997L, jmajor=1, jminor=7,
  imps={
    "frege.Prelude", "frege.prelude.PreludeArrays", "frege.prelude.PreludeBase", "frege.prelude.PreludeIO",
    "frege.prelude.PreludeList", "frege.prelude.PreludeMonad", "frege.prelude.PreludeText", "frege.java.util.Regex",
    "net.tommay.sudoku.Unknown"
  },
  nmss={
    "Prelude", "PreludeArrays", "PreludeBase", "PreludeIO", "PreludeList", "PreludeMonad", "PreludeText",
    "Regexp", "Unknown"
  },
  symas={}, symcs={}, symis={}, symts={},
  symvs={
    @Meta.SymV(
      offset=87, name=@Meta.QName(pack="net.tommay.sudoku.SolverUtil", base="unknownsInSet"), stri="s(ss)",
      sig=2, depth=2, rkind=49
    ),
    @Meta.SymV(
      offset=205, name=@Meta.QName(pack="net.tommay.sudoku.SolverUtil", base="isUnknownInSet"), stri="s(su)",
      sig=4, depth=2, rkind=49
    )
  },
  symls={},
  taus={
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="[]")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="net.tommay.sudoku.Unknown", base="Unknown")}),
    @Meta.Tau(kind=0, suba=0, subb=1),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Int")}),
    @Meta.Tau(kind=0, suba=0, subb=3),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Bool")})
  },
  rhos={
    @Meta.Rho(rhofun=false, rhotau=2), @Meta.Rho(rhofun=false, rhotau=4), @Meta.Rho(sigma=1, rhotau=0),
    @Meta.Rho(sigma=0, rhotau=2), @Meta.Rho(rhofun=false, rhotau=1), @Meta.Rho(rhofun=false, rhotau=5),
    @Meta.Rho(sigma=3, rhotau=5), @Meta.Rho(sigma=1, rhotau=6)
  },
  sigmas={@Meta.Sigma(rho=0), @Meta.Sigma(rho=1), @Meta.Sigma(rho=3), @Meta.Sigma(rho=4), @Meta.Sigma(rho=7)},
  exprs={@Meta.Expr()}
)
final public class SolverUtil  {
  




final public static boolean isUnknownInSet(final PreludeBase.TList<Integer> arg$1, final Lazy<Unknown.TUnknown> arg$2) {
  return PreludeList.<Integer>elem(
            PreludeBase.IEq_Int.it,
            Thunk.<Integer>shared(
                  new Lazy.D<Integer>() {
                    public Integer call() {
                      return Unknown.TUnknown.cellNumber(arg$2.call());
                    }
                  }
                ),
            arg$1
          );
}
final public static PreludeBase.TList<Unknown.TUnknown> unknownsInSet(
  final PreludeBase.TList<Unknown.TUnknown> arg$1, final PreludeBase.TList<Integer> arg$2
) {
  return PreludeList.<Unknown.TUnknown>filter(
            new Func.U.D<Unknown.TUnknown, Boolean>() {
              public Lazy<Boolean> apply(final Lazy<Unknown.TUnknown> η$8064) {
                return Thunk.<Boolean>shared(
                          new Lazy.D<Boolean>() {
                            public Boolean call() {
                              return SolverUtil.isUnknownInSet(arg$2, η$8064);
                            }
                          }
                        );
              }
            },
            arg$1
          );
}

}
