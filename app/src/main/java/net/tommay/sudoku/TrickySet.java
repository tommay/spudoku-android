/*
  Source code is in UTF-8 encoding. The following symbols may appear, among others:
  α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς σ τ υ φ χ ψ ω « • ¦ » ∀ ∃ ∷ … → ← ﬁ ﬂ ƒ
  If you can't read this, you're out of luck. This code was generated with the frege compiler version 3.24.141
  from ./net/tommay/sudoku/TrickySet.fr Do not edit this file! Instead, edit the source file and recompile.
*/

package net.tommay.sudoku;

import frege.run7.Func;
import frege.run7.Lazy;
import frege.run7.Thunk;
import frege.run.Kind;
import frege.run.RunTM;
import frege.runtime.Meta;
import frege.runtime.Phantom.RealWorld;
import frege.Prelude;
import frege.control.Category;
import frege.control.Semigroupoid;
import frege.data.List;
import frege.java.IO;
import frege.java.Lang;
import frege.java.Util;
import frege.java.util.Regex;
import frege.prelude.Maybe;
import frege.prelude.PreludeArrays;
import frege.prelude.PreludeBase;
import frege.prelude.PreludeIO;
import frege.prelude.PreludeList;
import frege.prelude.PreludeMonad;
import frege.prelude.PreludeText;
import net.tommay.sudoku.ExclusionSet;

@SuppressWarnings("unused")
@Meta.FregePackage(
  source="./net/tommay/sudoku/TrickySet.fr", time=1481937170274L, jmajor=1, jminor=7,
  imps={
    "net.tommay.sudoku.ExclusionSet", "frege.data.List", "frege.Prelude", "frege.prelude.PreludeArrays",
    "frege.prelude.PreludeBase", "frege.prelude.PreludeIO", "frege.prelude.PreludeList", "frege.prelude.PreludeMonad",
    "frege.prelude.PreludeText", "frege.java.util.Regex"
  },
  nmss={
    "ExclusionSet", "List", "Prelude", "PreludeArrays", "PreludeBase", "PreludeIO", "PreludeList",
    "PreludeMonad", "PreludeText", "Regexp"
  },
  symas={}, symcs={}, symis={},
  symts={
    @Meta.SymT(
      offset=508, name=@Meta.QName(kind=0, pack="net.tommay.sudoku.TrickySet", base="TrickySet"), typ=0,
      kind=8,
      cons={
        @Meta.SymD(
          offset=520,
          name=@Meta.QName(kind=2, pack="net.tommay.sudoku.TrickySet", base="TrickySet", member="TrickySet"), cid=0,
          typ=4,
          fields={
            @Meta.Field(name="name", offset=534, sigma=1, strict=false),
            @Meta.Field(name="common", offset=552, sigma=2, strict=false),
            @Meta.Field(name="rest", offset=571, sigma=2, strict=false),
            @Meta.Field(name="eliminate", offset=588, sigma=2, strict=false),
            @Meta.Field(name="checkNeeded", offset=610, sigma=3, strict=false)
          },
          priv=true, publik=false
        )
      },
      lnks={},
      funs={
        @Meta.SymV(
          offset=572, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.TrickySet", base="TrickySet", member="upd$rest"),
          stri="s(su)", sig=5, depth=2, rkind=49, doc="update field @rest@"
        ),
        @Meta.SymV(
          offset=535, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.TrickySet", base="TrickySet", member="upd$name"),
          stri="s(su)", sig=6, depth=2, rkind=49, doc="update field @name@"
        ),
        @Meta.SymV(
          offset=553,
          name=@Meta.QName(kind=2, pack="net.tommay.sudoku.TrickySet", base="TrickySet", member="upd$common"),
          stri="s(su)", sig=5, depth=2, rkind=49, doc="update field @common@"
        ),
        @Meta.SymV(
          offset=589,
          name=@Meta.QName(kind=2, pack="net.tommay.sudoku.TrickySet", base="TrickySet", member="upd$eliminate"),
          stri="s(su)", sig=5, depth=2, rkind=49, doc="update field @eliminate@"
        ),
        @Meta.SymV(
          offset=572, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.TrickySet", base="TrickySet", member="rest"),
          stri="s(s)", sig=7, depth=1, rkind=49, doc="access field @rest@"
        ),
        @Meta.SymV(
          offset=572, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.TrickySet", base="TrickySet", member="has$rest"),
          stri="s(u)", sig=9, depth=1, rkind=49, doc="check if constructor has field @rest@"
        ),
        @Meta.SymV(
          offset=535, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.TrickySet", base="TrickySet", member="name"),
          stri="s(s)", sig=10, depth=1, rkind=49, doc="access field @name@"
        ),
        @Meta.SymV(
          offset=553,
          name=@Meta.QName(kind=2, pack="net.tommay.sudoku.TrickySet", base="TrickySet", member="has$common"),
          stri="s(u)", sig=9, depth=1, rkind=49, doc="check if constructor has field @common@"
        ),
        @Meta.SymV(
          offset=589,
          name=@Meta.QName(kind=2, pack="net.tommay.sudoku.TrickySet", base="TrickySet", member="has$eliminate"),
          stri="s(u)", sig=9, depth=1, rkind=49, doc="check if constructor has field @eliminate@"
        ),
        @Meta.SymV(
          offset=535, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.TrickySet", base="TrickySet", member="has$name"),
          stri="s(u)", sig=9, depth=1, rkind=49, doc="check if constructor has field @name@"
        ),
        @Meta.SymV(
          offset=611,
          name=@Meta.QName(kind=2, pack="net.tommay.sudoku.TrickySet", base="TrickySet", member="upd$checkNeeded"),
          stri="s(su)", sig=11, depth=2, rkind=49, doc="update field @checkNeeded@"
        ),
        @Meta.SymV(
          offset=589,
          name=@Meta.QName(kind=2, pack="net.tommay.sudoku.TrickySet", base="TrickySet", member="eliminate"),
          stri="s(s)", sig=7, depth=1, rkind=49, doc="access field @eliminate@"
        ),
        @Meta.SymV(
          offset=572, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.TrickySet", base="TrickySet", member="chg$rest"),
          stri="s(ss)", sig=13, depth=2, rkind=49, doc="change field @rest@"
        ),
        @Meta.SymV(
          offset=553, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.TrickySet", base="TrickySet", member="common"),
          stri="s(s)", sig=7, depth=1, rkind=49, doc="access field @common@"
        ),
        @Meta.SymV(
          offset=553,
          name=@Meta.QName(kind=2, pack="net.tommay.sudoku.TrickySet", base="TrickySet", member="chg$common"),
          stri="s(ss)", sig=13, depth=2, rkind=49, doc="change field @common@"
        ),
        @Meta.SymV(
          offset=589,
          name=@Meta.QName(kind=2, pack="net.tommay.sudoku.TrickySet", base="TrickySet", member="chg$eliminate"),
          stri="s(ss)", sig=13, depth=2, rkind=49, doc="change field @eliminate@"
        ),
        @Meta.SymV(
          offset=535, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.TrickySet", base="TrickySet", member="chg$name"),
          stri="s(ss)", sig=15, depth=2, rkind=49, doc="change field @name@"
        ),
        @Meta.SymV(
          offset=611,
          name=@Meta.QName(kind=2, pack="net.tommay.sudoku.TrickySet", base="TrickySet", member="checkNeeded"),
          stri="s(s)", sig=16, depth=1, rkind=49, doc="access field @checkNeeded@"
        ),
        @Meta.SymV(
          offset=611,
          name=@Meta.QName(kind=2, pack="net.tommay.sudoku.TrickySet", base="TrickySet", member="chg$checkNeeded"),
          stri="s(ss)", sig=18, depth=2, rkind=49, doc="change field @checkNeeded@"
        ),
        @Meta.SymV(
          offset=611,
          name=@Meta.QName(kind=2, pack="net.tommay.sudoku.TrickySet", base="TrickySet", member="has$checkNeeded"),
          stri="s(u)", sig=9, depth=1, rkind=49, doc="check if constructor has field @checkNeeded@"
        )
      },
      prod=true
    )
  },
  symvs={
    @Meta.SymV(
      offset=1452, name=@Meta.QName(pack="net.tommay.sudoku.TrickySet", base="trickySets"), stri="u",
      sig=19, depth=0, rkind=36
    ),
    @Meta.SymV(
      offset=1515, name=@Meta.QName(pack="net.tommay.sudoku.TrickySet", base="inverseTrickySets"), stri="u",
      sig=19, depth=0, rkind=36
    )
  },
  symls={},
  taus={
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="net.tommay.sudoku.TrickySet", base="TrickySet")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="StringJ")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Char")}),
    @Meta.Tau(kind=0, suba=1, subb=2),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="[]")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Int")}),
    @Meta.Tau(kind=0, suba=4, subb=5), @Meta.Tau(kind=0, suba=4, subb=6), @Meta.Tau(kind=9),
    @Meta.Tau(suba=8, tvar="α"),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Bool")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="->")}),
    @Meta.Tau(kind=0, suba=11, subb=6), @Meta.Tau(kind=0, suba=12, subb=6), @Meta.Tau(kind=0, suba=11, subb=3),
    @Meta.Tau(kind=0, suba=14, subb=3), @Meta.Tau(kind=0, suba=11, subb=7), @Meta.Tau(kind=0, suba=16, subb=7),
    @Meta.Tau(kind=0, suba=4, subb=0)
  },
  rhos={
    @Meta.Rho(rhofun=false, rhotau=0), @Meta.Rho(rhofun=false, rhotau=3), @Meta.Rho(rhofun=false, rhotau=6),
    @Meta.Rho(rhofun=false, rhotau=7), @Meta.Rho(sigma=3, rhotau=0), @Meta.Rho(sigma=2, rhotau=4),
    @Meta.Rho(sigma=2, rhotau=5), @Meta.Rho(sigma=2, rhotau=6), @Meta.Rho(sigma=1, rhotau=7),
    @Meta.Rho(sigma=2, rhotau=0), @Meta.Rho(sigma=0, rhotau=9), @Meta.Rho(sigma=1, rhotau=0),
    @Meta.Rho(sigma=0, rhotau=11), @Meta.Rho(sigma=0, rhotau=2), @Meta.Rho(rhofun=false, rhotau=9),
    @Meta.Rho(rhofun=false, rhotau=10), @Meta.Rho(sigma=8, rhotau=15), @Meta.Rho(sigma=0, rhotau=1),
    @Meta.Rho(sigma=0, rhotau=4), @Meta.Rho(rhofun=false, rhotau=13), @Meta.Rho(sigma=12, rhotau=0),
    @Meta.Rho(sigma=0, rhotau=20), @Meta.Rho(rhofun=false, rhotau=15), @Meta.Rho(sigma=14, rhotau=0),
    @Meta.Rho(sigma=0, rhotau=23), @Meta.Rho(sigma=0, rhotau=3), @Meta.Rho(rhofun=false, rhotau=17),
    @Meta.Rho(sigma=17, rhotau=0), @Meta.Rho(sigma=0, rhotau=27), @Meta.Rho(rhofun=false, rhotau=18)
  },
  sigmas={
    @Meta.Sigma(rho=0), @Meta.Sigma(rho=1), @Meta.Sigma(rho=2), @Meta.Sigma(rho=3), @Meta.Sigma(rho=8),
    @Meta.Sigma(rho=10), @Meta.Sigma(rho=12), @Meta.Sigma(rho=13), @Meta.Sigma(rho=14),
    @Meta.Sigma(bound={"α"}, kinds={8}, rho=16), @Meta.Sigma(rho=17), @Meta.Sigma(rho=18), @Meta.Sigma(rho=19),
    @Meta.Sigma(rho=21), @Meta.Sigma(rho=22), @Meta.Sigma(rho=24), @Meta.Sigma(rho=25), @Meta.Sigma(rho=26),
    @Meta.Sigma(rho=28), @Meta.Sigma(rho=29)
  },
  exprs={@Meta.Expr()}
)
final public class TrickySet  {
  



final public static class TTrickySet implements frege.runtime.Value, Lazy<TTrickySet> {
  private TTrickySet(
    final Lazy<String/*<Character>*/> arg$1, final Lazy<PreludeBase.TList<Integer>> arg$2,
    final Lazy<PreludeBase.TList<Integer>> arg$3, final Lazy<PreludeBase.TList<Integer>> arg$4,
    final Lazy<PreludeBase.TList<PreludeBase.TList<Integer>>> arg$5
  ) {
    mem$name = Thunk.<String/*<Character>*/>shared(arg$1);
    mem$common = Thunk.<PreludeBase.TList<Integer>>shared(arg$2);
    mem$rest = Thunk.<PreludeBase.TList<Integer>>shared(arg$3);
    mem$eliminate = Thunk.<PreludeBase.TList<Integer>>shared(arg$4);
    mem$checkNeeded = Thunk.<PreludeBase.TList<PreludeBase.TList<Integer>>>shared(arg$5);
  }
  final public int constructor() {
    return 0;
  }
  final public static TTrickySet mk(
    final Lazy<String/*<Character>*/> arg$1, final Lazy<PreludeBase.TList<Integer>> arg$2,
    final Lazy<PreludeBase.TList<Integer>> arg$3, final Lazy<PreludeBase.TList<Integer>> arg$4,
    final Lazy<PreludeBase.TList<PreludeBase.TList<Integer>>> arg$5
  ) {
    return new TTrickySet(arg$1, arg$2, arg$3, arg$4, arg$5);
  }
  final public Lazy<String/*<Character>*/> mem$name  ;
  final public Lazy<PreludeBase.TList<Integer>> mem$common  ;
  final public Lazy<PreludeBase.TList<Integer>> mem$rest  ;
  final public Lazy<PreludeBase.TList<Integer>> mem$eliminate  ;
  final public Lazy<PreludeBase.TList<PreludeBase.TList<Integer>>> mem$checkNeeded  ;
  final public TTrickySet call() {
    return this;
  }
  final public boolean isShared() {
    return true;
  }
  final public Thunk<TTrickySet> asThunk() {
    return null;
  }
  @SuppressWarnings("unchecked") final public TTrickySet simsalabim() {
    return (TTrickySet)this;
  }
  final public static TTrickySet upd$rest(final TTrickySet arg$1, final Lazy<PreludeBase.TList<Integer>> arg$2) {
    return TTrickySet.mk(arg$1.mem$name, arg$1.mem$common, arg$2, arg$1.mem$eliminate, arg$1.mem$checkNeeded);
  }
  final public static TTrickySet upd$name(final TTrickySet arg$1, final Lazy<String/*<Character>*/> arg$2) {
    return TTrickySet.mk(arg$2, arg$1.mem$common, arg$1.mem$rest, arg$1.mem$eliminate, arg$1.mem$checkNeeded);
  }
  final public static TTrickySet upd$common(final TTrickySet arg$1, final Lazy<PreludeBase.TList<Integer>> arg$2) {
    return TTrickySet.mk(arg$1.mem$name, arg$2, arg$1.mem$rest, arg$1.mem$eliminate, arg$1.mem$checkNeeded);
  }
  final public static TTrickySet upd$eliminate(final TTrickySet arg$1, final Lazy<PreludeBase.TList<Integer>> arg$2) {
    return TTrickySet.mk(arg$1.mem$name, arg$1.mem$common, arg$1.mem$rest, arg$2, arg$1.mem$checkNeeded);
  }
  final public static PreludeBase.TList<Integer> rest(final TTrickySet arg$1) {
    final PreludeBase.TList<Integer> a3$7792 = arg$1.mem$rest.call();
    return a3$7792;
  }
  final public static <α> boolean has$rest(final Lazy<α> arg$1) {
    return true;
  }
  final public static String/*<Character>*/ name(final TTrickySet arg$1) {
    final String/*<Character>*/ a1$7769 = arg$1.mem$name.call();
    return a1$7769;
  }
  final public static <α> boolean has$common(final Lazy<α> arg$1) {
    return true;
  }
  final public static <α> boolean has$eliminate(final Lazy<α> arg$1) {
    return true;
  }
  final public static <α> boolean has$name(final Lazy<α> arg$1) {
    return true;
  }
  final public static TTrickySet upd$checkNeeded(
    final TTrickySet arg$1, final Lazy<PreludeBase.TList<PreludeBase.TList<Integer>>> arg$2
  ) {
    return TTrickySet.mk(arg$1.mem$name, arg$1.mem$common, arg$1.mem$rest, arg$1.mem$eliminate, arg$2);
  }
  final public static PreludeBase.TList<Integer> eliminate(final TTrickySet arg$1) {
    final PreludeBase.TList<Integer> a4$7751 = arg$1.mem$eliminate.call();
    return a4$7751;
  }
  final public static TTrickySet chg$rest(
    final TTrickySet arg$1, final Func.U<PreludeBase.TList<Integer>, PreludeBase.TList<Integer>> arg$2
  ) {
    return TTrickySet.mk(
              arg$1.mem$name, arg$1.mem$common,
              Thunk.<PreludeBase.TList<Integer>>nested(
                    new Lazy.D<Lazy<PreludeBase.TList<Integer>>>() {
                      public Lazy<PreludeBase.TList<Integer>> call() {
                        return arg$2.apply(arg$1.mem$rest);
                      }
                    }
                  ),
              arg$1.mem$eliminate, arg$1.mem$checkNeeded
            );
  }
  final public static PreludeBase.TList<Integer> common(final TTrickySet arg$1) {
    final PreludeBase.TList<Integer> a2$7728 = arg$1.mem$common.call();
    return a2$7728;
  }
  final public static TTrickySet chg$common(
    final TTrickySet arg$1, final Func.U<PreludeBase.TList<Integer>, PreludeBase.TList<Integer>> arg$2
  ) {
    return TTrickySet.mk(
              arg$1.mem$name,
              Thunk.<PreludeBase.TList<Integer>>nested(
                    new Lazy.D<Lazy<PreludeBase.TList<Integer>>>() {
                      public Lazy<PreludeBase.TList<Integer>> call() {
                        return arg$2.apply(arg$1.mem$common);
                      }
                    }
                  ),
              arg$1.mem$rest, arg$1.mem$eliminate, arg$1.mem$checkNeeded
            );
  }
  final public static TTrickySet chg$eliminate(
    final TTrickySet arg$1, final Func.U<PreludeBase.TList<Integer>, PreludeBase.TList<Integer>> arg$2
  ) {
    return TTrickySet.mk(
              arg$1.mem$name, arg$1.mem$common, arg$1.mem$rest,
              Thunk.<PreludeBase.TList<Integer>>nested(
                    new Lazy.D<Lazy<PreludeBase.TList<Integer>>>() {
                      public Lazy<PreludeBase.TList<Integer>> call() {
                        return arg$2.apply(arg$1.mem$eliminate);
                      }
                    }
                  ),
              arg$1.mem$checkNeeded
            );
  }
  final public static TTrickySet chg$name(
    final TTrickySet arg$1, final Func.U<String/*<Character>*/, String/*<Character>*/> arg$2
  ) {
    return TTrickySet.mk(
              Thunk.<String/*<Character>*/>nested(
                    new Lazy.D<Lazy<String/*<Character>*/>>() {
                      public Lazy<String/*<Character>*/> call() {
                        return arg$2.apply(arg$1.mem$name);
                      }
                    }
                  ),
              arg$1.mem$common, arg$1.mem$rest, arg$1.mem$eliminate, arg$1.mem$checkNeeded
            );
  }
  final public static PreludeBase.TList<PreludeBase.TList<Integer>> checkNeeded(final TTrickySet arg$1) {
    final PreludeBase.TList<PreludeBase.TList<Integer>> a5$7710 = arg$1.mem$checkNeeded
    .call();
    return a5$7710;
  }
  final public static TTrickySet chg$checkNeeded(
    final TTrickySet arg$1,
    final Func.U<PreludeBase.TList<PreludeBase.TList<Integer>>, PreludeBase.TList<PreludeBase.TList<Integer>>> arg$2
  ) {
    return TTrickySet.mk(
              arg$1.mem$name, arg$1.mem$common, arg$1.mem$rest, arg$1.mem$eliminate,
              Thunk.<PreludeBase.TList<PreludeBase.TList<Integer>>>nested(
                    new Lazy.D<Lazy<PreludeBase.TList<PreludeBase.TList<Integer>>>>() {
                      public Lazy<PreludeBase.TList<PreludeBase.TList<Integer>>> call() {
                        return arg$2.apply(arg$1.mem$checkNeeded);
                      }
                    }
                  )
            );
  }
  final public static <α> boolean has$checkNeeded(final Lazy<α> arg$1) {
    return true;
  }
}
final public static PreludeBase.TList<PreludeBase.TList<Integer>> getCellSetsIncluding(
  final PreludeBase.TList<ExclusionSet.TExclusionSet> arg$1, final Lazy<PreludeBase.TList<Integer>> arg$2
) {
  return PreludeList.<PreludeBase.TList<Integer>>filter(
            new Func.U.D<PreludeBase.TList<Integer>, Boolean>() {
              public Lazy<Boolean> apply(final Lazy<PreludeBase.TList<Integer>> arg$8250) {
                return Thunk.<Boolean>shared(
                          new Lazy.D<Boolean>() {
                            public Boolean call() {
                              return ! PreludeList.IListView_$lbrack$rbrack.<Integer>$null(
                                        List.<Integer>intersect(PreludeBase.IEq_Int.it, arg$2, arg$8250)
                                      );
                            }
                          }
                        );
              }
            },
            PreludeList.<PreludeBase.TList<Integer>, ExclusionSet.TExclusionSet>map(
                  new Func.U.D<ExclusionSet.TExclusionSet, PreludeBase.TList<Integer>>() {
                    public Lazy<PreludeBase.TList<Integer>> apply(final Lazy<ExclusionSet.TExclusionSet> η$8251) {
                      return Thunk.<PreludeBase.TList<Integer>>shared(
                                new Lazy.D<PreludeBase.TList<Integer>>() {
                                  public PreludeBase.TList<Integer> call() {
                                    return ExclusionSet.TExclusionSet.cells(η$8251.call());
                                  }
                                }
                              );
                    }
                  },
                  arg$1
                )
          );
}
final public static PreludeBase.TList<PreludeBase.TList<Integer>> getSquaresIncluding(
  final Lazy<PreludeBase.TList<Integer>> arg$1
) {
  return TrickySet.getCellSetsIncluding(ExclusionSet.squares.call(), arg$1);
}
final public static PreludeBase.TList<TTrickySet> createTrickySetsFrom(
  final Lazy<Boolean> arg$1, final Lazy<ExclusionSet.TExclusionSet> arg$2, final Lazy<ExclusionSet.TExclusionSet> arg$3,
  final Func.U<PreludeBase.TList<Integer>, PreludeBase.TList<PreludeBase.TList<Integer>>> arg$4
) {
  final Lazy<PreludeBase.TList<Integer>> rowCells$7842 = Thunk.<PreludeBase.TList<Integer>>shared(
        new Lazy.D<PreludeBase.TList<Integer>>() {
          public PreludeBase.TList<Integer> call() {
            final ExclusionSet.TExclusionSet $8252 = arg$3.call();
            final PreludeBase.TList<Integer> rowCells$7853 = $8252.mem$cells;
            return rowCells$7853;
          }
        }
      );
  final Lazy<String/*<Character>*/> rowName$7841 = Thunk.<String/*<Character>*/>shared(
        new Lazy.D<String/*<Character>*/>() {
          public String/*<Character>*/ call() {
            final ExclusionSet.TExclusionSet $8254 = arg$3.call();
            final String/*<Character>*/ rowName$7850 = $8254.mem$name;
            return rowName$7850;
          }
        }
      );
  final Lazy<PreludeBase.TList<Integer>> squareCells$7839 = Thunk.<PreludeBase.TList<Integer>>shared(
        new Lazy.D<PreludeBase.TList<Integer>>() {
          public PreludeBase.TList<Integer> call() {
            final ExclusionSet.TExclusionSet $8256 = arg$2.call();
            final PreludeBase.TList<Integer> squareCells$7849 = $8256.mem$cells;
            return squareCells$7849;
          }
        }
      );
  final Lazy<PreludeBase.TList<Integer>> common$7843 = Thunk.<PreludeBase.TList<Integer>>shared(
        new Lazy.D<PreludeBase.TList<Integer>>() {
          public PreludeBase.TList<Integer> call() {
            return List.<Integer, Integer, PreludeBase.TList<?>>intersectBy(
                      PreludeList.IListSource_$lbrack$rbrack.<PreludeBase.TList<?>>mk(),
                      new Func.U.D<Integer, Func.U<Integer, Boolean>>() {
                        public Lazy<Func.U<Integer, Boolean>> apply(final Lazy<Integer> η$8258) {
                          return new Func.U.D<Integer, Boolean>() {
                                public Lazy<Boolean> apply(final Lazy<Integer> η$8259) {
                                  return Thunk.<Boolean>shared(
                                            new Lazy.D<Boolean>() {
                                              public Boolean call() {
                                                return (int)η$8258.call() == (int)η$8259
                                                    .call();
                                              }
                                            }
                                          );
                                }
                              };
                        }
                      },
                      Thunk.<Kind.U<PreludeBase.TList<?>, Integer>>shared(
                            new Lazy.D<Kind.U<PreludeBase.TList<?>, Integer>>() {
                              public Kind.U<PreludeBase.TList<?>, Integer> call() {
                                return (Kind.U<PreludeBase.TList<?>, Integer>)squareCells$7839
                                    .call();
                              }
                            }
                          ),
                      rowCells$7842
                    );
          }
        }
      );
  final Lazy<String/*<Character>*/> squareName$7838 = Thunk.<String/*<Character>*/>shared(
        new Lazy.D<String/*<Character>*/>() {
          public String/*<Character>*/ call() {
            final ExclusionSet.TExclusionSet $8260 = arg$2.call();
            final String/*<Character>*/ squareName$7846 = $8260.mem$name;
            return squareName$7846;
          }
        }
      );
  final Lazy<Func.U<
    PreludeBase.TList<Integer>, Func.U<PreludeBase.TList<Integer>, PreludeBase.TList<Integer>>
  >> $back$back$7836 = new Func.U.D<
    PreludeBase.TList<Integer>, Func.U<PreludeBase.TList<Integer>, PreludeBase.TList<Integer>>
  >() {
    public Lazy<Func.U<PreludeBase.TList<Integer>, PreludeBase.TList<Integer>>> apply(
      final Lazy<PreludeBase.TList<Integer>> η$8262
    ) {
      return new Func.U.D<PreludeBase.TList<Integer>, PreludeBase.TList<Integer>>() {
            public Lazy<PreludeBase.TList<Integer>> apply(final Lazy<PreludeBase.TList<Integer>> η$8263) {
              return Thunk.<PreludeBase.TList<Integer>>shared(
                        new Lazy.D<PreludeBase.TList<Integer>>() {
                          public PreludeBase.TList<Integer> call() {
                            return List.<Integer>$back$back(PreludeBase.IEq_Int.it, η$8262.call(), η$8263.call());
                          }
                        }
                      );
            }
          };
    }
  };
  final Lazy<PreludeBase.TList<Integer>> restOfSquare$7845 = $back$back$7836.call().apply(
        squareCells$7839
      ).call().apply(common$7843);
  final Lazy<PreludeBase.TList<Integer>> restOfRow$7844 = $back$back$7836.call().apply(
        rowCells$7842
      ).call().apply(common$7843);
  final PreludeBase.TList<Integer> $8264 = common$7843.call();
  final PreludeBase.TList.DList<Integer> $8265 = $8264.asList();
  if ($8265 != null) {
    return PreludeBase.TList.DList.<TTrickySet>mk();
  }
  if (! (boolean)arg$1.call()) {
    return PreludeBase.TList.DCons.<TTrickySet>mk(
              TTrickySet.mk(
                    Thunk.<String/*<Character>*/>shared(
                          new Lazy.D<String/*<Character>*/>() {
                            public String/*<Character>*/ call() {
                              return PreludeText.unwords(
                                        PreludeBase.TList.DCons.<String/*<Character>*/>mk(
                                              Thunk.<String/*<Character>*/>lazy("TrickySet"),
                                              PreludeBase.TList.DCons.<String/*<Character>*/>mk(
                                                    squareName$7838,
                                                    PreludeBase.TList.DCons.<String/*<Character>*/>mk(
                                                          rowName$7841, PreludeBase.TList.DList.<String/*<Character>*/>mk()
                                                        )
                                                  )
                                            )
                                      );
                            }
                          }
                        ),
                    common$7843, restOfSquare$7845, restOfRow$7844,
                    Thunk.<PreludeBase.TList<PreludeBase.TList<Integer>>>shared(
                          new Lazy.D<PreludeBase.TList<PreludeBase.TList<Integer>>>() {
                            public PreludeBase.TList<PreludeBase.TList<Integer>> call() {
                              return TrickySet.getSquaresIncluding(restOfRow$7844);
                            }
                          }
                        )
                  ),
              PreludeBase.TList.DList.<TTrickySet>mk()
            );
  }
  else {
    return PreludeBase.TList.DCons.<TTrickySet>mk(
              TTrickySet.mk(
                    Thunk.<String/*<Character>*/>shared(
                          new Lazy.D<String/*<Character>*/>() {
                            public String/*<Character>*/ call() {
                              return PreludeText.unwords(
                                        PreludeBase.TList.DCons.<String/*<Character>*/>mk(
                                              Thunk.<String/*<Character>*/>lazy("Inverse TrickySet"),
                                              PreludeBase.TList.DCons.<String/*<Character>*/>mk(
                                                    squareName$7838,
                                                    PreludeBase.TList.DCons.<String/*<Character>*/>mk(
                                                          rowName$7841, PreludeBase.TList.DList.<String/*<Character>*/>mk()
                                                        )
                                                  )
                                            )
                                      );
                            }
                          }
                        ),
                    common$7843, restOfRow$7844, restOfSquare$7845,
                    Thunk.<PreludeBase.TList<PreludeBase.TList<Integer>>>nested(
                          new Lazy.D<Lazy<PreludeBase.TList<PreludeBase.TList<Integer>>>>() {
                            public Lazy<PreludeBase.TList<PreludeBase.TList<Integer>>> call() {
                              return arg$4.apply(restOfSquare$7845);
                            }
                          }
                        )
                  ),
              PreludeBase.TList.DList.<TTrickySet>mk()
            );
  }
}
final public static PreludeBase.TList<TTrickySet> createTrickySets(final Lazy<Boolean> arg$1) {
  final Lazy<Func.U<PreludeBase.TList<Integer>, PreludeBase.TList<PreludeBase.TList<Integer>>>> getColumns$7815 =
  new Func.U.D<PreludeBase.TList<Integer>, PreludeBase.TList<PreludeBase.TList<Integer>>>() {
    public Lazy<PreludeBase.TList<PreludeBase.TList<Integer>>> apply(final Lazy<PreludeBase.TList<Integer>> η$8266) {
      return Thunk.<PreludeBase.TList<PreludeBase.TList<Integer>>>shared(
                new Lazy.D<PreludeBase.TList<PreludeBase.TList<Integer>>>() {
                  public PreludeBase.TList<PreludeBase.TList<Integer>> call() {
                    return TrickySet.getCellSetsIncluding(ExclusionSet.columns.call(), η$8266);
                  }
                }
              );
    }
  };
  final Lazy<Func.U<PreludeBase.TList<Integer>, PreludeBase.TList<PreludeBase.TList<Integer>>>> getRows$7814 =
  new Func.U.D<PreludeBase.TList<Integer>, PreludeBase.TList<PreludeBase.TList<Integer>>>() {
    public Lazy<PreludeBase.TList<PreludeBase.TList<Integer>>> apply(final Lazy<PreludeBase.TList<Integer>> η$8267) {
      return Thunk.<PreludeBase.TList<PreludeBase.TList<Integer>>>shared(
                new Lazy.D<PreludeBase.TList<PreludeBase.TList<Integer>>>() {
                  public PreludeBase.TList<PreludeBase.TList<Integer>> call() {
                    return TrickySet.getCellSetsIncluding(ExclusionSet.rows.call(), η$8267);
                  }
                }
              );
    }
  };
  final class Let$8268  {
    final Let$8268 let$8268 = this;
    final public Lazy<PreludeBase.TList<PreludeBase.TList<TTrickySet>>> $lc1005$7824(
      final PreludeBase.TList<ExclusionSet.TExclusionSet> arg$2
    ) {
      final PreludeBase.TList.DCons<ExclusionSet.TExclusionSet> $8269 = arg$2.asCons();
      if ($8269 != null) {
        final class Let$8270  {
          final Let$8270 let$8270 = this;
          final public Lazy<PreludeBase.TList<PreludeBase.TList<TTrickySet>>> $lc1008$7828(
            final PreludeBase.TList<ExclusionSet.TExclusionSet> arg$3
          ) {
            final PreludeBase.TList.DCons<ExclusionSet.TExclusionSet> $8271 = arg$3.asCons();
            if ($8271 != null) {
              return Thunk.<PreludeBase.TList<PreludeBase.TList<TTrickySet>>>shared(
                        new Lazy.D<PreludeBase.TList<PreludeBase.TList<TTrickySet>>>() {
                          public PreludeBase.TList<PreludeBase.TList<TTrickySet>> call() {
                            return PreludeBase.<PreludeBase.TList<TTrickySet>>$excl$colon(
                                      TrickySet.createTrickySetsFrom(arg$1, $8269.mem1, $8271.mem1, getRows$7814.call()),
                                      Thunk.<PreludeBase.TList<PreludeBase.TList<TTrickySet>>>nested(
                                            new Lazy.D<Lazy<PreludeBase.TList<PreludeBase.TList<TTrickySet>>>>() {
                                              public Lazy<PreludeBase.TList<PreludeBase.TList<TTrickySet>>> call() {
                                                return let$8270.$lc1008$7828($8271.mem2.call());
                                              }
                                            }
                                          )
                                    );
                          }
                        }
                      );
            }
            final PreludeBase.TList.DList<ExclusionSet.TExclusionSet> $8272 = arg$3.asList();
            assert $8272 != null;
            return let$8268.$lc1005$7824($8269.mem2.call());
          }
        }
        final Let$8270 let$8270 = new Let$8270();
        return Thunk.<PreludeBase.TList<PreludeBase.TList<TTrickySet>>>nested(
                  new Lazy.D<Lazy<PreludeBase.TList<PreludeBase.TList<TTrickySet>>>>() {
                    public Lazy<PreludeBase.TList<PreludeBase.TList<TTrickySet>>> call() {
                      return let$8270.$lc1008$7828(ExclusionSet.columns.call());
                    }
                  }
                );
      }
      final PreludeBase.TList.DList<ExclusionSet.TExclusionSet> $8273 = arg$2.asList();
      assert $8273 != null;
      return PreludeBase.TList.DList.<PreludeBase.TList<TTrickySet>>mk();
    }
    final public Lazy<PreludeBase.TList<PreludeBase.TList<TTrickySet>>> $lc999$7816(
      final PreludeBase.TList<ExclusionSet.TExclusionSet> arg$2
    ) {
      final PreludeBase.TList.DCons<ExclusionSet.TExclusionSet> $8274 = arg$2.asCons();
      if ($8274 != null) {
        final class Let$8275  {
          final Let$8275 let$8275 = this;
          final public Lazy<PreludeBase.TList<PreludeBase.TList<TTrickySet>>> $lc1002$7820(
            final PreludeBase.TList<ExclusionSet.TExclusionSet> arg$3
          ) {
            final PreludeBase.TList.DCons<ExclusionSet.TExclusionSet> $8276 = arg$3.asCons();
            if ($8276 != null) {
              return Thunk.<PreludeBase.TList<PreludeBase.TList<TTrickySet>>>shared(
                        new Lazy.D<PreludeBase.TList<PreludeBase.TList<TTrickySet>>>() {
                          public PreludeBase.TList<PreludeBase.TList<TTrickySet>> call() {
                            return PreludeBase.<PreludeBase.TList<TTrickySet>>$excl$colon(
                                      TrickySet.createTrickySetsFrom(arg$1, $8274.mem1, $8276.mem1, getColumns$7815.call()),
                                      Thunk.<PreludeBase.TList<PreludeBase.TList<TTrickySet>>>nested(
                                            new Lazy.D<Lazy<PreludeBase.TList<PreludeBase.TList<TTrickySet>>>>() {
                                              public Lazy<PreludeBase.TList<PreludeBase.TList<TTrickySet>>> call() {
                                                return let$8275.$lc1002$7820($8276.mem2.call());
                                              }
                                            }
                                          )
                                    );
                          }
                        }
                      );
            }
            final PreludeBase.TList.DList<ExclusionSet.TExclusionSet> $8277 = arg$3.asList();
            assert $8277 != null;
            return let$8268.$lc999$7816($8274.mem2.call());
          }
        }
        final Let$8275 let$8275 = new Let$8275();
        return Thunk.<PreludeBase.TList<PreludeBase.TList<TTrickySet>>>nested(
                  new Lazy.D<Lazy<PreludeBase.TList<PreludeBase.TList<TTrickySet>>>>() {
                    public Lazy<PreludeBase.TList<PreludeBase.TList<TTrickySet>>> call() {
                      return let$8275.$lc1002$7820(ExclusionSet.rows.call());
                    }
                  }
                );
      }
      final PreludeBase.TList.DList<ExclusionSet.TExclusionSet> $8278 = arg$2.asList();
      assert $8278 != null;
      return PreludeBase.TList.DList.<PreludeBase.TList<TTrickySet>>mk();
    }
  }
  final Let$8268 let$8268 = new Let$8268();
  return PreludeList.IListMonoid_$lbrack$rbrack.<TTrickySet>concat(
            PreludeList.IListMonoid_$lbrack$rbrack.<PreludeBase.TList<TTrickySet>>$plus$plus(
                  let$8268.$lc999$7816(ExclusionSet.squares.call()).call(),
                  Thunk.<PreludeBase.TList<PreludeBase.TList<TTrickySet>>>nested(
                        new Lazy.D<Lazy<PreludeBase.TList<PreludeBase.TList<TTrickySet>>>>() {
                          public Lazy<PreludeBase.TList<PreludeBase.TList<TTrickySet>>> call() {
                            return let$8268.$lc1005$7824(ExclusionSet.squares.call());
                          }
                        }
                      )
                )
          );
}
final public static Lazy<PreludeBase.TList<TTrickySet>> trickySets = Thunk.<PreludeBase.TList<TTrickySet>>shared(
      new Lazy.D<PreludeBase.TList<TTrickySet>>() {
        public PreludeBase.TList<TTrickySet> call() {
          return TrickySet.createTrickySets(Thunk.<Boolean>lazy(false));
        }
      }
    );
final public static Lazy<PreludeBase.TList<TTrickySet>> inverseTrickySets = Thunk.<PreludeBase.TList<TTrickySet>>shared(
      new Lazy.D<PreludeBase.TList<TTrickySet>>() {
        public PreludeBase.TList<TTrickySet> call() {
          return TrickySet.createTrickySets(Thunk.<Boolean>lazy(true));
        }
      }
    );

}
