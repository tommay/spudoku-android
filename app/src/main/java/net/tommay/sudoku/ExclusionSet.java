/*
  Source code is in UTF-8 encoding. The following symbols may appear, among others:
  α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς σ τ υ φ χ ψ ω « • ¦ » ∀ ∃ ∷ … → ← ﬁ ﬂ ƒ
  If you can't read this, you're out of luck. This code was generated with the frege compiler version 3.24.141
  from ./net/tommay/sudoku/ExclusionSet.fr Do not edit this file! Instead, edit the source file and recompile.
*/

package net.tommay.sudoku;

import frege.run7.Func;
import frege.run7.Lazy;
import frege.run7.Thunk;
import frege.run.Kind;
import frege.run.RunTM;
import frege.runtime.Meta;
import frege.runtime.Phantom.RealWorld;
import frege.Prelude;
import frege.control.Category;
import frege.control.Semigroupoid;
import frege.java.IO;
import frege.java.Lang;
import frege.java.Util;
import frege.java.util.Regex;
import frege.prelude.Maybe;
import frege.prelude.PreludeArrays;
import frege.prelude.PreludeBase;
import frege.prelude.PreludeIO;
import frege.prelude.PreludeList;
import frege.prelude.PreludeMonad;
import frege.prelude.PreludeText;

@SuppressWarnings("unused")
@Meta.FregePackage(
  source="./net/tommay/sudoku/ExclusionSet.fr", time=1481937166634L, jmajor=1, jminor=7,
  imps={
    "frege.Prelude", "frege.prelude.PreludeArrays", "frege.prelude.PreludeBase", "frege.prelude.PreludeIO",
    "frege.prelude.PreludeList", "frege.prelude.PreludeMonad", "frege.prelude.PreludeText", "frege.java.util.Regex"
  },
  nmss={"Prelude", "PreludeArrays", "PreludeBase", "PreludeIO", "PreludeList", "PreludeMonad", "PreludeText", "Regexp"},
  symas={}, symcs={},
  symis={
    @Meta.SymI(
      offset=120, name=@Meta.QName(kind=0, pack="net.tommay.sudoku.ExclusionSet", base="Eq_ExclusionSet"),
      clas=@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Eq"), typ=0, lnks={},
      funs={
        @Meta.SymV(
          offset=120,
          name=@Meta.QName(kind=2, pack="net.tommay.sudoku.ExclusionSet", base="Eq_ExclusionSet", member="hashCode"),
          stri="s(s)", sig=1, depth=1, rkind=49, doc="Function generated for derived instance."
        ),
        @Meta.SymV(
          offset=120,
          name=@Meta.QName(kind=2, pack="net.tommay.sudoku.ExclusionSet", base="Eq_ExclusionSet", member="!="),
          stri="s(ss)", sig=2, depth=2, rkind=49, doc="inherited from 'Eq.!='", op=95
        ),
        @Meta.SymV(
          offset=120,
          name=@Meta.QName(kind=2, pack="net.tommay.sudoku.ExclusionSet", base="Eq_ExclusionSet", member="=="),
          stri="s(ss)", sig=2, depth=2, rkind=49, doc="Function generated for derived instance.", op=95
        )
      }
    )
  },
  symts={
    @Meta.SymT(
      offset=50, name=@Meta.QName(kind=0, pack="net.tommay.sudoku.ExclusionSet", base="ExclusionSet"), typ=0,
      kind=8,
      cons={
        @Meta.SymD(
          offset=65,
          name=@Meta.QName(kind=2, pack="net.tommay.sudoku.ExclusionSet", base="ExclusionSet", member="ExclusionSet"),
          cid=0, typ=5,
          fields={@Meta.Field(name="name", offset=83, sigma=3), @Meta.Field(name="cells", offset=102, sigma=4)}
        )
      },
      lnks={
        @Meta.SymL(
          offset=120,
          name=@Meta.QName(kind=2, pack="net.tommay.sudoku.ExclusionSet", base="ExclusionSet", member="hashCode"),
          alias=@Meta.QName(kind=2, pack="net.tommay.sudoku.ExclusionSet", base="Eq_ExclusionSet", member="hashCode")
        ),
        @Meta.SymL(
          offset=120, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.ExclusionSet", base="ExclusionSet", member="!="),
          alias=@Meta.QName(kind=2, pack="net.tommay.sudoku.ExclusionSet", base="Eq_ExclusionSet", member="!=")
        ),
        @Meta.SymL(
          offset=120, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.ExclusionSet", base="ExclusionSet", member="=="),
          alias=@Meta.QName(kind=2, pack="net.tommay.sudoku.ExclusionSet", base="Eq_ExclusionSet", member="==")
        )
      },
      funs={
        @Meta.SymV(
          offset=84,
          name=@Meta.QName(kind=2, pack="net.tommay.sudoku.ExclusionSet", base="ExclusionSet", member="upd$name"),
          stri="s(ss)", sig=6, depth=2, rkind=49, doc="update field @name@"
        ),
        @Meta.SymV(
          offset=84,
          name=@Meta.QName(kind=2, pack="net.tommay.sudoku.ExclusionSet", base="ExclusionSet", member="name"),
          stri="s(s)", sig=7, depth=1, rkind=49, doc="access field @name@"
        ),
        @Meta.SymV(
          offset=84,
          name=@Meta.QName(kind=2, pack="net.tommay.sudoku.ExclusionSet", base="ExclusionSet", member="has$name"),
          stri="s(u)", sig=9, depth=1, rkind=49, doc="check if constructor has field @name@"
        ),
        @Meta.SymV(
          offset=103,
          name=@Meta.QName(kind=2, pack="net.tommay.sudoku.ExclusionSet", base="ExclusionSet", member="upd$cells"),
          stri="s(ss)", sig=10, depth=2, rkind=49, doc="update field @cells@"
        ),
        @Meta.SymV(
          offset=84,
          name=@Meta.QName(kind=2, pack="net.tommay.sudoku.ExclusionSet", base="ExclusionSet", member="chg$name"),
          stri="s(ss)", sig=12, depth=2, rkind=49, doc="change field @name@"
        ),
        @Meta.SymV(
          offset=103,
          name=@Meta.QName(kind=2, pack="net.tommay.sudoku.ExclusionSet", base="ExclusionSet", member="chg$cells"),
          stri="s(ss)", sig=14, depth=2, rkind=49, doc="change field @cells@"
        ),
        @Meta.SymV(
          offset=103,
          name=@Meta.QName(kind=2, pack="net.tommay.sudoku.ExclusionSet", base="ExclusionSet", member="cells"),
          stri="s(s)", sig=15, depth=1, rkind=49, doc="access field @cells@"
        ),
        @Meta.SymV(
          offset=103,
          name=@Meta.QName(kind=2, pack="net.tommay.sudoku.ExclusionSet", base="ExclusionSet", member="has$cells"),
          stri="s(u)", sig=9, depth=1, rkind=49, doc="check if constructor has field @cells@"
        )
      },
      prod=true
    )
  },
  symvs={
    @Meta.SymV(
      offset=814, name=@Meta.QName(pack="net.tommay.sudoku.ExclusionSet", base="squares"), stri="u",
      sig=16, depth=0, rkind=36
    ),
    @Meta.SymV(
      offset=450, name=@Meta.QName(pack="net.tommay.sudoku.ExclusionSet", base="row"), stri="s(s)",
      sig=18, depth=1, rkind=49
    ),
    @Meta.SymV(
      offset=404, name=@Meta.QName(pack="net.tommay.sudoku.ExclusionSet", base="rows"), stri="u",
      sig=16, depth=0, rkind=36
    ),
    @Meta.SymV(
      offset=290, name=@Meta.QName(pack="net.tommay.sudoku.ExclusionSet", base="exclusionSets"), stri="u",
      sig=16, depth=0, rkind=36
    ),
    @Meta.SymV(
      offset=655, name=@Meta.QName(pack="net.tommay.sudoku.ExclusionSet", base="column"), stri="s(s)",
      sig=18, depth=1, rkind=49
    ),
    @Meta.SymV(
      offset=600, name=@Meta.QName(pack="net.tommay.sudoku.ExclusionSet", base="columns"), stri="u",
      sig=16, depth=0, rkind=36
    )
  },
  symls={
    @Meta.SymL(
      offset=65, name=@Meta.QName(pack="net.tommay.sudoku.ExclusionSet", base="ExclusionSet"),
      alias=@Meta.QName(kind=2, pack="net.tommay.sudoku.ExclusionSet", base="ExclusionSet", member="ExclusionSet")
    )
  },
  taus={
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="net.tommay.sudoku.ExclusionSet", base="ExclusionSet")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Int")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Bool")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="StringJ")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Char")}),
    @Meta.Tau(kind=0, suba=3, subb=4),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="[]")}),
    @Meta.Tau(kind=0, suba=6, subb=1), @Meta.Tau(kind=9), @Meta.Tau(suba=8, tvar="α"),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="->")}),
    @Meta.Tau(kind=0, suba=10, subb=5), @Meta.Tau(kind=0, suba=11, subb=5), @Meta.Tau(kind=0, suba=10, subb=7),
    @Meta.Tau(kind=0, suba=13, subb=7), @Meta.Tau(kind=0, suba=6, subb=0)
  },
  rhos={
    @Meta.Rho(rhofun=false, rhotau=0), @Meta.Rho(rhofun=false, rhotau=1), @Meta.Rho(sigma=0, rhotau=1),
    @Meta.Rho(rhofun=false, rhotau=2), @Meta.Rho(sigma=0, rhotau=3), @Meta.Rho(sigma=0, rhotau=4),
    @Meta.Rho(rhofun=false, rhotau=5), @Meta.Rho(rhofun=false, rhotau=7), @Meta.Rho(sigma=4, rhotau=0),
    @Meta.Rho(sigma=3, rhotau=8), @Meta.Rho(sigma=3, rhotau=0), @Meta.Rho(sigma=0, rhotau=10),
    @Meta.Rho(sigma=0, rhotau=6), @Meta.Rho(rhofun=false, rhotau=9), @Meta.Rho(sigma=8, rhotau=3),
    @Meta.Rho(sigma=0, rhotau=8), @Meta.Rho(rhofun=false, rhotau=12), @Meta.Rho(sigma=11, rhotau=0),
    @Meta.Rho(sigma=0, rhotau=17), @Meta.Rho(rhofun=false, rhotau=14), @Meta.Rho(sigma=13, rhotau=0),
    @Meta.Rho(sigma=0, rhotau=20), @Meta.Rho(sigma=0, rhotau=7), @Meta.Rho(rhofun=false, rhotau=15),
    @Meta.Rho(sigma=17, rhotau=0)
  },
  sigmas={
    @Meta.Sigma(rho=0), @Meta.Sigma(rho=2), @Meta.Sigma(rho=5), @Meta.Sigma(rho=6), @Meta.Sigma(rho=7),
    @Meta.Sigma(rho=9), @Meta.Sigma(rho=11), @Meta.Sigma(rho=12), @Meta.Sigma(rho=13),
    @Meta.Sigma(bound={"α"}, kinds={8}, rho=14), @Meta.Sigma(rho=15), @Meta.Sigma(rho=16), @Meta.Sigma(rho=18),
    @Meta.Sigma(rho=19), @Meta.Sigma(rho=21), @Meta.Sigma(rho=22), @Meta.Sigma(rho=23), @Meta.Sigma(rho=1),
    @Meta.Sigma(rho=24)
  },
  exprs={@Meta.Expr()}
)
final public class ExclusionSet  {
  


final public static class IEq_ExclusionSet implements PreludeBase.CEq<TExclusionSet> {
  public IEq_ExclusionSet() {}
  final public static IEq_ExclusionSet it = new IEq_ExclusionSet();
  @Override final public int ƒhashCode(final Lazy<TExclusionSet> arg$1) {
    return IEq_ExclusionSet.hashCode(arg$1.call());
  }
  @Override final public boolean ƒ$excl$eq(final Lazy<TExclusionSet> arg$1, final Lazy<TExclusionSet> arg$2) {
    return IEq_ExclusionSet.$excl$eq(arg$1.call(), arg$2.call());
  }
  @Override final public boolean ƒ$eq$eq(final Lazy<TExclusionSet> arg$1, final Lazy<TExclusionSet> arg$2) {
    return IEq_ExclusionSet.$eq$eq(arg$1.call(), arg$2.call());
  }
  final public static int hashCode(final TExclusionSet arg$1) {
    final PreludeBase.TList<Integer> a2$7654 = arg$1.mem$cells;
    final String/*<Character>*/ a1$7653 = arg$1.mem$name;
    return (31 * ((31 * ((31 * 1) + RunTM.constructor(arg$1))) + a1$7653.hashCode())) + PreludeBase.IEq_$lbrack$rbrack.<
          Integer
        >hashCode(PreludeBase.IEq_Int.it, a2$7654);
  }
  final public static boolean $excl$eq(final TExclusionSet arg$1, final TExclusionSet arg$2) {
    if (IEq_ExclusionSet.$eq$eq(arg$1, arg$2)) {
      return false;
    }
    else {
      return true;
    }
  }
  final public static boolean $eq$eq(final TExclusionSet arg$1, final TExclusionSet arg$2) {
    final PreludeBase.TList<Integer> p$7662$7662 = arg$1.mem$cells;
    final String/*<Character>*/ p$7661$7661 = arg$1.mem$name;
    final String/*<Character>*/ p$7663$7663 = arg$2.mem$name;
    return p$7661$7661.equals(p$7663$7663) && PreludeBase.IEq_$lbrack$rbrack.<Integer>$eq$eq(
              PreludeBase.IEq_Int.it, p$7662$7662, arg$2.mem$cells
            );
  }
}
final public static class TExclusionSet implements frege.runtime.Value, Lazy<TExclusionSet> {
  private TExclusionSet(final String/*<Character>*/ arg$1, final PreludeBase.TList<Integer> arg$2) {
    mem$name = arg$1;
    mem$cells = arg$2;
  }
  final public int constructor() {
    return 0;
  }
  final public static TExclusionSet mk(final String/*<Character>*/ arg$1, final PreludeBase.TList<Integer> arg$2) {
    return new TExclusionSet(arg$1, arg$2);
  }
  final public String/*<Character>*/ mem$name  ;
  final public PreludeBase.TList<Integer> mem$cells  ;
  final public TExclusionSet call() {
    return this;
  }
  final public boolean isShared() {
    return true;
  }
  final public Thunk<TExclusionSet> asThunk() {
    return null;
  }
  @SuppressWarnings("unchecked") final public TExclusionSet simsalabim() {
    return (TExclusionSet)this;
  }
  final public static TExclusionSet upd$name(final TExclusionSet arg$1, final String/*<Character>*/ arg$2) {
    final PreludeBase.TList<Integer> a2$7622 = arg$1.mem$cells;
    return TExclusionSet.mk(arg$2, a2$7622);
  }
  final public static String/*<Character>*/ name(final TExclusionSet arg$1) {
    final String/*<Character>*/ a1$7617 = arg$1.mem$name;
    return a1$7617;
  }
  final public static <α> boolean has$name(final Lazy<α> arg$1) {
    return true;
  }
  final public static TExclusionSet upd$cells(final TExclusionSet arg$1, final PreludeBase.TList<Integer> arg$2) {
    final String/*<Character>*/ a1$7609 = arg$1.mem$name;
    return TExclusionSet.mk(a1$7609, arg$2);
  }
  final public static TExclusionSet chg$name(
    final TExclusionSet arg$1, final Func.U<String/*<Character>*/, String/*<Character>*/> arg$2
  ) {
    final PreludeBase.TList<Integer> a2$7626 = arg$1.mem$cells;
    return TExclusionSet.mk(arg$2.apply(Thunk.<String/*<Character>*/>lazy(arg$1.mem$name)).call(), a2$7626);
  }
  final public static TExclusionSet chg$cells(
    final TExclusionSet arg$1, final Func.U<PreludeBase.TList<Integer>, PreludeBase.TList<Integer>> arg$2
  ) {
    final String/*<Character>*/ a1$7613 = arg$1.mem$name;
    return TExclusionSet.mk(a1$7613, arg$2.apply(arg$1.mem$cells).call());
  }
  final public static PreludeBase.TList<Integer> cells(final TExclusionSet arg$1) {
    final PreludeBase.TList<Integer> a2$7606 = arg$1.mem$cells;
    return a2$7606;
  }
  final public static <α> boolean has$cells(final Lazy<α> arg$1) {
    return true;
  }
}
final public static TExclusionSet square(final int arg$1) {
  final Lazy<Integer> col$7640 = Thunk.<Integer>shared(
        new Lazy.D<Integer>() {
          public Integer call() {
            return PreludeBase.IIntegral_Int.mod(arg$1, 3) * 3;
          }
        }
      );
  final Lazy<Integer> row$7639 = Thunk.<Integer>shared(
        new Lazy.D<Integer>() {
          public Integer call() {
            return PreludeBase.IIntegral_Int.div(arg$1, 3) * 3;
          }
        }
      );
  final Lazy<PreludeBase.TList<Integer>> cellNumbers$7641 = Thunk.<PreludeBase.TList<Integer>>shared(
        new Lazy.D<PreludeBase.TList<Integer>>() {
          public PreludeBase.TList<Integer> call() {
            final class Let$7945  {
              final Let$7945 let$7945 = this;
              final public PreludeBase.TList<Integer> $lc1005$7642(final PreludeBase.TList<Integer> arg$2) {
                final PreludeBase.TList.DCons<Integer> $7946 = arg$2.asCons();
                if ($7946 != null) {
                  final int n$7644 = (int)$7946.mem1.call();
                  return PreludeBase.<Integer>$excl$colon(
                            (((int)row$7639.call() + PreludeBase.IIntegral_Int.div(n$7644, 3)) * 9) + ((int)col$7640
                            .call() + PreludeBase.IIntegral_Int.mod(n$7644, 3)),
                            Thunk.<PreludeBase.TList<Integer>>shared(
                                  new Lazy.D<PreludeBase.TList<Integer>>() {
                                    public PreludeBase.TList<Integer> call() {
                                      return let$7945.$lc1005$7642($7946.mem2.call());
                                    }
                                  }
                                )
                          );
                }
                final PreludeBase.TList.DList<Integer> $7948 = arg$2.asList();
                assert $7948 != null;
                return PreludeBase.TList.DList.<Integer>mk();
              }
            }
            final Let$7945 let$7945 = new Let$7945();
            return let$7945.$lc1005$7642(PreludeBase.IEnum_Int.enumFromTo(0, 8));
          }
        }
      );
  return TExclusionSet.mk("square " + String.valueOf(arg$1), cellNumbers$7641.call());
}
final public static Lazy<PreludeBase.TList<TExclusionSet>> squares = Thunk.<PreludeBase.TList<TExclusionSet>>shared(
      new Lazy.D<PreludeBase.TList<TExclusionSet>>() {
        public PreludeBase.TList<TExclusionSet> call() {
          return PreludeList.<TExclusionSet, Integer>map(
                    new Func.U.D<Integer, TExclusionSet>() {
                      public Lazy<TExclusionSet> apply(final Lazy<Integer> η$7949) {
                        return Thunk.<TExclusionSet>shared(
                                  new Lazy.D<TExclusionSet>() {
                                    public TExclusionSet call() {
                                      return ExclusionSet.square((int)η$7949.call());
                                    }
                                  }
                                );
                      }
                    },
                    PreludeBase.IEnum_Int.enumFromTo(0, 8)
                  );
        }
      }
    );
final public static TExclusionSet row(final int arg$1) {
  final class Let$7950  {
    final Let$7950 let$7950 = this;
    final public PreludeBase.TList<Integer> $lc999$7629(final PreludeBase.TList<Integer> arg$2) {
      final PreludeBase.TList.DCons<Integer> $7951 = arg$2.asCons();
      if ($7951 != null) {
        final int col$7631 = (int)$7951.mem1.call();
        return PreludeBase.<Integer>$excl$colon(
                  (arg$1 * 9) + col$7631,
                  Thunk.<PreludeBase.TList<Integer>>shared(
                        new Lazy.D<PreludeBase.TList<Integer>>() {
                          public PreludeBase.TList<Integer> call() {
                            return let$7950.$lc999$7629($7951.mem2.call());
                          }
                        }
                      )
                );
      }
      final PreludeBase.TList.DList<Integer> $7953 = arg$2.asList();
      assert $7953 != null;
      return PreludeBase.TList.DList.<Integer>mk();
    }
  }
  final Let$7950 let$7950 = new Let$7950();
  return TExclusionSet.mk("row " + String.valueOf(arg$1), let$7950.$lc999$7629(PreludeBase.IEnum_Int.enumFromTo(0, 8)));
}
final public static Lazy<PreludeBase.TList<TExclusionSet>> rows = Thunk.<PreludeBase.TList<TExclusionSet>>shared(
      new Lazy.D<PreludeBase.TList<TExclusionSet>>() {
        public PreludeBase.TList<TExclusionSet> call() {
          return PreludeList.<TExclusionSet, Integer>map(
                    new Func.U.D<Integer, TExclusionSet>() {
                      public Lazy<TExclusionSet> apply(final Lazy<Integer> η$7954) {
                        return Thunk.<TExclusionSet>shared(
                                  new Lazy.D<TExclusionSet>() {
                                    public TExclusionSet call() {
                                      return ExclusionSet.row((int)η$7954.call());
                                    }
                                  }
                                );
                      }
                    },
                    PreludeBase.IEnum_Int.enumFromTo(0, 8)
                  );
        }
      }
    );
final public static TExclusionSet column(final int arg$1) {
  final class Let$7955  {
    final Let$7955 let$7955 = this;
    final public PreludeBase.TList<Integer> $lc1002$7634(final PreludeBase.TList<Integer> arg$2) {
      final PreludeBase.TList.DCons<Integer> $7956 = arg$2.asCons();
      if ($7956 != null) {
        final int row$7636 = (int)$7956.mem1.call();
        return PreludeBase.<Integer>$excl$colon(
                  (row$7636 * 9) + arg$1,
                  Thunk.<PreludeBase.TList<Integer>>shared(
                        new Lazy.D<PreludeBase.TList<Integer>>() {
                          public PreludeBase.TList<Integer> call() {
                            return let$7955.$lc1002$7634($7956.mem2.call());
                          }
                        }
                      )
                );
      }
      final PreludeBase.TList.DList<Integer> $7958 = arg$2.asList();
      assert $7958 != null;
      return PreludeBase.TList.DList.<Integer>mk();
    }
  }
  final Let$7955 let$7955 = new Let$7955();
  return TExclusionSet.mk("column " + String.valueOf(arg$1), let$7955.$lc1002$7634(PreludeBase.IEnum_Int.enumFromTo(0, 8)));
}
final public static Lazy<PreludeBase.TList<TExclusionSet>> columns = Thunk.<PreludeBase.TList<TExclusionSet>>shared(
      new Lazy.D<PreludeBase.TList<TExclusionSet>>() {
        public PreludeBase.TList<TExclusionSet> call() {
          return PreludeList.<TExclusionSet, Integer>map(
                    new Func.U.D<Integer, TExclusionSet>() {
                      public Lazy<TExclusionSet> apply(final Lazy<Integer> η$7959) {
                        return Thunk.<TExclusionSet>shared(
                                  new Lazy.D<TExclusionSet>() {
                                    public TExclusionSet call() {
                                      return ExclusionSet.column((int)η$7959.call());
                                    }
                                  }
                                );
                      }
                    },
                    PreludeBase.IEnum_Int.enumFromTo(0, 8)
                  );
        }
      }
    );
final public static Lazy<PreludeBase.TList<TExclusionSet>> exclusionSets = Thunk.<PreludeBase.TList<TExclusionSet>>shared(
      new Lazy.D<PreludeBase.TList<TExclusionSet>>() {
        public PreludeBase.TList<TExclusionSet> call() {
          return PreludeList.IListMonoid_$lbrack$rbrack.<TExclusionSet>$plus$plus(
                    ExclusionSet.rows.call(),
                    Thunk.<PreludeBase.TList<TExclusionSet>>shared(
                          new Lazy.D<PreludeBase.TList<TExclusionSet>>() {
                            public PreludeBase.TList<TExclusionSet> call() {
                              return PreludeList.IListMonoid_$lbrack$rbrack.<TExclusionSet>$plus$plus(
                                        ExclusionSet.columns.call(), ExclusionSet.squares
                                      );
                            }
                          }
                        )
                  );
        }
      }
    );

}
