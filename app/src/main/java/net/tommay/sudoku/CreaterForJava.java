/*
  Source code is in UTF-8 encoding. The following symbols may appear, among others:
  α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς σ τ υ φ χ ψ ω « • ¦ » ∀ ∃ ∷ … → ← ﬁ ﬂ ƒ
  If you can't read this, you're out of luck. This code was generated with the frege compiler version 3.24.141
  from net/tommay/sudoku/CreaterForJava.fr Do not edit this file! Instead, edit the source file and recompile.
*/

package net.tommay.sudoku;

import frege.run7.Func;
import frege.run7.Lazy;
import frege.run7.Thunk;
import frege.run.Kind;
import frege.run.RunTM;
import frege.runtime.Meta;
import frege.runtime.Phantom.RealWorld;
import frege.Prelude;
import frege.control.Category;
import frege.control.Semigroupoid;
import frege.data.Bits;
import frege.data.Char;
import frege.data.Foldable;
import frege.data.HashMap;
import frege.data.Iterators;
import frege.data.JSON;
import frege.data.List;
import frege.data.MicroParsec;
import frege.data.Monoid;
import frege.data.Traversable;
import frege.data.wrapper.Const;
import frege.data.wrapper.Dual;
import frege.data.wrapper.Endo;
import frege.data.wrapper.Identity;
import frege.data.wrapper.Num;
import frege.java.IO;
import frege.java.Lang;
import frege.java.Util;
import frege.java.util.Regex;
import frege.lib.PP;
import frege.prelude.Maybe;
import frege.prelude.PreludeArrays;
import frege.prelude.PreludeBase;
import frege.prelude.PreludeIO;
import frege.prelude.PreludeList;
import frege.prelude.PreludeMonad;
import frege.prelude.PreludeText;
import frege.system.Random;
import net.tommay.sudoku.Creater;
import net.tommay.sudoku.Digit;
import net.tommay.sudoku.EasyPeasy;
import net.tommay.sudoku.ExclusionSet;
import net.tommay.sudoku.Layout;
import net.tommay.sudoku.Next;
import net.tommay.sudoku.Placement;
import net.tommay.sudoku.Puzzle;
import net.tommay.sudoku.Solution;
import net.tommay.sudoku.Solver;
import net.tommay.sudoku.SolverOptions;
import net.tommay.sudoku.SolverUtil;
import net.tommay.sudoku.Step;
import net.tommay.sudoku.TrickySet;
import net.tommay.sudoku.Unknown;

@SuppressWarnings("unused")
@Meta.FregePackage(
  source="net/tommay/sudoku/CreaterForJava.fr", time=1481937174497L, jmajor=1, jminor=7,
  imps={
    "net.tommay.sudoku.Creater", "net.tommay.sudoku.Layout", "frege.Prelude", "frege.prelude.PreludeArrays",
    "frege.prelude.PreludeBase", "frege.prelude.PreludeIO", "frege.prelude.PreludeList", "frege.prelude.PreludeMonad",
    "frege.prelude.PreludeText", "net.tommay.sudoku.Puzzle", "frege.system.Random", "frege.java.util.Regex",
    "net.tommay.sudoku.Solver", "net.tommay.sudoku.SolverOptions"
  },
  nmss={
    "Creater", "Layout", "Prelude", "PreludeArrays", "PreludeBase", "PreludeIO", "PreludeList",
    "PreludeMonad", "PreludeText", "Puzzle", "Random", "Regexp", "Solver", "SolverOptions"
  },
  symas={}, symcs={}, symis={}, symts={},
  symvs={
    @Meta.SymV(
      offset=455, name=@Meta.QName(pack="net.tommay.sudoku.CreaterForJava", base="create"), stri="s(us)",
      sig=2, depth=2, rkind=49
    )
  },
  symls={},
  taus={
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Int")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="StringJ")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Char")}),
    @Meta.Tau(kind=0, suba=1, subb=2),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="(,)")}),
    @Meta.Tau(kind=0, suba=4, subb=3), @Meta.Tau(kind=0, suba=5, subb=3)
  },
  rhos={
    @Meta.Rho(rhofun=false, rhotau=0), @Meta.Rho(rhofun=false, rhotau=3), @Meta.Rho(rhofun=false, rhotau=6),
    @Meta.Rho(sigma=1, rhotau=2), @Meta.Rho(sigma=0, rhotau=3)
  },
  sigmas={@Meta.Sigma(rho=0), @Meta.Sigma(rho=1), @Meta.Sigma(rho=4)}, exprs={@Meta.Expr()}
)
final public class CreaterForJava  {
  




final public static PreludeBase.TTuple2<String/*<Character>*/, String/*<Character>*/> create(
  final Lazy<Integer> arg$1, final String/*<Character>*/ arg$2
) {
  final Lazy<Long> rnd$10049 = Thunk.<Long>shared(new Lazy.D<Long>() {public Long call() {return Random.mkStdGen(arg$1);}});
  final PreludeBase.TMaybe<PreludeBase.TList<PreludeBase.TList<Integer>>> $10139 = Layout.getLayout(
        arg$2
      );
  final PreludeBase.TMaybe.DNothing<PreludeBase.TList<PreludeBase.TList<Integer>>> $10140 =
  $10139.asNothing();
  if ($10140 != null) {
    return PreludeBase.TTuple2.<String/*<Character>*/, String/*<Character>*/>mk(
              Thunk.<String/*<Character>*/>lazy(""), Thunk.<String/*<Character>*/>lazy("")
            );
  }
  final PreludeBase.TMaybe.DJust<PreludeBase.TList<PreludeBase.TList<Integer>>> $10141 =
  $10139.asJust();
  assert $10141 != null;
  final Func.U<Puzzle.TPuzzle, String/*<Character>*/> toString$10054 = new Func.U.D<Puzzle.TPuzzle, String/*<Character>*/>() {
    public Lazy<String/*<Character>*/> apply(final Lazy<Puzzle.TPuzzle> arg$10142) {
      return Thunk.<String/*<Character>*/>shared(
                new Lazy.D<String/*<Character>*/>() {
                  public String/*<Character>*/ call() {
                    return PreludeText.packed(Puzzle.toString(arg$10142));
                  }
                }
              );
    }
  };
  final Lazy<PreludeBase.TTuple2<Puzzle.TPuzzle, Puzzle.TPuzzle>> gen$682$10051 = Thunk.<
    PreludeBase.TTuple2<Puzzle.TPuzzle, Puzzle.TPuzzle>
  >shared(
        new Lazy.D<PreludeBase.TTuple2<Puzzle.TPuzzle, Puzzle.TPuzzle>>() {
          public PreludeBase.TTuple2<Puzzle.TPuzzle, Puzzle.TPuzzle> call() {
            return Creater.createWithSolution(
                      rnd$10049, $10141.mem1,
                      new Func.U.D<Puzzle.TPuzzle, PreludeBase.TList<Solution.TSolution>>() {
                        public Lazy<PreludeBase.TList<Solution.TSolution>> apply(final Lazy<Puzzle.TPuzzle> η$10144) {
                          return Thunk.<PreludeBase.TList<Solution.TSolution>>nested(
                                    new Lazy.D<Lazy<PreludeBase.TList<Solution.TSolution>>>() {
                                      public Lazy<PreludeBase.TList<Solution.TSolution>> call() {
                                        return Solver.solutions(SolverOptions.all, η$10144.call());
                                      }
                                    }
                                  );
                        }
                      }
                    );
          }
        }
      );
  final Lazy<Puzzle.TPuzzle> solution$10053 = Thunk.<Puzzle.TPuzzle>shared(
        new Lazy.D<Puzzle.TPuzzle>() {
          public Puzzle.TPuzzle call() {
            final PreludeBase.TTuple2<Puzzle.TPuzzle, Puzzle.TPuzzle> $10145 = gen$682$10051
            .call();
            final Puzzle.TPuzzle solution$10058 = $10145.mem2.call();
            return solution$10058;
          }
        }
      );
  final Lazy<Puzzle.TPuzzle> puzzle$10052 = Thunk.<Puzzle.TPuzzle>shared(
        new Lazy.D<Puzzle.TPuzzle>() {
          public Puzzle.TPuzzle call() {
            final PreludeBase.TTuple2<Puzzle.TPuzzle, Puzzle.TPuzzle> $10147 = gen$682$10051
            .call();
            final Puzzle.TPuzzle puzzle$10055 = $10147.mem1.call();
            return puzzle$10055;
          }
        }
      );
  return PreludeBase.TTuple2.<String/*<Character>*/, String/*<Character>*/>mk(
            Thunk.<String/*<Character>*/>nested(
                  new Lazy.D<Lazy<String/*<Character>*/>>() {
                    public Lazy<String/*<Character>*/> call() {
                      return toString$10054.apply(puzzle$10052);
                    }
                  }
                ),
            Thunk.<String/*<Character>*/>nested(
                  new Lazy.D<Lazy<String/*<Character>*/>>() {
                    public Lazy<String/*<Character>*/> call() {
                      return toString$10054.apply(solution$10053);
                    }
                  }
                )
          );
}

}
