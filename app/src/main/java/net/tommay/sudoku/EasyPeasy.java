/*
  Source code is in UTF-8 encoding. The following symbols may appear, among others:
  α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς σ τ υ φ χ ψ ω « • ¦ » ∀ ∃ ∷ … → ← ﬁ ﬂ ƒ
  If you can't read this, you're out of luck. This code was generated with the frege compiler version 3.24.141
  from ./net/tommay/sudoku/EasyPeasy.fr Do not edit this file! Instead, edit the source file and recompile.
*/

package net.tommay.sudoku;

import frege.run7.Func;
import frege.run7.Lazy;
import frege.run7.Thunk;
import frege.run.Kind;
import frege.run.RunTM;
import frege.runtime.Meta;
import frege.runtime.Phantom.RealWorld;
import frege.Prelude;
import frege.control.Category;
import frege.control.Semigroupoid;
import frege.data.Bits;
import frege.data.Char;
import frege.data.Foldable;
import frege.data.HashMap;
import frege.data.Iterators;
import frege.data.JSON;
import frege.data.List;
import frege.data.MicroParsec;
import frege.data.Monoid;
import frege.data.Traversable;
import frege.data.wrapper.Const;
import frege.data.wrapper.Dual;
import frege.data.wrapper.Endo;
import frege.data.wrapper.Identity;
import frege.data.wrapper.Num;
import frege.java.IO;
import frege.java.Lang;
import frege.java.Util;
import frege.java.util.Regex;
import frege.lib.PP;
import frege.prelude.Maybe;
import frege.prelude.PreludeArrays;
import frege.prelude.PreludeBase;
import frege.prelude.PreludeIO;
import frege.prelude.PreludeList;
import frege.prelude.PreludeMonad;
import frege.prelude.PreludeText;
import frege.system.Random;
import net.tommay.sudoku.Digit;
import net.tommay.sudoku.ExclusionSet;
import net.tommay.sudoku.Next;
import net.tommay.sudoku.Placement;
import net.tommay.sudoku.Puzzle;
import net.tommay.sudoku.SolverUtil;
import net.tommay.sudoku.Unknown;

@SuppressWarnings("unused")
@Meta.FregePackage(
  source="./net/tommay/sudoku/EasyPeasy.fr", time=1481937171580L, jmajor=1, jminor=7,
  imps={
    "net.tommay.sudoku.Digit", "net.tommay.sudoku.ExclusionSet", "frege.data.List", "net.tommay.sudoku.Next",
    "frege.Prelude", "frege.prelude.PreludeArrays", "frege.prelude.PreludeBase", "frege.prelude.PreludeIO",
    "frege.prelude.PreludeList", "frege.prelude.PreludeMonad", "frege.prelude.PreludeText", "net.tommay.sudoku.Puzzle",
    "frege.java.util.Regex", "net.tommay.sudoku.SolverUtil", "net.tommay.sudoku.Unknown", "net.tommay.sudoku.Util"
  },
  nmss={
    "Digit", "ExclusionSet", "List", "Next", "Prelude", "PreludeArrays", "PreludeBase", "PreludeIO",
    "PreludeList", "PreludeMonad", "PreludeText", "Puzzle", "Regexp", "SolverUtil", "Unknown",
    "Util"
  },
  symas={}, symcs={}, symis={}, symts={},
  symvs={
    @Meta.SymV(
      offset=1098, name=@Meta.QName(pack="net.tommay.sudoku.EasyPeasy", base="find"), stri="s(us)",
      sig=2, depth=2, rkind=49
    )
  },
  symls={},
  taus={
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="net.tommay.sudoku.Puzzle", base="Puzzle")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="[]")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="net.tommay.sudoku.Unknown", base="Unknown")}),
    @Meta.Tau(kind=0, suba=1, subb=2),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="net.tommay.sudoku.Next", base="Next")}),
    @Meta.Tau(kind=0, suba=1, subb=4)
  },
  rhos={
    @Meta.Rho(rhofun=false, rhotau=0), @Meta.Rho(rhofun=false, rhotau=3), @Meta.Rho(rhofun=false, rhotau=5),
    @Meta.Rho(sigma=1, rhotau=2), @Meta.Rho(sigma=0, rhotau=3)
  },
  sigmas={@Meta.Sigma(rho=0), @Meta.Sigma(rho=1), @Meta.Sigma(rho=4)}, exprs={@Meta.Expr()}
)
final public class EasyPeasy  {
  




final public static PreludeBase.TList<Next.TNext> placeDigitInSet(
  final PreludeBase.TList<Unknown.TUnknown> arg$1, final ExclusionSet.TExclusionSet arg$2, final int arg$3
) {
  final PreludeBase.TList<Unknown.TUnknown> $10206 = PreludeList.<Unknown.TUnknown>filter(
        new Func.U.D<Unknown.TUnknown, Boolean>() {
          public Lazy<Boolean> apply(final Lazy<Unknown.TUnknown> η$10205) {
            return Thunk.<Boolean>shared(
                      new Lazy.D<Boolean>() {
                        public Boolean call() {
                          return Unknown.isDigitPossible(arg$3, η$10205.call());
                        }
                      }
                    );
          }
        },
        SolverUtil.unknownsInSet(arg$1, ExclusionSet.TExclusionSet.cells(arg$2))
      );
  final PreludeBase.TList.DCons<Unknown.TUnknown> $10207 = $10206.asCons();
  if ($10207 != null) {
    final PreludeBase.TList<Unknown.TUnknown> $10208 = $10207.mem2.call();
    final PreludeBase.TList.DList<Unknown.TUnknown> $10209 = $10208.asList();
    if ($10209 != null) {
      return PreludeBase.TList.DCons.<Next.TNext>mk(
                Thunk.<Next.TNext>shared(
                      new Lazy.D<Next.TNext>() {
                        public Next.TNext call() {
                          return Next.$new(
                                    Thunk.<String/*<Character>*/>shared(
                                          new Lazy.D<String/*<Character>*/>() {
                                            public String/*<Character>*/ call() {
                                              return "Easy peasy " + ExclusionSet.TExclusionSet.name(
                                                        arg$2
                                                      );
                                            }
                                          }
                                        ),
                                    arg$3, Unknown.TUnknown.cellNumber($10207.mem1.call())
                                  );
                        }
                      }
                    ),
                PreludeBase.TList.DList.<Next.TNext>mk()
              );
    }
  }
  return PreludeBase.TList.DList.<Next.TNext>mk();
}
final public static PreludeBase.TList<
  PreludeBase.TTuple2<ExclusionSet.TExclusionSet, PreludeBase.TList<ExclusionSet.TExclusionSet>>
> makeEasyPeasyStripe(final PreludeBase.TList<ExclusionSet.TExclusionSet> arg$1) {
  return PreludeList.<
        PreludeBase.TTuple2<ExclusionSet.TExclusionSet, PreludeBase.TList<ExclusionSet.TExclusionSet>>,
        ExclusionSet.TExclusionSet
      >map(
            new Func.U.D<
              ExclusionSet.TExclusionSet,
              PreludeBase.TTuple2<ExclusionSet.TExclusionSet, PreludeBase.TList<ExclusionSet.TExclusionSet>>
            >() {
              public Lazy<PreludeBase.TTuple2<ExclusionSet.TExclusionSet, PreludeBase.TList<ExclusionSet.TExclusionSet>>> apply(
                final Lazy<ExclusionSet.TExclusionSet> arg$10210
              ) {
                return PreludeBase.TTuple2.<ExclusionSet.TExclusionSet, PreludeBase.TList<ExclusionSet.TExclusionSet>>mk(
                          arg$10210,
                          Thunk.<PreludeBase.TList<ExclusionSet.TExclusionSet>>shared(
                                new Lazy.D<PreludeBase.TList<ExclusionSet.TExclusionSet>>() {
                                  public PreludeBase.TList<ExclusionSet.TExclusionSet> call() {
                                    return List.<ExclusionSet.TExclusionSet, ExclusionSet.TExclusionSet>deleteBy(
                                              new Func.U.D<
                                                ExclusionSet.TExclusionSet, Func.U<ExclusionSet.TExclusionSet, Boolean>
                                              >() {
                                                public Lazy<Func.U<ExclusionSet.TExclusionSet, Boolean>> apply(
                                                  final Lazy<ExclusionSet.TExclusionSet> η$10211
                                                ) {
                                                  return new Func.U.D<ExclusionSet.TExclusionSet, Boolean>() {
                                                        public Lazy<Boolean> apply(
                                                          final Lazy<ExclusionSet.TExclusionSet> η$10212
                                                        ) {
                                                          return Thunk.<Boolean>shared(
                                                                    new Lazy.D<Boolean>() {
                                                                      public Boolean call() {
                                                                        return ExclusionSet.IEq_ExclusionSet.$eq$eq(
                                                                                  η$10211.call(), η$10212.call()
                                                                                );
                                                                      }
                                                                    }
                                                                  );
                                                        }
                                                      };
                                                }
                                              },
                                              arg$10210, arg$1
                                            );
                                  }
                                }
                              )
                        );
              }
            },
            arg$1
          );
}
final public static Lazy<PreludeBase.TList<
  PreludeBase.TTuple2<ExclusionSet.TExclusionSet, PreludeBase.TList<ExclusionSet.TExclusionSet>>
>> makeEasyPeasyStripes = Thunk.<
  PreludeBase.TList<PreludeBase.TTuple2<ExclusionSet.TExclusionSet, PreludeBase.TList<ExclusionSet.TExclusionSet>>>
>shared(
      new Lazy.D<PreludeBase.TList<
        PreludeBase.TTuple2<ExclusionSet.TExclusionSet, PreludeBase.TList<ExclusionSet.TExclusionSet>>
      >>() {
        public PreludeBase.TList<
          PreludeBase.TTuple2<ExclusionSet.TExclusionSet, PreludeBase.TList<ExclusionSet.TExclusionSet>>
        > call() {
          return PreludeList.IListMonoid_$lbrack$rbrack.<
                PreludeBase.TTuple2<ExclusionSet.TExclusionSet, PreludeBase.TList<ExclusionSet.TExclusionSet>>
              >concat(
                    PreludeList.<
                      PreludeBase.TList<
                        PreludeBase.TTuple2<ExclusionSet.TExclusionSet, PreludeBase.TList<ExclusionSet.TExclusionSet>>
                      >,
                      PreludeBase.TList<ExclusionSet.TExclusionSet>
                    >map(
                          new Func.U.D<
                            PreludeBase.TList<ExclusionSet.TExclusionSet>,
                            PreludeBase.TList<
                              PreludeBase.TTuple2<ExclusionSet.TExclusionSet, PreludeBase.TList<ExclusionSet.TExclusionSet>>
                            >
                          >() {
                            public Lazy<PreludeBase.TList<
                              PreludeBase.TTuple2<ExclusionSet.TExclusionSet, PreludeBase.TList<ExclusionSet.TExclusionSet>>
                            >> apply(final Lazy<PreludeBase.TList<ExclusionSet.TExclusionSet>> η$10213) {
                              return Thunk.<
                                    PreludeBase.TList<
                                      PreludeBase.TTuple2<
                                        ExclusionSet.TExclusionSet, PreludeBase.TList<ExclusionSet.TExclusionSet>
                                      >
                                    >
                                  >shared(
                                        new Lazy.D<PreludeBase.TList<
                                          PreludeBase.TTuple2<
                                            ExclusionSet.TExclusionSet, PreludeBase.TList<ExclusionSet.TExclusionSet>
                                          >
                                        >>() {
                                          public PreludeBase.TList<
                                            PreludeBase.TTuple2<
                                              ExclusionSet.TExclusionSet, PreludeBase.TList<ExclusionSet.TExclusionSet>
                                            >
                                          > call() {
                                            return EasyPeasy.makeEasyPeasyStripe(η$10213.call());
                                          }
                                        }
                                      );
                            }
                          },
                          net.tommay.sudoku.Util.<ExclusionSet.TExclusionSet>slices(
                                Thunk.<Integer>lazy(3),
                                PreludeList.IListMonoid_$lbrack$rbrack.<ExclusionSet.TExclusionSet>$plus$plus(
                                      ExclusionSet.rows.call(), ExclusionSet.columns
                                    )
                              )
                        )
                  );
        }
      }
    );
final public static PreludeBase.TList<Integer> getDigitsInSet(
  final Puzzle.TPuzzle arg$1, final ExclusionSet.TExclusionSet arg$2
) {
  return PreludeList.<Integer, PreludeBase.TTuple2<Integer, Integer>>map(
            new Func.U.D<PreludeBase.TTuple2<Integer, Integer>, Integer>() {
              public Lazy<Integer> apply(final Lazy<PreludeBase.TTuple2<Integer, Integer>> η$10214) {
                return Thunk.<Integer>shared(
                          new Lazy.D<Integer>() {
                            public Integer call() {
                              return PreludeBase.<Integer, Integer>snd(η$10214.call());
                            }
                          }
                        );
              }
            },
            PreludeList.<PreludeBase.TTuple2<Integer, Integer>>filter(
                  new Func.U.D<PreludeBase.TTuple2<Integer, Integer>, Boolean>() {
                    public Lazy<Boolean> apply(final Lazy<PreludeBase.TTuple2<Integer, Integer>> arg$10215) {
                      final PreludeBase.TTuple2<Integer, Integer> $10216 = arg$10215.call();
                      return Thunk.<Boolean>shared(
                                new Lazy.D<Boolean>() {
                                  public Boolean call() {
                                    return PreludeList.<Integer>elem(
                                              PreludeBase.IEq_Int.it, $10216.mem1, ExclusionSet.TExclusionSet.cells(arg$2)
                                            );
                                  }
                                }
                              );
                    }
                  },
                  Puzzle.each(arg$1)
                )
          );
}
final public static PreludeBase.TList<Next.TNext> findForEasyPeasyStripe(
  final Lazy<Puzzle.TPuzzle> arg$1, final PreludeBase.TList<Unknown.TUnknown> arg$2,
  final PreludeBase.TTuple2<ExclusionSet.TExclusionSet, PreludeBase.TList<ExclusionSet.TExclusionSet>> arg$3
) {
  final PreludeBase.TList<ExclusionSet.TExclusionSet> $10217 = arg$3.mem2.call();
  final PreludeBase.TList.DCons<ExclusionSet.TExclusionSet> $10218 = $10217.asCons();
  if ($10218 != null) {
    final PreludeBase.TList<ExclusionSet.TExclusionSet> $10219 = $10218.mem2.call();
    final PreludeBase.TList.DCons<ExclusionSet.TExclusionSet> $10220 = $10219.asCons();
    if ($10220 != null) {
      final PreludeBase.TList<ExclusionSet.TExclusionSet> $10221 = $10220.mem2.call();
      final PreludeBase.TList.DList<ExclusionSet.TExclusionSet> $10222 = $10221.asList();
      if ($10222 != null) {
        final ExclusionSet.TExclusionSet col0$9961 = arg$3.mem1.call();
        return PreludeList.IListMonoid_$lbrack$rbrack.<Next.TNext>concat(
                  PreludeList.<PreludeBase.TList<Next.TNext>, Integer>map(
                        new Func.U.D<Integer, PreludeBase.TList<Next.TNext>>() {
                          public Lazy<PreludeBase.TList<Next.TNext>> apply(final Lazy<Integer> η$10224) {
                            return Thunk.<PreludeBase.TList<Next.TNext>>shared(
                                      new Lazy.D<PreludeBase.TList<Next.TNext>>() {
                                        public PreludeBase.TList<Next.TNext> call() {
                                          return EasyPeasy.placeDigitInSet(arg$2, col0$9961, (int)η$10224.call());
                                        }
                                      }
                                    );
                          }
                        },
                        List.<Integer, Integer, PreludeBase.TList<?>>intersectBy(
                              PreludeList.IListSource_$lbrack$rbrack.<PreludeBase.TList<?>>mk(),
                              new Func.U.D<Integer, Func.U<Integer, Boolean>>() {
                                public Lazy<Func.U<Integer, Boolean>> apply(final Lazy<Integer> η$10225) {
                                  return new Func.U.D<Integer, Boolean>() {
                                        public Lazy<Boolean> apply(final Lazy<Integer> η$10226) {
                                          return Thunk.<Boolean>shared(
                                                    new Lazy.D<Boolean>() {
                                                      public Boolean call() {
                                                        return (int)η$10225.call() == (int)η$10226
                                                            .call();
                                                      }
                                                    }
                                                  );
                                        }
                                      };
                                }
                              },
                              Thunk.<Kind.U<PreludeBase.TList<?>, Integer>>shared(
                                    new Lazy.D<Kind.U<PreludeBase.TList<?>, Integer>>() {
                                      public Kind.U<PreludeBase.TList<?>, Integer> call() {
                                        return (Kind.U<PreludeBase.TList<?>, Integer>)Thunk.<
                                              PreludeBase.TList<Integer>
                                            >shared(
                                                  new Lazy.D<PreludeBase.TList<Integer>>() {
                                                    public PreludeBase.TList<Integer> call() {
                                                      return EasyPeasy.getDigitsInSet(
                                                                arg$1.call(), $10218.mem1.call()
                                                              );
                                                    }
                                                  }
                                                ).call();
                                      }
                                    }
                                  ),
                              Thunk.<PreludeBase.TList<Integer>>shared(
                                    new Lazy.D<PreludeBase.TList<Integer>>() {
                                      public PreludeBase.TList<Integer> call() {
                                        return EasyPeasy.getDigitsInSet(arg$1.call(), $10220.mem1.call());
                                      }
                                    }
                                  )
                            )
                      )
                );
      }
    }
  }
  throw new frege.runtime.NoMatch("findForEasyPeasyStripe", 38, arg$3);
}
final public static PreludeBase.TList<Next.TNext> find(
  final Lazy<Puzzle.TPuzzle> arg$1, final PreludeBase.TList<Unknown.TUnknown> arg$2
) {
  return PreludeList.IListMonoid_$lbrack$rbrack.<Next.TNext>concat(
            PreludeList.<
              PreludeBase.TList<Next.TNext>,
              PreludeBase.TTuple2<ExclusionSet.TExclusionSet, PreludeBase.TList<ExclusionSet.TExclusionSet>>
            >map(
                  new Func.U.D<
                    PreludeBase.TTuple2<ExclusionSet.TExclusionSet, PreludeBase.TList<ExclusionSet.TExclusionSet>>,
                    PreludeBase.TList<Next.TNext>
                  >() {
                    public Lazy<PreludeBase.TList<Next.TNext>> apply(
                      final Lazy<PreludeBase.TTuple2<
                        ExclusionSet.TExclusionSet, PreludeBase.TList<ExclusionSet.TExclusionSet>
                      >> η$10227
                    ) {
                      return Thunk.<PreludeBase.TList<Next.TNext>>shared(
                                new Lazy.D<PreludeBase.TList<Next.TNext>>() {
                                  public PreludeBase.TList<Next.TNext> call() {
                                    return EasyPeasy.findForEasyPeasyStripe(arg$1, arg$2, η$10227.call());
                                  }
                                }
                              );
                    }
                  },
                  EasyPeasy.makeEasyPeasyStripes.call()
                )
          );
}

}
