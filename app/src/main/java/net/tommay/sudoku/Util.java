/*
  Source code is in UTF-8 encoding. The following symbols may appear, among others:
  Œ± Œ≤ Œ≥ Œ¥ Œµ Œ∂ Œ∑ Œ∏ Œπ Œ∫ Œª Œº ŒΩ Œæ Œø œÄ œÅ œÇ œÉ œÑ œÖ œÜ œá œà œâ ¬´ ‚Ä¢ ¬¶ ¬ª ‚àÄ ‚àÉ ‚à∑ ‚Ä¶ ‚Üí ‚Üê Ô¨Å Ô¨Ç ∆í
  If you can't read this, you're out of luck. This code was generated with the frege compiler version 3.24.141
  from ./net/tommay/sudoku/Util.fr Do not edit this file! Instead, edit the source file and recompile.
*/

package net.tommay.sudoku;

import frege.run7.Func;
import frege.run7.Lazy;
import frege.run7.Thunk;
import frege.run.Kind;
import frege.run.RunTM;
import frege.runtime.Meta;
import frege.runtime.Phantom.RealWorld;
import frege.Prelude;
import frege.control.Category;
import frege.control.Semigroupoid;
import frege.data.Bits;
import frege.data.Monoid;
import frege.java.IO;
import frege.java.Lang;
import frege.java.util.Regex;
import frege.prelude.Maybe;
import frege.prelude.PreludeArrays;
import frege.prelude.PreludeBase;
import frege.prelude.PreludeIO;
import frege.prelude.PreludeList;
import frege.prelude.PreludeMonad;
import frege.prelude.PreludeText;
import frege.system.Random;

@SuppressWarnings("unused")
@Meta.FregePackage(
  source="./net/tommay/sudoku/Util.fr", time=1481937166629L, jmajor=1, jminor=7,
  imps={
    "frege.Prelude", "frege.prelude.PreludeArrays", "frege.prelude.PreludeBase", "frege.prelude.PreludeIO",
    "frege.prelude.PreludeList", "frege.prelude.PreludeMonad", "frege.prelude.PreludeText", "frege.system.Random",
    "frege.java.util.Regex"
  },
  nmss={
    "Prelude", "PreludeArrays", "PreludeBase", "PreludeIO", "PreludeList", "PreludeMonad", "PreludeText",
    "Random", "Regexp"
  },
  symas={}, symcs={}, symis={}, symts={},
  symvs={
    @Meta.SymV(
      offset=659, name=@Meta.QName(pack="net.tommay.sudoku.Util", base="slices"), stri="s(us)",
      sig=2, depth=2, rkind=177
    ),
    @Meta.SymV(
      offset=72, name=@Meta.QName(pack="net.tommay.sudoku.Util", base="shuffle"), stri="s(us)",
      sig=4, depth=2, rkind=177
    )
  },
  symls={},
  taus={
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Int")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="[]")}),
    @Meta.Tau(kind=9), @Meta.Tau(suba=2, tvar="a"), @Meta.Tau(kind=0, suba=1, subb=3),
    @Meta.Tau(kind=0, suba=1, subb=4),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.system.Random", base="StdGen")})
  },
  rhos={
    @Meta.Rho(rhofun=false, rhotau=0), @Meta.Rho(rhofun=false, rhotau=4), @Meta.Rho(rhofun=false, rhotau=5),
    @Meta.Rho(sigma=1, rhotau=2), @Meta.Rho(sigma=0, rhotau=3), @Meta.Rho(rhofun=false, rhotau=6),
    @Meta.Rho(sigma=1, rhotau=1), @Meta.Rho(sigma=3, rhotau=6)
  },
  sigmas={
    @Meta.Sigma(rho=0), @Meta.Sigma(rho=1), @Meta.Sigma(bound={"a"}, kinds={2}, rho=4), @Meta.Sigma(rho=5),
    @Meta.Sigma(bound={"a"}, kinds={2}, rho=7)
  },
  exprs={@Meta.Expr()}
)
final public class Util  {
  




final public static <ùìê> PreludeBase.TList<PreludeBase.TList<ùìê>> slices(
  final Lazy<Integer> arg$1, final PreludeBase.TList<ùìê> arg$2
) {
  final PreludeBase.TList.DList<ùìê> $8290 = arg$2.asList();
  if ($8290 != null) {
    return PreludeBase.TList.DList.<PreludeBase.TList<ùìê>>mk();
  }
  final Lazy<PreludeBase.TTuple2<PreludeBase.TList<ùìê>, PreludeBase.TList<ùìê>>> gen$734$8166 =
  Thunk.<PreludeBase.TTuple2<PreludeBase.TList<ùìê>, PreludeBase.TList<ùìê>>>shared(
        new Lazy.D<PreludeBase.TTuple2<PreludeBase.TList<ùìê>, PreludeBase.TList<ùìê>>>() {
          public PreludeBase.TTuple2<PreludeBase.TList<ùìê>, PreludeBase.TList<ùìê>> call() {
            return Thunk.<PreludeBase.TTuple2<Kind.U<PreludeBase.TList<?>, ùìê>, Kind.U<PreludeBase.TList<?>, ùìê>>>shared(
                      new Lazy.D<PreludeBase.TTuple2<Kind.U<PreludeBase.TList<?>, ùìê>, Kind.U<PreludeBase.TList<?>, ùìê>>>() {
                        public PreludeBase.TTuple2<Kind.U<PreludeBase.TList<?>, ùìê>, Kind.U<PreludeBase.TList<?>, ùìê>> call() {
                          return PreludeList.<ùìê, PreludeBase.TList<?>>splitAt(
                                    PreludeList.IListView_$lbrack$rbrack.<PreludeBase.TList<?>>mk(), arg$1,
                                    Thunk.<Kind.U<PreludeBase.TList<?>, ùìê>>lazy((Kind.U<PreludeBase.TList<?>, ùìê>)arg$2)
                                  );
                        }
                      }
                    ).call().<PreludeBase.TList<ùìê>, PreludeBase.TList<ùìê>>simsalabim();
          }
        }
      );
  final Lazy<PreludeBase.TList<ùìê>> rest$8168 = Thunk.<PreludeBase.TList<ùìê>>shared(
        new Lazy.D<PreludeBase.TList<ùìê>>() {
          public PreludeBase.TList<ùìê> call() {
            final PreludeBase.TTuple2<PreludeBase.TList<ùìê>, PreludeBase.TList<ùìê>> $8291 =
            gen$734$8166.call();
            final PreludeBase.TList<ùìê> rest$8172 = $8291.mem2.call();
            return rest$8172;
          }
        }
      );
  final Lazy<PreludeBase.TList<ùìê>> slice$8167 = Thunk.<PreludeBase.TList<ùìê>>shared(
        new Lazy.D<PreludeBase.TList<ùìê>>() {
          public PreludeBase.TList<ùìê> call() {
            final PreludeBase.TTuple2<PreludeBase.TList<ùìê>, PreludeBase.TList<ùìê>> $8293 =
            gen$734$8166.call();
            final PreludeBase.TList<ùìê> slice$8169 = $8293.mem1.call();
            return slice$8169;
          }
        }
      );
  return PreludeBase.TList.DCons.<PreludeBase.TList<ùìê>>mk(
            slice$8167,
            Thunk.<PreludeBase.TList<PreludeBase.TList<ùìê>>>shared(
                  new Lazy.D<PreludeBase.TList<PreludeBase.TList<ùìê>>>() {
                    public PreludeBase.TList<PreludeBase.TList<ùìê>> call() {
                      return Util.<ùìê>slices(arg$1, rest$8168.call());
                    }
                  }
                )
          );
}
final public static <ùìê> PreludeBase.TList<ùìê> shuffle(final Lazy<Long> arg$1, final PreludeBase.TList<ùìê> arg$2) {
  final PreludeBase.TList.DList<ùìê> $8295 = arg$2.asList();
  if ($8295 != null) {
    return PreludeBase.TList.DList.<ùìê>mk();
  }
  final Lazy<Integer> len$8140 = Thunk.<Integer>shared(
        new Lazy.D<Integer>() {
          public Integer call() {
            return PreludeList.IListView_$lbrack$rbrack.<ùìê>length(arg$2);
          }
        }
      );
  final Lazy<PreludeBase.TTuple2<Integer, Long>> gen$180$8141 = Thunk.<PreludeBase.TTuple2<Integer, Long>>shared(
        new Lazy.D<PreludeBase.TTuple2<Integer, Long>>() {
          public PreludeBase.TTuple2<Integer, Long> call() {
            return Random.IRandom_Int.<Long>randomR(
                      Random.IRandomGen_StdGen.it,
                      PreludeBase.TTuple2.<Integer, Integer>mk(
                            Thunk.<Integer>lazy(0),
                            Thunk.<Integer>shared(
                                  new Lazy.D<Integer>() {
                                    public Integer call() {
                                      return (int)len$8140.call() - 1;
                                    }
                                  }
                                )
                          ),
                      arg$1
                    );
          }
        }
      );
  final Lazy<Long> newRnd$8143 = Thunk.<Long>shared(
        new Lazy.D<Long>() {
          public Long call() {
            final PreludeBase.TTuple2<Integer, Long> $8296 = gen$180$8141.call();
            final long newRnd$8151 = (long)$8296.mem2.call();
            return newRnd$8151;
          }
        }
      );
  final Lazy<Integer> n$8142 = Thunk.<Integer>shared(
        new Lazy.D<Integer>() {
          public Integer call() {
            final PreludeBase.TTuple2<Integer, Long> $8298 = gen$180$8141.call();
            final int n$8148 = (int)$8298.mem1.call();
            return n$8148;
          }
        }
      );
  final Lazy<PreludeBase.TTuple2<PreludeBase.TList<ùìê>, PreludeBase.TList<ùìê>>> gen$236$8144 =
  Thunk.<PreludeBase.TTuple2<PreludeBase.TList<ùìê>, PreludeBase.TList<ùìê>>>shared(
        new Lazy.D<PreludeBase.TTuple2<PreludeBase.TList<ùìê>, PreludeBase.TList<ùìê>>>() {
          public PreludeBase.TTuple2<PreludeBase.TList<ùìê>, PreludeBase.TList<ùìê>> call() {
            return Thunk.<PreludeBase.TTuple2<Kind.U<PreludeBase.TList<?>, ùìê>, Kind.U<PreludeBase.TList<?>, ùìê>>>shared(
                      new Lazy.D<PreludeBase.TTuple2<Kind.U<PreludeBase.TList<?>, ùìê>, Kind.U<PreludeBase.TList<?>, ùìê>>>() {
                        public PreludeBase.TTuple2<Kind.U<PreludeBase.TList<?>, ùìê>, Kind.U<PreludeBase.TList<?>, ùìê>> call() {
                          return PreludeList.<ùìê, PreludeBase.TList<?>>splitAt(
                                    PreludeList.IListView_$lbrack$rbrack.<PreludeBase.TList<?>>mk(), n$8142,
                                    Thunk.<Kind.U<PreludeBase.TList<?>, ùìê>>lazy((Kind.U<PreludeBase.TList<?>, ùìê>)arg$2)
                                  );
                        }
                      }
                    ).call().<PreludeBase.TList<ùìê>, PreludeBase.TList<ùìê>>simsalabim();
          }
        }
      );
  final Lazy<PreludeBase.TList<ùìê>> rest$8147 = Thunk.<PreludeBase.TList<ùìê>>shared(
        new Lazy.D<PreludeBase.TList<ùìê>>() {
          public PreludeBase.TList<ùìê> call() {
            final PreludeBase.TTuple2<PreludeBase.TList<ùìê>, PreludeBase.TList<ùìê>> $8300 =
            gen$236$8144.call();
            final PreludeBase.TList<ùìê> $8301 = $8300.mem2.call();
            final PreludeBase.TList.DCons<ùìê> $8302 = $8301.asCons();
            if ($8302 != null) {
              final PreludeBase.TList<ùìê> rest$8160 = $8302.mem2.call();
              return rest$8160;
            }
            throw new frege.runtime.NoMatch("shuffle", 10, $8300);
          }
        }
      );
  final Lazy<ùìê> e$8146 = Thunk.<ùìê>shared(
        new Lazy.D<ùìê>() {
          public ùìê call() {
            final PreludeBase.TTuple2<PreludeBase.TList<ùìê>, PreludeBase.TList<ùìê>> $8304 =
            gen$236$8144.call();
            final PreludeBase.TList<ùìê> $8305 = $8304.mem2.call();
            final PreludeBase.TList.DCons<ùìê> $8306 = $8305.asCons();
            if ($8306 != null) {
              final ùìê e$8156 = $8306.mem1.call();
              return e$8156;
            }
            throw new frege.runtime.NoMatch("shuffle", 10, $8304);
          }
        }
      );
  final Lazy<PreludeBase.TList<ùìê>> first$8145 = Thunk.<PreludeBase.TList<ùìê>>shared(
        new Lazy.D<PreludeBase.TList<ùìê>>() {
          public PreludeBase.TList<ùìê> call() {
            final PreludeBase.TTuple2<PreludeBase.TList<ùìê>, PreludeBase.TList<ùìê>> $8308 =
            gen$236$8144.call();
            final PreludeBase.TList<ùìê> $8309 = $8308.mem2.call();
            final PreludeBase.TList.DCons<ùìê> $8310 = $8309.asCons();
            if ($8310 != null) {
              final PreludeBase.TList<ùìê> first$8152 = $8308.mem1.call();
              return first$8152;
            }
            throw new frege.runtime.NoMatch("shuffle", 10, $8308);
          }
        }
      );
  return PreludeBase.TList.DCons.<ùìê>mk(
            e$8146,
            Thunk.<PreludeBase.TList<ùìê>>shared(
                  new Lazy.D<PreludeBase.TList<ùìê>>() {
                    public PreludeBase.TList<ùìê> call() {
                      return Util.<ùìê>shuffle(
                                newRnd$8143, PreludeList.IListMonoid_$lbrack$rbrack.<ùìê>$plus$plus(first$8145.call(), rest$8147)
                              );
                    }
                  }
                )
          );
}

}
