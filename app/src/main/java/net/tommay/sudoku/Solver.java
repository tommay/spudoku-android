/*
  Source code is in UTF-8 encoding. The following symbols may appear, among others:
  α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς σ τ υ φ χ ψ ω « • ¦ » ∀ ∃ ∷ … → ← ﬁ ﬂ ƒ
  If you can't read this, you're out of luck. This code was generated with the frege compiler version 3.24.141
  from ./net/tommay/sudoku/Solver.fr Do not edit this file! Instead, edit the source file and recompile.
*/

package net.tommay.sudoku;

import frege.run7.Func;
import frege.run7.Lazy;
import frege.run7.Thunk;
import frege.run.Kind;
import frege.run.RunTM;
import frege.runtime.Meta;
import frege.runtime.Phantom.RealWorld;
import frege.Prelude;
import frege.control.Category;
import frege.control.Semigroupoid;
import frege.data.Bits;
import frege.data.Char;
import frege.data.Foldable;
import frege.data.HashMap;
import frege.data.Iterators;
import frege.data.JSON;
import frege.data.List;
import frege.data.MicroParsec;
import frege.data.Monoid;
import frege.data.Traversable;
import frege.data.wrapper.Const;
import frege.data.wrapper.Dual;
import frege.data.wrapper.Endo;
import frege.data.wrapper.Identity;
import frege.data.wrapper.Num;
import frege.java.IO;
import frege.java.Lang;
import frege.java.Util;
import frege.java.util.Regex;
import frege.lib.PP;
import frege.prelude.Maybe;
import frege.prelude.PreludeArrays;
import frege.prelude.PreludeBase;
import frege.prelude.PreludeIO;
import frege.prelude.PreludeList;
import frege.prelude.PreludeMonad;
import frege.prelude.PreludeText;
import frege.system.Random;
import net.tommay.sudoku.Digit;
import net.tommay.sudoku.EasyPeasy;
import net.tommay.sudoku.ExclusionSet;
import net.tommay.sudoku.Next;
import net.tommay.sudoku.Placement;
import net.tommay.sudoku.Puzzle;
import net.tommay.sudoku.Solution;
import net.tommay.sudoku.SolverOptions;
import net.tommay.sudoku.SolverUtil;
import net.tommay.sudoku.Step;
import net.tommay.sudoku.TrickySet;
import net.tommay.sudoku.Unknown;

@SuppressWarnings("unused")
@Meta.FregePackage(
  source="./net/tommay/sudoku/Solver.fr", time=1481937173057L, jmajor=1, jminor=7,
  imps={
    "net.tommay.sudoku.Digit", "net.tommay.sudoku.EasyPeasy", "net.tommay.sudoku.ExclusionSet",
    "net.tommay.sudoku.Next", "net.tommay.sudoku.Placement", "frege.Prelude", "frege.prelude.PreludeArrays",
    "frege.prelude.PreludeBase", "frege.prelude.PreludeIO", "frege.prelude.PreludeList", "frege.prelude.PreludeMonad",
    "frege.prelude.PreludeText", "net.tommay.sudoku.Puzzle", "frege.system.Random", "frege.java.util.Regex",
    "net.tommay.sudoku.Solution", "net.tommay.sudoku.SolverOptions", "net.tommay.sudoku.SolverUtil",
    "net.tommay.sudoku.Step", "net.tommay.sudoku.TrickySet", "net.tommay.sudoku.Unknown", "net.tommay.sudoku.Util"
  },
  nmss={
    "Digit", "EasyPeasy", "ExclusionSet", "Next", "Placement", "Prelude", "PreludeArrays", "PreludeBase",
    "PreludeIO", "PreludeList", "PreludeMonad", "PreludeText", "Puzzle", "Random", "Regexp",
    "Solution", "SolverOptions", "SolverUtil", "Step", "TrickySet", "Unknown", "Util"
  },
  symas={}, symcs={}, symis={},
  symts={
    @Meta.SymT(
      offset=785, name=@Meta.QName(kind=0, pack="net.tommay.sudoku.Solver", base="Solver"), typ=0,
      kind=11,
      cons={
        @Meta.SymD(
          offset=794, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.Solver", base="Solver", member="Solver"), cid=0,
          typ=6,
          fields={
            @Meta.Field(name="options", offset=805, sigma=1, strict=false),
            @Meta.Field(name="puzzle", offset=833, sigma=2, strict=false),
            @Meta.Field(name="rnd", offset=853, sigma=3, strict=false),
            @Meta.Field(name="unknowns", offset=883, sigma=4, strict=false),
            @Meta.Field(name="steps", offset=908, sigma=5, strict=false)
          },
          priv=true, publik=false
        )
      },
      lnks={},
      funs={
        @Meta.SymV(
          offset=884, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.Solver", base="Solver", member="upd$unknowns"),
          stri="s(su)", sig=7, depth=2, rkind=49, doc="update field @unknowns@"
        ),
        @Meta.SymV(
          offset=909, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.Solver", base="Solver", member="upd$steps"),
          stri="s(su)", sig=8, depth=2, rkind=49, doc="update field @steps@"
        ),
        @Meta.SymV(
          offset=834, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.Solver", base="Solver", member="upd$puzzle"),
          stri="s(su)", sig=9, depth=2, rkind=49, doc="update field @puzzle@"
        ),
        @Meta.SymV(
          offset=854, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.Solver", base="Solver", member="upd$rnd"),
          stri="s(su)", sig=10, depth=2, rkind=49, doc="update field @rnd@"
        ),
        @Meta.SymV(
          offset=884, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.Solver", base="Solver", member="unknowns"),
          stri="s(s)", sig=11, depth=1, rkind=49, doc="access field @unknowns@"
        ),
        @Meta.SymV(
          offset=909, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.Solver", base="Solver", member="steps"),
          stri="s(s)", sig=12, depth=1, rkind=49, doc="access field @steps@"
        ),
        @Meta.SymV(
          offset=834, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.Solver", base="Solver", member="puzzle"),
          stri="s(s)", sig=13, depth=1, rkind=49, doc="access field @puzzle@"
        ),
        @Meta.SymV(
          offset=854, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.Solver", base="Solver", member="rnd"),
          stri="s(s)", sig=14, depth=1, rkind=49, doc="access field @rnd@"
        ),
        @Meta.SymV(
          offset=806, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.Solver", base="Solver", member="upd$options"),
          stri="s(su)", sig=15, depth=2, rkind=49, doc="update field @options@"
        ),
        @Meta.SymV(
          offset=884, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.Solver", base="Solver", member="has$unknowns"),
          stri="s(u)", sig=17, depth=1, rkind=49, doc="check if constructor has field @unknowns@"
        ),
        @Meta.SymV(
          offset=909, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.Solver", base="Solver", member="has$steps"),
          stri="s(u)", sig=17, depth=1, rkind=49, doc="check if constructor has field @steps@"
        ),
        @Meta.SymV(
          offset=834, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.Solver", base="Solver", member="has$puzzle"),
          stri="s(u)", sig=17, depth=1, rkind=49, doc="check if constructor has field @puzzle@"
        ),
        @Meta.SymV(
          offset=854, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.Solver", base="Solver", member="has$rnd"),
          stri="s(u)", sig=17, depth=1, rkind=49, doc="check if constructor has field @rnd@"
        ),
        @Meta.SymV(
          offset=884, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.Solver", base="Solver", member="chg$unknowns"),
          stri="s(ss)", sig=19, depth=2, rkind=49, doc="change field @unknowns@"
        ),
        @Meta.SymV(
          offset=854, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.Solver", base="Solver", member="chg$rnd"),
          stri="s(ss)", sig=21, depth=2, rkind=49, doc="change field @rnd@"
        ),
        @Meta.SymV(
          offset=909, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.Solver", base="Solver", member="chg$steps"),
          stri="s(ss)", sig=23, depth=2, rkind=49, doc="change field @steps@"
        ),
        @Meta.SymV(
          offset=806, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.Solver", base="Solver", member="chg$options"),
          stri="s(ss)", sig=25, depth=2, rkind=49, doc="change field @options@"
        ),
        @Meta.SymV(
          offset=834, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.Solver", base="Solver", member="chg$puzzle"),
          stri="s(ss)", sig=27, depth=2, rkind=49, doc="change field @puzzle@"
        ),
        @Meta.SymV(
          offset=806, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.Solver", base="Solver", member="has$options"),
          stri="s(u)", sig=17, depth=1, rkind=49, doc="check if constructor has field @options@"
        ),
        @Meta.SymV(
          offset=806, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.Solver", base="Solver", member="options"),
          stri="s(s)", sig=28, depth=1, rkind=49, doc="access field @options@"
        )
      },
      prod=true
    )
  },
  symvs={
    @Meta.SymV(
      offset=2307, name=@Meta.QName(pack="net.tommay.sudoku.Solver", base="solutions"), stri="s(us)",
      sig=29, depth=2, rkind=48
    ),
    @Meta.SymV(
      offset=2460, name=@Meta.QName(pack="net.tommay.sudoku.Solver", base="randomSolutions"), stri="s(uus)",
      sig=31, depth=3, rkind=48
    ),
    @Meta.SymV(
      offset=14925, name=@Meta.QName(pack="net.tommay.sudoku.Solver", base="isSolvableWith"), stri="s(us)",
      sig=32, depth=2, rkind=49
    ),
    @Meta.SymV(
      offset=2716, name=@Meta.QName(pack="net.tommay.sudoku.Solver", base="allRandomSolutions"), stri="s(us)",
      sig=33, depth=2, rkind=49
    )
  },
  symls={},
  taus={
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="net.tommay.sudoku.Solver", base="Solver")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="net.tommay.sudoku.SolverOptions", base="SolverOptions")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="net.tommay.sudoku.Puzzle", base="Puzzle")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Maybe")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.system.Random", base="StdGen")}),
    @Meta.Tau(kind=0, suba=3, subb=4),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="[]")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="net.tommay.sudoku.Unknown", base="Unknown")}),
    @Meta.Tau(kind=0, suba=6, subb=7),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="net.tommay.sudoku.Step", base="Step")}),
    @Meta.Tau(kind=0, suba=6, subb=9), @Meta.Tau(kind=9), @Meta.Tau(suba=11, tvar="α"),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Bool")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="->")}),
    @Meta.Tau(kind=0, suba=14, subb=8), @Meta.Tau(kind=0, suba=15, subb=8), @Meta.Tau(kind=0, suba=14, subb=5),
    @Meta.Tau(kind=0, suba=17, subb=5), @Meta.Tau(kind=0, suba=14, subb=10), @Meta.Tau(kind=0, suba=19, subb=10),
    @Meta.Tau(kind=0, suba=14, subb=1), @Meta.Tau(kind=0, suba=21, subb=1), @Meta.Tau(kind=0, suba=14, subb=2),
    @Meta.Tau(kind=0, suba=23, subb=2),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="net.tommay.sudoku.Solution", base="Solution")}),
    @Meta.Tau(kind=0, suba=6, subb=25)
  },
  rhos={
    @Meta.Rho(rhofun=false, rhotau=0), @Meta.Rho(rhofun=false, rhotau=1), @Meta.Rho(rhofun=false, rhotau=2),
    @Meta.Rho(rhofun=false, rhotau=5), @Meta.Rho(rhofun=false, rhotau=8), @Meta.Rho(rhofun=false, rhotau=10),
    @Meta.Rho(sigma=5, rhotau=0), @Meta.Rho(sigma=4, rhotau=6), @Meta.Rho(sigma=3, rhotau=7),
    @Meta.Rho(sigma=2, rhotau=8), @Meta.Rho(sigma=1, rhotau=9), @Meta.Rho(sigma=4, rhotau=0),
    @Meta.Rho(sigma=0, rhotau=11), @Meta.Rho(sigma=0, rhotau=6), @Meta.Rho(sigma=2, rhotau=0),
    @Meta.Rho(sigma=0, rhotau=14), @Meta.Rho(sigma=3, rhotau=0), @Meta.Rho(sigma=0, rhotau=16),
    @Meta.Rho(sigma=0, rhotau=4), @Meta.Rho(sigma=0, rhotau=5), @Meta.Rho(sigma=0, rhotau=2),
    @Meta.Rho(sigma=0, rhotau=3), @Meta.Rho(sigma=1, rhotau=0), @Meta.Rho(sigma=0, rhotau=22),
    @Meta.Rho(rhofun=false, rhotau=12), @Meta.Rho(rhofun=false, rhotau=13), @Meta.Rho(sigma=16, rhotau=25),
    @Meta.Rho(rhofun=false, rhotau=16), @Meta.Rho(sigma=18, rhotau=0), @Meta.Rho(sigma=0, rhotau=28),
    @Meta.Rho(rhofun=false, rhotau=18), @Meta.Rho(sigma=20, rhotau=0), @Meta.Rho(sigma=0, rhotau=31),
    @Meta.Rho(rhofun=false, rhotau=20), @Meta.Rho(sigma=22, rhotau=0), @Meta.Rho(sigma=0, rhotau=34),
    @Meta.Rho(rhofun=false, rhotau=22), @Meta.Rho(sigma=24, rhotau=0), @Meta.Rho(sigma=0, rhotau=37),
    @Meta.Rho(rhofun=false, rhotau=24), @Meta.Rho(sigma=26, rhotau=0), @Meta.Rho(sigma=0, rhotau=40),
    @Meta.Rho(sigma=0, rhotau=1), @Meta.Rho(rhofun=false, rhotau=26), @Meta.Rho(sigma=2, rhotau=43),
    @Meta.Rho(sigma=1, rhotau=44), @Meta.Rho(rhofun=false, rhotau=4), @Meta.Rho(sigma=30, rhotau=44),
    @Meta.Rho(sigma=1, rhotau=47), @Meta.Rho(sigma=2, rhotau=25), @Meta.Rho(sigma=1, rhotau=49)
  },
  sigmas={
    @Meta.Sigma(rho=0), @Meta.Sigma(rho=1), @Meta.Sigma(rho=2), @Meta.Sigma(rho=3), @Meta.Sigma(rho=4),
    @Meta.Sigma(rho=5), @Meta.Sigma(rho=10), @Meta.Sigma(rho=12), @Meta.Sigma(rho=13), @Meta.Sigma(rho=15),
    @Meta.Sigma(rho=17), @Meta.Sigma(rho=18), @Meta.Sigma(rho=19), @Meta.Sigma(rho=20), @Meta.Sigma(rho=21),
    @Meta.Sigma(rho=23), @Meta.Sigma(rho=24), @Meta.Sigma(bound={"α"}, kinds={11}, rho=26), @Meta.Sigma(rho=27),
    @Meta.Sigma(rho=29), @Meta.Sigma(rho=30), @Meta.Sigma(rho=32), @Meta.Sigma(rho=33), @Meta.Sigma(rho=35),
    @Meta.Sigma(rho=36), @Meta.Sigma(rho=38), @Meta.Sigma(rho=39), @Meta.Sigma(rho=41), @Meta.Sigma(rho=42),
    @Meta.Sigma(rho=45), @Meta.Sigma(rho=46), @Meta.Sigma(rho=48), @Meta.Sigma(rho=50), @Meta.Sigma(rho=47)
  },
  exprs={@Meta.Expr()}
)
final public class Solver  {
  



final public static class TSolver implements frege.runtime.Value, Lazy<TSolver> {
  private TSolver(
    final Lazy<SolverOptions.TSolverOptions> arg$1, final Lazy<Puzzle.TPuzzle> arg$2,
    final Lazy<PreludeBase.TMaybe<Long>> arg$3, final Lazy<PreludeBase.TList<Unknown.TUnknown>> arg$4,
    final Lazy<PreludeBase.TList<Step.TStep>> arg$5
  ) {
    mem$options = Thunk.<SolverOptions.TSolverOptions>shared(arg$1);
    mem$puzzle = Thunk.<Puzzle.TPuzzle>shared(arg$2);
    mem$rnd = Thunk.<PreludeBase.TMaybe<Long>>shared(arg$3);
    mem$unknowns = Thunk.<PreludeBase.TList<Unknown.TUnknown>>shared(arg$4);
    mem$steps = Thunk.<PreludeBase.TList<Step.TStep>>shared(arg$5);
  }
  final public int constructor() {
    return 0;
  }
  final public static TSolver mk(
    final Lazy<SolverOptions.TSolverOptions> arg$1, final Lazy<Puzzle.TPuzzle> arg$2,
    final Lazy<PreludeBase.TMaybe<Long>> arg$3, final Lazy<PreludeBase.TList<Unknown.TUnknown>> arg$4,
    final Lazy<PreludeBase.TList<Step.TStep>> arg$5
  ) {
    return new TSolver(arg$1, arg$2, arg$3, arg$4, arg$5);
  }
  final public Lazy<SolverOptions.TSolverOptions> mem$options  ;
  final public Lazy<Puzzle.TPuzzle> mem$puzzle  ;
  final public Lazy<PreludeBase.TMaybe<Long>> mem$rnd  ;
  final public Lazy<PreludeBase.TList<Unknown.TUnknown>> mem$unknowns  ;
  final public Lazy<PreludeBase.TList<Step.TStep>> mem$steps  ;
  final public TSolver call() {
    return this;
  }
  final public boolean isShared() {
    return true;
  }
  final public Thunk<TSolver> asThunk() {
    return null;
  }
  @SuppressWarnings("unchecked") final public TSolver simsalabim() {
    return (TSolver)this;
  }
  final public static TSolver upd$unknowns(final TSolver arg$1, final Lazy<PreludeBase.TList<Unknown.TUnknown>> arg$2) {
    return TSolver.mk(arg$1.mem$options, arg$1.mem$puzzle, arg$1.mem$rnd, arg$2, arg$1.mem$steps);
  }
  final public static TSolver upd$steps(final TSolver arg$1, final Lazy<PreludeBase.TList<Step.TStep>> arg$2) {
    return TSolver.mk(arg$1.mem$options, arg$1.mem$puzzle, arg$1.mem$rnd, arg$1.mem$unknowns, arg$2);
  }
  final public static TSolver upd$puzzle(final TSolver arg$1, final Lazy<Puzzle.TPuzzle> arg$2) {
    return TSolver.mk(arg$1.mem$options, arg$2, arg$1.mem$rnd, arg$1.mem$unknowns, arg$1.mem$steps);
  }
  final public static TSolver upd$rnd(final TSolver arg$1, final Lazy<PreludeBase.TMaybe<Long>> arg$2) {
    return TSolver.mk(arg$1.mem$options, arg$1.mem$puzzle, arg$2, arg$1.mem$unknowns, arg$1.mem$steps);
  }
  final public static PreludeBase.TList<Unknown.TUnknown> unknowns(final TSolver arg$1) {
    final PreludeBase.TList<Unknown.TUnknown> a4$10192 = arg$1.mem$unknowns.call();
    return a4$10192;
  }
  final public static PreludeBase.TList<Step.TStep> steps(final TSolver arg$1) {
    final PreludeBase.TList<Step.TStep> a5$10172 = arg$1.mem$steps.call();
    return a5$10172;
  }
  final public static Puzzle.TPuzzle puzzle(final TSolver arg$1) {
    final Puzzle.TPuzzle a2$10127 = arg$1.mem$puzzle.call();
    return a2$10127;
  }
  final public static PreludeBase.TMaybe<Long> rnd(final TSolver arg$1) {
    final PreludeBase.TMaybe<Long> a3$10149 = arg$1.mem$rnd.call();
    return a3$10149;
  }
  final public static TSolver upd$options(final TSolver arg$1, final Lazy<SolverOptions.TSolverOptions> arg$2) {
    return TSolver.mk(arg$2, arg$1.mem$puzzle, arg$1.mem$rnd, arg$1.mem$unknowns, arg$1.mem$steps);
  }
  final public static <α> boolean has$unknowns(final Lazy<α> arg$1) {
    return true;
  }
  final public static <α> boolean has$steps(final Lazy<α> arg$1) {
    return true;
  }
  final public static <α> boolean has$puzzle(final Lazy<α> arg$1) {
    return true;
  }
  final public static <α> boolean has$rnd(final Lazy<α> arg$1) {
    return true;
  }
  final public static TSolver chg$unknowns(
    final TSolver arg$1, final Func.U<PreludeBase.TList<Unknown.TUnknown>, PreludeBase.TList<Unknown.TUnknown>> arg$2
  ) {
    return TSolver.mk(
              arg$1.mem$options, arg$1.mem$puzzle, arg$1.mem$rnd,
              Thunk.<PreludeBase.TList<Unknown.TUnknown>>nested(
                    new Lazy.D<Lazy<PreludeBase.TList<Unknown.TUnknown>>>() {
                      public Lazy<PreludeBase.TList<Unknown.TUnknown>> call() {
                        return arg$2.apply(arg$1.mem$unknowns);
                      }
                    }
                  ),
              arg$1.mem$steps
            );
  }
  final public static TSolver chg$rnd(
    final TSolver arg$1, final Func.U<PreludeBase.TMaybe<Long>, PreludeBase.TMaybe<Long>> arg$2
  ) {
    return TSolver.mk(
              arg$1.mem$options, arg$1.mem$puzzle,
              Thunk.<PreludeBase.TMaybe<Long>>nested(
                    new Lazy.D<Lazy<PreludeBase.TMaybe<Long>>>() {
                      public Lazy<PreludeBase.TMaybe<Long>> call() {
                        return arg$2.apply(arg$1.mem$rnd);
                      }
                    }
                  ),
              arg$1.mem$unknowns, arg$1.mem$steps
            );
  }
  final public static TSolver chg$steps(
    final TSolver arg$1, final Func.U<PreludeBase.TList<Step.TStep>, PreludeBase.TList<Step.TStep>> arg$2
  ) {
    return TSolver.mk(
              arg$1.mem$options, arg$1.mem$puzzle, arg$1.mem$rnd, arg$1.mem$unknowns,
              Thunk.<PreludeBase.TList<Step.TStep>>nested(
                    new Lazy.D<Lazy<PreludeBase.TList<Step.TStep>>>() {
                      public Lazy<PreludeBase.TList<Step.TStep>> call() {
                        return arg$2.apply(arg$1.mem$steps);
                      }
                    }
                  )
            );
  }
  final public static TSolver chg$options(
    final TSolver arg$1, final Func.U<SolverOptions.TSolverOptions, SolverOptions.TSolverOptions> arg$2
  ) {
    return TSolver.mk(
              Thunk.<SolverOptions.TSolverOptions>nested(
                    new Lazy.D<Lazy<SolverOptions.TSolverOptions>>() {
                      public Lazy<SolverOptions.TSolverOptions> call() {
                        return arg$2.apply(arg$1.mem$options);
                      }
                    }
                  ),
              arg$1.mem$puzzle, arg$1.mem$rnd, arg$1.mem$unknowns, arg$1.mem$steps
            );
  }
  final public static TSolver chg$puzzle(final TSolver arg$1, final Func.U<Puzzle.TPuzzle, Puzzle.TPuzzle> arg$2) {
    return TSolver.mk(
              arg$1.mem$options,
              Thunk.<Puzzle.TPuzzle>nested(
                    new Lazy.D<Lazy<Puzzle.TPuzzle>>() {
                      public Lazy<Puzzle.TPuzzle> call() {
                        return arg$2.apply(arg$1.mem$puzzle);
                      }
                    }
                  ),
              arg$1.mem$rnd, arg$1.mem$unknowns, arg$1.mem$steps
            );
  }
  final public static <α> boolean has$options(final Lazy<α> arg$1) {
    return true;
  }
  final public static SolverOptions.TSolverOptions options(final TSolver arg$1) {
    final SolverOptions.TSolverOptions a1$10105 = arg$1.mem$options.call();
    return a1$10105;
  }
}
final public static TSolver place(final TSolver arg$1, final Lazy<Integer> arg$2, final Lazy<Integer> arg$3) {
  return TSolver.upd$unknowns(
            TSolver.upd$puzzle(
                  arg$1,
                  Thunk.<Puzzle.TPuzzle>shared(
                        new Lazy.D<Puzzle.TPuzzle>() {
                          public Puzzle.TPuzzle call() {
                            return Puzzle.place(TSolver.puzzle(arg$1), arg$2, arg$3);
                          }
                        }
                      )
                ),
            Thunk.<PreludeBase.TList<Unknown.TUnknown>>shared(
                  new Lazy.D<PreludeBase.TList<Unknown.TUnknown>>() {
                    public PreludeBase.TList<Unknown.TUnknown> call() {
                      return PreludeList.<Unknown.TUnknown, Unknown.TUnknown>map(
                                new Func.U.D<Unknown.TUnknown, Unknown.TUnknown>() {
                                  public Lazy<Unknown.TUnknown> apply(final Lazy<Unknown.TUnknown> η$11889) {
                                    return Thunk.<Unknown.TUnknown>shared(
                                              new Lazy.D<Unknown.TUnknown>() {
                                                public Unknown.TUnknown call() {
                                                  return Unknown.place(arg$2, (int)arg$3.call(), η$11889.call());
                                                }
                                              }
                                            );
                                  }
                                },
                                PreludeList.<Unknown.TUnknown>filter(
                                      new Func.U.D<Unknown.TUnknown, Boolean>() {
                                        public Lazy<Boolean> apply(final Lazy<Unknown.TUnknown> arg$11890) {
                                          return PreludeBase.<Boolean, Integer, Integer>flip(
                                                    new Func.U.D<Integer, Func.U<Integer, Boolean>>() {
                                                      public Lazy<Func.U<Integer, Boolean>> apply(
                                                        final Lazy<Integer> η$11891
                                                      ) {
                                                        return new Func.U.D<Integer, Boolean>() {
                                                              public Lazy<Boolean> apply(
                                                                final Lazy<Integer> η$11892
                                                              ) {
                                                                return Thunk.<Boolean>shared(
                                                                          new Lazy.D<Boolean>() {
                                                                            public Boolean call() {
                                                                              return (int)η$11891
                                                                                  .call() != (int)η$11892
                                                                                  .call();
                                                                            }
                                                                          }
                                                                        );
                                                              }
                                                            };
                                                      }
                                                    },
                                                    arg$2,
                                                    Thunk.<Integer>shared(
                                                          new Lazy.D<Integer>() {
                                                            public Integer call() {
                                                              return Unknown.TUnknown.cellNumber(
                                                                        arg$11890.call()
                                                                      );
                                                            }
                                                          }
                                                        )
                                                  );
                                        }
                                      },
                                      TSolver.unknowns(arg$1)
                                    )
                              );
                    }
                  }
                )
          );
}
final public static boolean notIsDigitPossibleInSet(
  final PreludeBase.TList<Unknown.TUnknown> arg$1, final int arg$2, final PreludeBase.TList<Integer> arg$3
) {
  final PreludeBase.TList<Unknown.TUnknown> $11895 = PreludeList.<Unknown.TUnknown>filter(
        new Func.U.D<Unknown.TUnknown, Boolean>() {
          public Lazy<Boolean> apply(final Lazy<Unknown.TUnknown> η$11893) {
            return Thunk.<Boolean>shared(
                      new Lazy.D<Boolean>() {
                        public Boolean call() {
                          return Unknown.isDigitPossible(arg$2, η$11893.call());
                        }
                      }
                    );
          }
        },
        PreludeList.<Unknown.TUnknown>filter(
              new Func.U.D<Unknown.TUnknown, Boolean>() {
                public Lazy<Boolean> apply(final Lazy<Unknown.TUnknown> η$11894) {
                  return Thunk.<Boolean>shared(
                            new Lazy.D<Boolean>() {
                              public Boolean call() {
                                return SolverUtil.isUnknownInSet(arg$3, η$11894);
                              }
                            }
                          );
                }
              },
              arg$1
            )
      );
  final PreludeBase.TList.DList<Unknown.TUnknown> $11896 = $11895.asList();
  if ($11896 != null) {
    return true;
  }
  return false;
}
final public static <𝓐, 𝓑> 𝓐 minBy(
  final PreludeBase.COrd<𝓑> ctx$1, final Func.U<𝓐, 𝓑> arg$1, final PreludeBase.TList<𝓐> arg$2
) {
  return PreludeBase.<𝓐, 𝓑>snd(
            PreludeList.<PreludeBase.TTuple2<𝓑, 𝓐>>foldl1(
                  new Func.U.D<
                    PreludeBase.TTuple2<𝓑, 𝓐>, Func.U<PreludeBase.TTuple2<𝓑, 𝓐>, PreludeBase.TTuple2<𝓑, 𝓐>>
                  >() {
                    public Lazy<Func.U<PreludeBase.TTuple2<𝓑, 𝓐>, PreludeBase.TTuple2<𝓑, 𝓐>>> apply(
                      final Lazy<PreludeBase.TTuple2<𝓑, 𝓐>> arg$11897
                    ) {
                      final PreludeBase.TTuple2<𝓑, 𝓐> a$10416 = arg$11897.call();
                      return new Func.U.D<PreludeBase.TTuple2<𝓑, 𝓐>, PreludeBase.TTuple2<𝓑, 𝓐>>() {
                            public Lazy<PreludeBase.TTuple2<𝓑, 𝓐>> apply(final Lazy<PreludeBase.TTuple2<𝓑, 𝓐>> arg$11899) {
                              final PreludeBase.TTuple2<𝓑, 𝓐> b$10419 = arg$11899.call();
                              if (ctx$1.ƒ$lt(a$10416.mem1, b$10419.mem1)) {
                                return a$10416;
                              }
                              else {
                                return b$10419;
                              }
                            }
                          };
                    }
                  },
                  PreludeList.<PreludeBase.TTuple2<𝓑, 𝓐>, 𝓐>map(
                        new Func.U.D<𝓐, PreludeBase.TTuple2<𝓑, 𝓐>>() {
                          public Lazy<PreludeBase.TTuple2<𝓑, 𝓐>> apply(final Lazy<𝓐> arg$11901) {
                            return PreludeBase.TTuple2.<𝓑, 𝓐>mk(
                                      Thunk.<𝓑>nested(
                                            new Lazy.D<Lazy<𝓑>>() {
                                              public Lazy<𝓑> call() {
                                                return arg$1.apply(arg$11901);
                                              }
                                            }
                                          ),
                                      arg$11901
                                    );
                          }
                        },
                        arg$2
                      )
                )
          );
}
final public static PreludeBase.TTuple2<PreludeBase.TMaybe<Long>, PreludeBase.TMaybe<Long>> maybeSplit(
  final PreludeBase.TMaybe<Long> arg$1
) {
  final PreludeBase.TMaybe.DNothing<Long> $11902 = arg$1.asNothing();
  if ($11902 != null) {
    return PreludeBase.TTuple2.<PreludeBase.TMaybe<Long>, PreludeBase.TMaybe<Long>>mk(
              PreludeBase.TMaybe.DNothing.<Long>mk(), PreludeBase.TMaybe.DNothing.<Long>mk()
            );
  }
  final PreludeBase.TMaybe.DJust<Long> $11903 = arg$1.asJust();
  assert $11903 != null;
  final Lazy<PreludeBase.TTuple2<Long, Long>> gen$15766$10424 = Thunk.<PreludeBase.TTuple2<Long, Long>>shared(
        new Lazy.D<PreludeBase.TTuple2<Long, Long>>() {
          public PreludeBase.TTuple2<Long, Long> call() {
            return Random.IRandomGen_StdGen.split($11903.mem1);
          }
        }
      );
  final Lazy<Long> rnd2$10426 = Thunk.<Long>shared(
        new Lazy.D<Long>() {
          public Long call() {
            final PreludeBase.TTuple2<Long, Long> $11904 = gen$15766$10424.call();
            final long rnd2$10430 = (long)$11904.mem2.call();
            return rnd2$10430;
          }
        }
      );
  final Lazy<Long> rnd1$10425 = Thunk.<Long>shared(
        new Lazy.D<Long>() {
          public Long call() {
            final PreludeBase.TTuple2<Long, Long> $11906 = gen$15766$10424.call();
            final long rnd1$10427 = (long)$11906.mem1.call();
            return rnd1$10427;
          }
        }
      );
  return PreludeBase.TTuple2.<PreludeBase.TMaybe<Long>, PreludeBase.TMaybe<Long>>mk(
            PreludeBase.TMaybe.DJust.<Long>mk(rnd1$10425), PreludeBase.TMaybe.DJust.<Long>mk(rnd2$10426)
          );
}
final public static <𝓐> PreludeBase.TList<𝓐> maybeShuffle(
  final PreludeBase.TMaybe<Long> arg$1, final PreludeBase.TList<𝓐> arg$2
) {
  final PreludeBase.TMaybe.DJust<Long> $11908 = arg$1.asJust();
  if ($11908 != null) {
    return net.tommay.sudoku.Util.<𝓐>shuffle($11908.mem1, arg$2);
  }
  final PreludeBase.TMaybe.DNothing<Long> $11909 = arg$1.asNothing();
  assert $11909 != null;
  return arg$2;
}
final public static TSolver $new(
  final Lazy<SolverOptions.TSolverOptions> arg$1, final Lazy<PreludeBase.TMaybe<Long>> arg$2, final Puzzle.TPuzzle arg$3
) {
  final Lazy<PreludeBase.TTuple2<PreludeBase.TMaybe<Long>, PreludeBase.TMaybe<Long>>> gen$1049$10212 =
  Thunk.<PreludeBase.TTuple2<PreludeBase.TMaybe<Long>, PreludeBase.TMaybe<Long>>>shared(
        new Lazy.D<PreludeBase.TTuple2<PreludeBase.TMaybe<Long>, PreludeBase.TMaybe<Long>>>() {
          public PreludeBase.TTuple2<PreludeBase.TMaybe<Long>, PreludeBase.TMaybe<Long>> call() {
            return Solver.maybeSplit(arg$2.call());
          }
        }
      );
  final Lazy<PreludeBase.TMaybe<Long>> rnd2$10214 = Thunk.<PreludeBase.TMaybe<Long>>shared(
        new Lazy.D<PreludeBase.TMaybe<Long>>() {
          public PreludeBase.TMaybe<Long> call() {
            final PreludeBase.TTuple2<PreludeBase.TMaybe<Long>, PreludeBase.TMaybe<Long>> $11910 =
            gen$1049$10212.call();
            final PreludeBase.TMaybe<Long> rnd2$10219 = $11910.mem2.call();
            return rnd2$10219;
          }
        }
      );
  final Lazy<PreludeBase.TMaybe<Long>> rnd1$10213 = Thunk.<PreludeBase.TMaybe<Long>>shared(
        new Lazy.D<PreludeBase.TMaybe<Long>>() {
          public PreludeBase.TMaybe<Long> call() {
            final PreludeBase.TTuple2<PreludeBase.TMaybe<Long>, PreludeBase.TMaybe<Long>> $11912 =
            gen$1049$10212.call();
            final PreludeBase.TMaybe<Long> rnd1$10216 = $11912.mem1.call();
            return rnd1$10216;
          }
        }
      );
  final Lazy<TSolver> emptySolver$10215 = Thunk.<TSolver>shared(
        new Lazy.D<TSolver>() {
          public TSolver call() {
            final class Let$11914  {
              final Let$11914 let$11914 = this;
              final public PreludeBase.TList<Unknown.TUnknown> $lc999$10220(final PreludeBase.TList<Integer> arg$4) {
                final PreludeBase.TList.DCons<Integer> $11915 = arg$4.asCons();
                if ($11915 != null) {
                  final int n$10222 = (int)$11915.mem1.call();
                  return PreludeBase.<Unknown.TUnknown>$excl$colon(
                            Unknown.$new(n$10222),
                            Thunk.<PreludeBase.TList<Unknown.TUnknown>>shared(
                                  new Lazy.D<PreludeBase.TList<Unknown.TUnknown>>() {
                                    public PreludeBase.TList<Unknown.TUnknown> call() {
                                      return let$11914.$lc999$10220($11915.mem2.call());
                                    }
                                  }
                                )
                          );
                }
                final PreludeBase.TList.DList<Integer> $11917 = arg$4.asList();
                assert $11917 != null;
                return PreludeBase.TList.DList.<Unknown.TUnknown>mk();
              }
            }
            final Let$11914 let$11914 = new Let$11914();
            return TSolver.mk(
                      arg$1, Puzzle.empty, rnd1$10213,
                      Thunk.<PreludeBase.TList<Unknown.TUnknown>>shared(
                            new Lazy.D<PreludeBase.TList<Unknown.TUnknown>>() {
                              public PreludeBase.TList<Unknown.TUnknown> call() {
                                return Solver.<Unknown.TUnknown>maybeShuffle(
                                          rnd2$10214.call(), let$11914.$lc999$10220(PreludeBase.IEnum_Int.enumFromTo(0, 80))
                                        );
                              }
                            }
                          ),
                      PreludeBase.TList.DCons.<Step.TStep>mk(
                            Step.TStep.mk(
                                  arg$3, PreludeBase.TMaybe.DNothing.<Placement.TPlacement>mk(),
                                  Thunk.<String/*<Character>*/>lazy("Initial puzzle")
                                ),
                            PreludeBase.TList.DList.<Step.TStep>mk()
                          )
                    );
          }
        }
      );
  return PreludeList.<PreludeBase.TTuple2<Integer, Integer>, TSolver>foldr(
            new Func.U.D<PreludeBase.TTuple2<Integer, Integer>, Func.U<TSolver, TSolver>>() {
              public Lazy<Func.U<TSolver, TSolver>> apply(final Lazy<PreludeBase.TTuple2<Integer, Integer>> arg$11918) {
                final PreludeBase.TTuple2<Integer, Integer> $11919 = arg$11918.call();
                return new Func.U.D<TSolver, TSolver>() {
                      public Lazy<TSolver> apply(final Lazy<TSolver> arg$11920) {
                        final TSolver accum$10226 = arg$11920.call();
                        return Thunk.<TSolver>shared(
                                  new Lazy.D<TSolver>() {
                                    public TSolver call() {
                                      return Solver.place(accum$10226, $11919.mem1, $11919.mem2);
                                    }
                                  }
                                );
                      }
                    };
              }
            },
            emptySolver$10215, Puzzle.each(arg$3)
          ).call();
}
final public static boolean isDigitPossibleInSet(
  final PreludeBase.TList<Unknown.TUnknown> arg$1, final int arg$2, final PreludeBase.TList<Integer> arg$3
) {
  final PreludeBase.TList<Unknown.TUnknown> $11924 = PreludeList.<Unknown.TUnknown>filter(
        new Func.U.D<Unknown.TUnknown, Boolean>() {
          public Lazy<Boolean> apply(final Lazy<Unknown.TUnknown> η$11922) {
            return Thunk.<Boolean>shared(
                      new Lazy.D<Boolean>() {
                        public Boolean call() {
                          return Unknown.isDigitPossible(arg$2, η$11922.call());
                        }
                      }
                    );
          }
        },
        PreludeList.<Unknown.TUnknown>filter(
              new Func.U.D<Unknown.TUnknown, Boolean>() {
                public Lazy<Boolean> apply(final Lazy<Unknown.TUnknown> η$11923) {
                  return Thunk.<Boolean>shared(
                            new Lazy.D<Boolean>() {
                              public Boolean call() {
                                return SolverUtil.isUnknownInSet(arg$3, η$11923);
                              }
                            }
                          );
                }
              },
              arg$1
            )
      );
  final PreludeBase.TList.DList<Unknown.TUnknown> $11925 = $11924.asList();
  if ($11925 != null) {
    return false;
  }
  return true;
}
final public static boolean trickySetMatchesForDigit(
  final PreludeBase.TList<Unknown.TUnknown> arg$1, final TrickySet.TTrickySet arg$2, final int arg$3
) {
  return Solver.isDigitPossibleInSet(arg$1, arg$3, TrickySet.TTrickySet.common(arg$2)) && Solver.notIsDigitPossibleInSet(
            arg$1, arg$3, TrickySet.TTrickySet.rest(arg$2)
          );
}
final public static PreludeBase.TList<Unknown.TUnknown> findUnknownWhereDigitIsNeeded(
  final PreludeBase.TList<Unknown.TUnknown> arg$1, final int arg$2, final PreludeBase.TList<Integer> arg$3
) {
  final PreludeBase.TList<Unknown.TUnknown> unknowns$tick$10358 = PreludeList.<Unknown.TUnknown>filter(
        new Func.U.D<Unknown.TUnknown, Boolean>() {
          public Lazy<Boolean> apply(final Lazy<Unknown.TUnknown> η$11926) {
            return Thunk.<Boolean>shared(
                      new Lazy.D<Boolean>() {
                        public Boolean call() {
                          return Unknown.isDigitPossible(arg$2, η$11926.call());
                        }
                      }
                    );
          }
        },
        PreludeList.<Unknown.TUnknown>filter(
              new Func.U.D<Unknown.TUnknown, Boolean>() {
                public Lazy<Boolean> apply(final Lazy<Unknown.TUnknown> η$11927) {
                  return Thunk.<Boolean>shared(
                            new Lazy.D<Boolean>() {
                              public Boolean call() {
                                return SolverUtil.isUnknownInSet(arg$3, η$11927);
                              }
                            }
                          );
                }
              },
              arg$1
            )
      );
  final PreludeBase.TList.DCons<Unknown.TUnknown> $11929 = unknowns$tick$10358.asCons();
  if ($11929 != null) {
    final PreludeBase.TList<Unknown.TUnknown> $11930 = $11929.mem2.call();
    final PreludeBase.TList.DList<Unknown.TUnknown> $11931 = $11930.asList();
    if ($11931 != null) {
      return unknowns$tick$10358;
    }
  }
  return PreludeBase.TList.DList.<Unknown.TUnknown>mk();
}
final public static PreludeBase.TList<Next.TNext> trickySetCheckNeeded(
  final PreludeBase.TList<Unknown.TUnknown> arg$1, final TrickySet.TTrickySet arg$2, final int arg$3
) {
  return PreludeList.<Next.TNext, Unknown.TUnknown>map(
            new Func.U.D<Unknown.TUnknown, Next.TNext>() {
              public Lazy<Next.TNext> apply(final Lazy<Unknown.TUnknown> arg$11932) {
                final Unknown.TUnknown v2314$11619 = arg$11932.call();
                return Thunk.<Next.TNext>shared(
                          new Lazy.D<Next.TNext>() {
                            public Next.TNext call() {
                              return Next.$new(
                                        Thunk.<String/*<Character>*/>shared(
                                              new Lazy.D<String/*<Character>*/>() {
                                                public String/*<Character>*/ call() {
                                                  return TrickySet.TTrickySet.name(arg$2);
                                                }
                                              }
                                            ),
                                        arg$3, Unknown.TUnknown.cellNumber(v2314$11619)
                                      );
                            }
                          }
                        );
              }
            },
            PreludeList.IListMonoid_$lbrack$rbrack.<Unknown.TUnknown>concat(
                  PreludeList.<PreludeBase.TList<Unknown.TUnknown>, PreludeBase.TList<Integer>>map(
                        new Func.U.D<PreludeBase.TList<Integer>, PreludeBase.TList<Unknown.TUnknown>>() {
                          public Lazy<PreludeBase.TList<Unknown.TUnknown>> apply(
                            final Lazy<PreludeBase.TList<Integer>> η$11934
                          ) {
                            return Thunk.<PreludeBase.TList<Unknown.TUnknown>>shared(
                                      new Lazy.D<PreludeBase.TList<Unknown.TUnknown>>() {
                                        public PreludeBase.TList<Unknown.TUnknown> call() {
                                          return Solver.findUnknownWhereDigitIsNeeded(
                                                    arg$1, arg$3, η$11934.call()
                                                  );
                                        }
                                      }
                                    );
                          }
                        },
                        TrickySet.TTrickySet.checkNeeded(arg$2)
                      )
                )
          );
}
final public static PreludeBase.TList<Next.TNext> findNeededDigitInSet(
  final PreludeBase.TList<Unknown.TUnknown> arg$1, final Lazy<String/*<Character>*/> arg$2, final int arg$3
) {
  final PreludeBase.TList<Unknown.TUnknown> $11936 = PreludeList.<Unknown.TUnknown>filter(
        new Func.U.D<Unknown.TUnknown, Boolean>() {
          public Lazy<Boolean> apply(final Lazy<Unknown.TUnknown> η$11935) {
            return Thunk.<Boolean>shared(
                      new Lazy.D<Boolean>() {
                        public Boolean call() {
                          return Unknown.isDigitPossible(arg$3, η$11935.call());
                        }
                      }
                    );
          }
        },
        arg$1
      );
  final PreludeBase.TList.DCons<Unknown.TUnknown> $11937 = $11936.asCons();
  if ($11937 != null) {
    final PreludeBase.TList<Unknown.TUnknown> $11938 = $11937.mem2.call();
    final PreludeBase.TList.DList<Unknown.TUnknown> $11939 = $11938.asList();
    if ($11939 != null) {
      return PreludeBase.TList.DCons.<Next.TNext>mk(
                Thunk.<Next.TNext>shared(
                      new Lazy.D<Next.TNext>() {
                        public Next.TNext call() {
                          return Next.$new(
                                    Thunk.<String/*<Character>*/>shared(
                                          new Lazy.D<String/*<Character>*/>() {
                                            public String/*<Character>*/ call() {
                                              return PreludeText.unwords(
                                                        PreludeBase.TList.DCons.<String/*<Character>*/>mk(
                                                              Thunk.<String/*<Character>*/>lazy(
                                                                    "Need a"
                                                                  ),
                                                              PreludeBase.TList.DCons.<
                                                                String/*<Character>*/
                                                              >mk(
                                                                    Thunk.<String/*<Character>*/>shared(
                                                                          new Lazy.D<String/*
                                                                            <Character>
                                                                          */>() {
                                                                            public String/*
                                                                              <Character>
                                                                            */ call() {
                                                                              return String.valueOf(
                                                                                        arg$3
                                                                                      );
                                                                            }
                                                                          }
                                                                        ),
                                                                    PreludeBase.TList.DCons.<
                                                                      String/*<Character>*/
                                                                    >mk(
                                                                          Thunk.<String/*<Character>*/>lazy(
                                                                                "in"
                                                                              ),
                                                                          PreludeBase.TList.DCons.<
                                                                            String/*<Character>*/
                                                                          >mk(
                                                                                arg$2,
                                                                                PreludeBase.TList.DList.<
                                                                                  String/*
                                                                                    <Character>
                                                                                  */
                                                                                >mk()
                                                                              )
                                                                        )
                                                                  )
                                                            )
                                                      );
                                            }
                                          }
                                        ),
                                    arg$3, Unknown.TUnknown.cellNumber($11937.mem1.call())
                                  );
                        }
                      }
                    ),
                PreludeBase.TList.DList.<Next.TNext>mk()
              );
    }
  }
  return PreludeBase.TList.DList.<Next.TNext>mk();
}
final public static PreludeBase.TList<Next.TNext> findNeededInSet(final TSolver arg$1, final ExclusionSet.TExclusionSet arg$2) {
  final Lazy<PreludeBase.TList<Integer>> cellNumbers$10324 = Thunk.<PreludeBase.TList<Integer>>shared(
        new Lazy.D<PreludeBase.TList<Integer>>() {
          public PreludeBase.TList<Integer> call() {
            final PreludeBase.TList<Integer> cellNumbers$10329 = arg$2.mem$cells;
            return cellNumbers$10329;
          }
        }
      );
  final Lazy<String/*<Character>*/> name$10323 = Thunk.<String/*<Character>*/>shared(
        new Lazy.D<String/*<Character>*/>() {
          public String/*<Character>*/ call() {
            final String/*<Character>*/ name$10326 = arg$2.mem$name;
            return name$10326;
          }
        }
      );
  return PreludeList.IListMonoid_$lbrack$rbrack.<Next.TNext>concat(
            PreludeList.<PreludeBase.TList<Next.TNext>, Integer>map(
                  new Func.U.D<Integer, PreludeBase.TList<Next.TNext>>() {
                    public Lazy<PreludeBase.TList<Next.TNext>> apply(final Lazy<Integer> η$11942) {
                      return Thunk.<PreludeBase.TList<Next.TNext>>shared(
                                new Lazy.D<PreludeBase.TList<Next.TNext>>() {
                                  public PreludeBase.TList<Next.TNext> call() {
                                    return Solver.findNeededDigitInSet(
                                              SolverUtil.unknownsInSet(TSolver.unknowns(arg$1), cellNumbers$10324.call()),
                                              name$10323, (int)η$11942.call()
                                            );
                                  }
                                }
                              );
                    }
                  },
                  PreludeBase.IEnum_Int.enumFromTo(1, 9)
                )
          );
}
final public static PreludeBase.TList<Next.TNext> findNeeded(final TSolver arg$1) {
  return PreludeList.IListMonoid_$lbrack$rbrack.<Next.TNext>concat(
            PreludeList.<PreludeBase.TList<Next.TNext>, ExclusionSet.TExclusionSet>map(
                  new Func.U.D<ExclusionSet.TExclusionSet, PreludeBase.TList<Next.TNext>>() {
                    public Lazy<PreludeBase.TList<Next.TNext>> apply(final Lazy<ExclusionSet.TExclusionSet> η$11943) {
                      return Thunk.<PreludeBase.TList<Next.TNext>>shared(
                                new Lazy.D<PreludeBase.TList<Next.TNext>>() {
                                  public PreludeBase.TList<Next.TNext> call() {
                                    return Solver.findNeededInSet(arg$1, η$11943.call());
                                  }
                                }
                              );
                    }
                  },
                  ExclusionSet.exclusionSets.call()
                )
          );
}
final public static PreludeBase.TList<Next.TNext> findForcedForUnknown(
  final Lazy<String/*<Character>*/> arg$1, final Unknown.TUnknown arg$2
) {
  final PreludeBase.TList<Integer> $11944 = Unknown.getPossible(arg$2);
  final PreludeBase.TList.DCons<Integer> $11945 = $11944.asCons();
  if ($11945 != null) {
    final PreludeBase.TList<Integer> $11946 = $11945.mem2.call();
    final PreludeBase.TList.DList<Integer> $11947 = $11946.asList();
    if ($11947 != null) {
      return PreludeBase.TList.DCons.<Next.TNext>mk(
                Thunk.<Next.TNext>shared(
                      new Lazy.D<Next.TNext>() {
                        public Next.TNext call() {
                          return Next.$new(arg$1, (int)$11945.mem1.call(), Unknown.TUnknown.cellNumber(arg$2));
                        }
                      }
                    ),
                PreludeBase.TList.DList.<Next.TNext>mk()
              );
    }
  }
  return PreludeBase.TList.DList.<Next.TNext>mk();
}
final public static PreludeBase.TList<Next.TNext> findMissingTwoInSet(
  final TSolver arg$1, final ExclusionSet.TExclusionSet arg$2
) {
  final Lazy<PreludeBase.TList<Integer>> cellNumbers$10310 = Thunk.<PreludeBase.TList<Integer>>shared(
        new Lazy.D<PreludeBase.TList<Integer>>() {
          public PreludeBase.TList<Integer> call() {
            final PreludeBase.TList<Integer> cellNumbers$10314 = arg$2.mem$cells;
            return cellNumbers$10314;
          }
        }
      );
  final Lazy<String/*<Character>*/> name$10309 = Thunk.<String/*<Character>*/>shared(
        new Lazy.D<String/*<Character>*/>() {
          public String/*<Character>*/ call() {
            final String/*<Character>*/ name$10311 = arg$2.mem$name;
            return name$10311;
          }
        }
      );
  final PreludeBase.TList<Unknown.TUnknown> $11950 = SolverUtil.unknownsInSet(
        TSolver.unknowns(arg$1), cellNumbers$10310.call()
      );
  final PreludeBase.TList.DCons<Unknown.TUnknown> $11951 = $11950.asCons();
  if ($11951 != null) {
    final PreludeBase.TList<Unknown.TUnknown> $11952 = $11951.mem2.call();
    final PreludeBase.TList.DCons<Unknown.TUnknown> $11953 = $11952.asCons();
    if ($11953 != null) {
      final PreludeBase.TList<Unknown.TUnknown> $11954 = $11953.mem2.call();
      final PreludeBase.TList.DList<Unknown.TUnknown> $11955 = $11954.asList();
      if ($11955 != null) {
        return PreludeList.IListMonoid_$lbrack$rbrack.<Next.TNext>concat(
                  PreludeList.<PreludeBase.TList<Next.TNext>, Unknown.TUnknown>map(
                        new Func.U.D<Unknown.TUnknown, PreludeBase.TList<Next.TNext>>() {
                          public Lazy<PreludeBase.TList<Next.TNext>> apply(final Lazy<Unknown.TUnknown> η$11956) {
                            return Thunk.<PreludeBase.TList<Next.TNext>>shared(
                                      new Lazy.D<PreludeBase.TList<Next.TNext>>() {
                                        public PreludeBase.TList<Next.TNext> call() {
                                          return Solver.findForcedForUnknown(
                                                    Thunk.<String/*<Character>*/>shared(
                                                          new Lazy.D<String/*<Character>*/>() {
                                                            public String/*<Character>*/ call() {
                                                              return "Missing two in " + name$10309
                                                                  .call();
                                                            }
                                                          }
                                                        ),
                                                    η$11956.call()
                                                  );
                                        }
                                      }
                                    );
                          }
                        },
                        $11950
                      )
                );
      }
    }
  }
  return PreludeBase.TList.DList.<Next.TNext>mk();
}
final public static PreludeBase.TList<Next.TNext> findMissingTwo(final TSolver arg$1) {
  return PreludeList.IListMonoid_$lbrack$rbrack.<Next.TNext>concat(
            PreludeList.<PreludeBase.TList<Next.TNext>, ExclusionSet.TExclusionSet>map(
                  new Func.U.D<ExclusionSet.TExclusionSet, PreludeBase.TList<Next.TNext>>() {
                    public Lazy<PreludeBase.TList<Next.TNext>> apply(final Lazy<ExclusionSet.TExclusionSet> η$11957) {
                      return Thunk.<PreludeBase.TList<Next.TNext>>shared(
                                new Lazy.D<PreludeBase.TList<Next.TNext>>() {
                                  public PreludeBase.TList<Next.TNext> call() {
                                    return Solver.findMissingTwoInSet(arg$1, η$11957.call());
                                  }
                                }
                              );
                    }
                  },
                  ExclusionSet.exclusionSets.call()
                )
          );
}
final public static PreludeBase.TList<Next.TNext> findMissingOneInSet(
  final TSolver arg$1, final ExclusionSet.TExclusionSet arg$2
) {
  final Lazy<PreludeBase.TList<Integer>> cellNumbers$10298 = Thunk.<PreludeBase.TList<Integer>>shared(
        new Lazy.D<PreludeBase.TList<Integer>>() {
          public PreludeBase.TList<Integer> call() {
            final PreludeBase.TList<Integer> cellNumbers$10302 = arg$2.mem$cells;
            return cellNumbers$10302;
          }
        }
      );
  final Lazy<String/*<Character>*/> name$10297 = Thunk.<String/*<Character>*/>shared(
        new Lazy.D<String/*<Character>*/>() {
          public String/*<Character>*/ call() {
            final String/*<Character>*/ name$10299 = arg$2.mem$name;
            return name$10299;
          }
        }
      );
  final PreludeBase.TList<Unknown.TUnknown> $11960 = SolverUtil.unknownsInSet(
        TSolver.unknowns(arg$1), cellNumbers$10298.call()
      );
  final PreludeBase.TList.DCons<Unknown.TUnknown> $11961 = $11960.asCons();
  if ($11961 != null) {
    final PreludeBase.TList<Unknown.TUnknown> $11962 = $11961.mem2.call();
    final PreludeBase.TList.DList<Unknown.TUnknown> $11963 = $11962.asList();
    if ($11963 != null) {
      final Unknown.TUnknown unknown$10303 = $11961.mem1.call();
      return Solver.findForcedForUnknown(
                Thunk.<String/*<Character>*/>shared(
                      new Lazy.D<String/*<Character>*/>() {
                        public String/*<Character>*/ call() {
                          return "Missing one in " + name$10297.call();
                        }
                      }
                    ),
                unknown$10303
              );
    }
  }
  return PreludeBase.TList.DList.<Next.TNext>mk();
}
final public static PreludeBase.TList<Next.TNext> findMissingOne(final TSolver arg$1) {
  return PreludeList.IListMonoid_$lbrack$rbrack.<Next.TNext>concat(
            PreludeList.<PreludeBase.TList<Next.TNext>, ExclusionSet.TExclusionSet>map(
                  new Func.U.D<ExclusionSet.TExclusionSet, PreludeBase.TList<Next.TNext>>() {
                    public Lazy<PreludeBase.TList<Next.TNext>> apply(final Lazy<ExclusionSet.TExclusionSet> η$11965) {
                      return Thunk.<PreludeBase.TList<Next.TNext>>shared(
                                new Lazy.D<PreludeBase.TList<Next.TNext>>() {
                                  public PreludeBase.TList<Next.TNext> call() {
                                    return Solver.findMissingOneInSet(arg$1, η$11965.call());
                                  }
                                }
                              );
                    }
                  },
                  ExclusionSet.exclusionSets.call()
                )
          );
}
final public static PreludeBase.TList<Next.TNext> findForced(final TSolver arg$1) {
  return PreludeList.IListMonoid_$lbrack$rbrack.<Next.TNext>concat(
            PreludeList.<PreludeBase.TList<Next.TNext>, Unknown.TUnknown>map(
                  new Func.U.D<Unknown.TUnknown, PreludeBase.TList<Next.TNext>>() {
                    public Lazy<PreludeBase.TList<Next.TNext>> apply(final Lazy<Unknown.TUnknown> η$11966) {
                      return Thunk.<PreludeBase.TList<Next.TNext>>shared(
                                new Lazy.D<PreludeBase.TList<Next.TNext>>() {
                                  public PreludeBase.TList<Next.TNext> call() {
                                    return Solver.findForcedForUnknown(
                                              Thunk.<String/*<Character>*/>lazy("Forced"), η$11966.call()
                                            );
                                  }
                                }
                              );
                    }
                  },
                  TSolver.unknowns(arg$1)
                )
          );
}
final public static PreludeBase.TList<Next.TNext> findEasyPeasy(final TSolver arg$1) {
  return EasyPeasy.find(
            Thunk.<Puzzle.TPuzzle>shared(
                  new Lazy.D<Puzzle.TPuzzle>() {
                    public Puzzle.TPuzzle call() {
                      return TSolver.puzzle(arg$1);
                    }
                  }
                ),
            TSolver.unknowns(arg$1)
          );
}
final public static PreludeBase.TList<PreludeBase.TTuple2<Integer, TrickySet.TTrickySet>> findApplicableTrickySets(
  final Lazy<PreludeBase.TList<Unknown.TUnknown>> arg$1
) {
  final Lazy<PreludeBase.TList<TrickySet.TTrickySet>> allTrickySets$10394 = Thunk.<
    PreludeBase.TList<TrickySet.TTrickySet>
  >shared(
        new Lazy.D<PreludeBase.TList<TrickySet.TTrickySet>>() {
          public PreludeBase.TList<TrickySet.TTrickySet> call() {
            return PreludeList.IListMonoid_$lbrack$rbrack.<TrickySet.TTrickySet>$plus$plus(
                      TrickySet.trickySets.call(), TrickySet.inverseTrickySets
                    );
          }
        }
      );
  final class Let$11967  {
    final Let$11967 let$11967 = this;
    final public Lazy<PreludeBase.TList<PreludeBase.TTuple2<Integer, TrickySet.TTrickySet>>> $lc1002$10395(
      final PreludeBase.TList<Integer> arg$2
    ) {
      final PreludeBase.TList.DCons<Integer> $11968 = arg$2.asCons();
      if ($11968 != null) {
        final class Let$11969  {
          final Let$11969 let$11969 = this;
          final public Lazy<PreludeBase.TList<PreludeBase.TTuple2<Integer, TrickySet.TTrickySet>>> $lc1005$10399(
            PreludeBase.TList<TrickySet.TTrickySet> arg$3
          ) {
            tailrecursion: while (true) {
              final PreludeBase.TList<TrickySet.TTrickySet> arg$3f = arg$3;
              final PreludeBase.TList.DCons<TrickySet.TTrickySet> $11970 = arg$3f.asCons();
              if ($11970 != null) {
                final TrickySet.TTrickySet trickySet$10401 = $11970.mem1.call();
                if (Solver.trickySetMatchesForDigit(arg$1.call(), trickySet$10401, (int)$11968.mem1.call())) {
                  return Thunk.<PreludeBase.TList<PreludeBase.TTuple2<Integer, TrickySet.TTrickySet>>>shared(
                            new Lazy.D<PreludeBase.TList<PreludeBase.TTuple2<Integer, TrickySet.TTrickySet>>>() {
                              public PreludeBase.TList<PreludeBase.TTuple2<Integer, TrickySet.TTrickySet>> call() {
                                return PreludeBase.<PreludeBase.TTuple2<Integer, TrickySet.TTrickySet>>$excl$colon(
                                          PreludeBase.TTuple2.<Integer, TrickySet.TTrickySet>mk(
                                                $11968.mem1, trickySet$10401
                                              ),
                                          Thunk.<PreludeBase.TList<PreludeBase.TTuple2<Integer, TrickySet.TTrickySet>>>nested(
                                                new Lazy.D<Lazy<PreludeBase.TList<
                                                  PreludeBase.TTuple2<Integer, TrickySet.TTrickySet>
                                                >>>() {
                                                  public Lazy<PreludeBase.TList<
                                                    PreludeBase.TTuple2<Integer, TrickySet.TTrickySet>
                                                  >> call() {
                                                    return let$11969.$lc1005$10399($11970.mem2.call());
                                                  }
                                                }
                                              )
                                        );
                              }
                            }
                          );
                }
                else {
                  arg$3 = $11970.mem2.call();
                  continue tailrecursion;
                }
              }
              final PreludeBase.TList.DList<TrickySet.TTrickySet> $11972 = arg$3f.asList();
              assert $11972 != null;
              return let$11967.$lc1002$10395($11968.mem2.call());
            }
          }
        }
        final Let$11969 let$11969 = new Let$11969();
        return Thunk.<PreludeBase.TList<PreludeBase.TTuple2<Integer, TrickySet.TTrickySet>>>nested(
                  new Lazy.D<Lazy<PreludeBase.TList<PreludeBase.TTuple2<Integer, TrickySet.TTrickySet>>>>() {
                    public Lazy<PreludeBase.TList<PreludeBase.TTuple2<Integer, TrickySet.TTrickySet>>> call() {
                      return let$11969.$lc1005$10399(allTrickySets$10394.call());
                    }
                  }
                );
      }
      final PreludeBase.TList.DList<Integer> $11973 = arg$2.asList();
      assert $11973 != null;
      return PreludeBase.TList.DList.<PreludeBase.TTuple2<Integer, TrickySet.TTrickySet>>mk();
    }
  }
  final Let$11967 let$11967 = new Let$11967();
  return let$11967.$lc1002$10395(PreludeBase.IEnum_Int.enumFromTo(1, 9)).call();
}
final public static PreludeBase.TList<Unknown.TUnknown> eliminateWithTrickySet(
  final PreludeBase.TList<Unknown.TUnknown> arg$1, final Lazy<Integer> arg$2, final TrickySet.TTrickySet arg$3
) {
  return PreludeList.<Unknown.TUnknown, Unknown.TUnknown>map(
            new Func.U.D<Unknown.TUnknown, Unknown.TUnknown>() {
              public Lazy<Unknown.TUnknown> apply(final Lazy<Unknown.TUnknown> arg$11974) {
                final Unknown.TUnknown u$10407 = arg$11974.call();
                if (
                  PreludeList.<Integer>elem(
                        PreludeBase.IEq_Int.it,
                        Thunk.<Integer>shared(
                              new Lazy.D<Integer>() {
                                public Integer call() {
                                  return Unknown.TUnknown.cellNumber(u$10407);
                                }
                              }
                            ),
                        TrickySet.TTrickySet.eliminate(arg$3)
                      )
                ) {
                  return Thunk.<Unknown.TUnknown>shared(
                            new Lazy.D<Unknown.TUnknown>() {
                              public Unknown.TUnknown call() {
                                return Unknown.removeDigitFromPossible((int)arg$2.call(), u$10407);
                              }
                            }
                          );
                }
                else {
                  return u$10407;
                }
              }
            },
            arg$1
          );
}
final public static PreludeBase.TList<Next.TNext> findTricky(final TSolver arg$1) {
  final PreludeBase.TList<Unknown.TUnknown> unknowns$10341 = TSolver.unknowns(arg$1);
  return PreludeList.IListMonoid_$lbrack$rbrack.<Next.TNext>concat(
            PreludeList.<PreludeBase.TList<Next.TNext>, PreludeBase.TTuple2<Integer, TrickySet.TTrickySet>>map(
                  new Func.U.D<PreludeBase.TTuple2<Integer, TrickySet.TTrickySet>, PreludeBase.TList<Next.TNext>>() {
                    public Lazy<PreludeBase.TList<Next.TNext>> apply(
                      final Lazy<PreludeBase.TTuple2<Integer, TrickySet.TTrickySet>> arg$11977
                    ) {
                      final PreludeBase.TTuple2<Integer, TrickySet.TTrickySet> $11978 =
                      arg$11977.call();
                      final TrickySet.TTrickySet trickySet$10344 = $11978.mem2.call();
                      final int digit$10343 = (int)$11978.mem1.call();
                      return Thunk.<PreludeBase.TList<Next.TNext>>shared(
                                new Lazy.D<PreludeBase.TList<Next.TNext>>() {
                                  public PreludeBase.TList<Next.TNext> call() {
                                    return Solver.trickySetCheckNeeded(
                                              Solver.eliminateWithTrickySet(
                                                    unknowns$10341, Thunk.<Integer>lazy(digit$10343), trickySet$10344
                                                  ),
                                              trickySet$10344, digit$10343
                                            );
                                  }
                                }
                              );
                    }
                  },
                  Solver.findApplicableTrickySets(unknowns$10341)
                )
          );
}
final public static PreludeBase.TList<Func.U<TSolver, PreludeBase.TList<Next.TNext>>> heuristics(
  final TSolver arg$1
) {
  return PreludeList.<Func.U<TSolver, PreludeBase.TList<Next.TNext>>, Short>map(
            new Func.U.D<Short, Func.U<TSolver, PreludeBase.TList<Next.TNext>>>() {
              public Lazy<Func.U<TSolver, PreludeBase.TList<Next.TNext>>> apply(final Lazy<Short> arg$11981) {
                final short h$10254 = (short)arg$11981.call();
                if (h$10254 == SolverOptions.THeuristic.EasyPeasy) {
                  return new Func.U.D<TSolver, PreludeBase.TList<Next.TNext>>() {
                        public Lazy<PreludeBase.TList<Next.TNext>> apply(final Lazy<TSolver> η$11983) {
                          return Thunk.<PreludeBase.TList<Next.TNext>>shared(
                                    new Lazy.D<PreludeBase.TList<Next.TNext>>() {
                                      public PreludeBase.TList<Next.TNext> call() {
                                        return Solver.findEasyPeasy(η$11983.call());
                                      }
                                    }
                                  );
                        }
                      };
                }
                if (h$10254 == SolverOptions.THeuristic.MissingOne) {
                  return new Func.U.D<TSolver, PreludeBase.TList<Next.TNext>>() {
                        public Lazy<PreludeBase.TList<Next.TNext>> apply(final Lazy<TSolver> η$11984) {
                          return Thunk.<PreludeBase.TList<Next.TNext>>shared(
                                    new Lazy.D<PreludeBase.TList<Next.TNext>>() {
                                      public PreludeBase.TList<Next.TNext> call() {
                                        return Solver.findMissingOne(η$11984.call());
                                      }
                                    }
                                  );
                        }
                      };
                }
                if (h$10254 == SolverOptions.THeuristic.MissingTwo) {
                  return new Func.U.D<TSolver, PreludeBase.TList<Next.TNext>>() {
                        public Lazy<PreludeBase.TList<Next.TNext>> apply(final Lazy<TSolver> η$11985) {
                          return Thunk.<PreludeBase.TList<Next.TNext>>shared(
                                    new Lazy.D<PreludeBase.TList<Next.TNext>>() {
                                      public PreludeBase.TList<Next.TNext> call() {
                                        return Solver.findMissingTwo(η$11985.call());
                                      }
                                    }
                                  );
                        }
                      };
                }
                if (h$10254 == SolverOptions.THeuristic.Tricky) {
                  return new Func.U.D<TSolver, PreludeBase.TList<Next.TNext>>() {
                        public Lazy<PreludeBase.TList<Next.TNext>> apply(final Lazy<TSolver> η$11986) {
                          return Thunk.<PreludeBase.TList<Next.TNext>>shared(
                                    new Lazy.D<PreludeBase.TList<Next.TNext>>() {
                                      public PreludeBase.TList<Next.TNext> call() {
                                        return Solver.findTricky(η$11986.call());
                                      }
                                    }
                                  );
                        }
                      };
                }
                if (h$10254 == SolverOptions.THeuristic.Needed) {
                  return new Func.U.D<TSolver, PreludeBase.TList<Next.TNext>>() {
                        public Lazy<PreludeBase.TList<Next.TNext>> apply(final Lazy<TSolver> η$11987) {
                          return Thunk.<PreludeBase.TList<Next.TNext>>shared(
                                    new Lazy.D<PreludeBase.TList<Next.TNext>>() {
                                      public PreludeBase.TList<Next.TNext> call() {
                                        return Solver.findNeeded(η$11987.call());
                                      }
                                    }
                                  );
                        }
                      };
                }
                assert h$10254 == SolverOptions.THeuristic.Forced;
                return new Func.U.D<TSolver, PreludeBase.TList<Next.TNext>>() {
                      public Lazy<PreludeBase.TList<Next.TNext>> apply(final Lazy<TSolver> η$11988) {
                        return Thunk.<PreludeBase.TList<Next.TNext>>shared(
                                  new Lazy.D<PreludeBase.TList<Next.TNext>>() {
                                    public PreludeBase.TList<Next.TNext> call() {
                                      return Solver.findForced(η$11988.call());
                                    }
                                  }
                                );
                      }
                    };
              }
            },
            SolverOptions.TSolverOptions.heuristics(TSolver.options(arg$1))
          );
}
final public static TSolver addStep(final TSolver arg$1, final Lazy<Step.TStep> arg$2) {
  return TSolver.upd$steps(
            arg$1,
            Thunk.<PreludeBase.TList<Step.TStep>>shared(
                  new Lazy.D<PreludeBase.TList<Step.TStep>>() {
                    public PreludeBase.TList<Step.TStep> call() {
                      return PreludeList.IListMonoid_$lbrack$rbrack.<Step.TStep>$plus$plus(
                                TSolver.steps(arg$1),
                                PreludeBase.TList.DCons.<Step.TStep>mk(arg$2, PreludeBase.TList.DList.<Step.TStep>mk())
                              );
                    }
                  }
                )
          );
}
final public static PreludeBase.TList<TSolver> applyTrickySet(
  final TSolver arg$1, final Lazy<Integer> arg$2, final TrickySet.TTrickySet arg$3
) {
  final PreludeBase.TList<Unknown.TUnknown> oldUnknowns$10390 = TSolver.unknowns(arg$1);
  final PreludeBase.TList<Unknown.TUnknown> newUnknowns$10391 = Solver.eliminateWithTrickySet(
        oldUnknowns$10390, arg$2, arg$3
      );
  if (PreludeBase.IEq_$lbrack$rbrack.<Unknown.TUnknown>$excl$eq(Unknown.IEq_Unknown.it, newUnknowns$10391, oldUnknowns$10390)) {
    return PreludeBase.TList.DCons.<TSolver>mk(
              Thunk.<TSolver>shared(
                    new Lazy.D<TSolver>() {
                      public TSolver call() {
                        return TSolver.upd$unknowns(
                                  Solver.addStep(
                                        arg$1,
                                        Step.TStep.mk(
                                              Thunk.<Puzzle.TPuzzle>shared(
                                                    new Lazy.D<Puzzle.TPuzzle>() {
                                                      public Puzzle.TPuzzle call() {
                                                        return TSolver.puzzle(arg$1);
                                                      }
                                                    }
                                                  ),
                                              PreludeBase.TMaybe.DNothing.<Placement.TPlacement>mk(),
                                              Thunk.<String/*<Character>*/>shared(
                                                    new Lazy.D<String/*<Character>*/>() {
                                                      public String/*<Character>*/ call() {
                                                        return "Apply " + TrickySet.TTrickySet.name(
                                                                  arg$3
                                                                );
                                                      }
                                                    }
                                                  )
                                            )
                                      ),
                                  newUnknowns$10391
                                );
                      }
                    }
                  ),
              PreludeBase.TList.DList.<TSolver>mk()
            );
  }
  else {
    return PreludeBase.TList.DList.<TSolver>mk();
  }
}
final public static PreludeBase.TMaybe<TSolver> applyOneTrickySet(final TSolver arg$1) {
  final class Let$11991  {
    final Let$11991 let$11991 = this;
    final public PreludeBase.TList<TSolver> tryTrickySet$10377(final PreludeBase.TTuple2<Integer, TrickySet.TTrickySet> arg$2) {
      final TrickySet.TTrickySet trickySet$10383 = arg$2.mem2.call();
      return Solver.applyTrickySet(arg$1, arg$2.mem1, trickySet$10383);
    }
  }
  final Let$11991 let$11991 = new Let$11991();
  final Lazy<PreludeBase.TTuple2<PreludeBase.TMaybe<Long>, PreludeBase.TMaybe<Long>>> gen$13286$10373 =
  Thunk.<PreludeBase.TTuple2<PreludeBase.TMaybe<Long>, PreludeBase.TMaybe<Long>>>shared(
        new Lazy.D<PreludeBase.TTuple2<PreludeBase.TMaybe<Long>, PreludeBase.TMaybe<Long>>>() {
          public PreludeBase.TTuple2<PreludeBase.TMaybe<Long>, PreludeBase.TMaybe<Long>> call() {
            return Solver.maybeSplit(TSolver.rnd(arg$1));
          }
        }
      );
  final Lazy<PreludeBase.TMaybe<Long>> rnd2$10375 = Thunk.<PreludeBase.TMaybe<Long>>shared(
        new Lazy.D<PreludeBase.TMaybe<Long>>() {
          public PreludeBase.TMaybe<Long> call() {
            final PreludeBase.TTuple2<PreludeBase.TMaybe<Long>, PreludeBase.TMaybe<Long>> $11993 =
            gen$13286$10373.call();
            final PreludeBase.TMaybe<Long> rnd2$10381 = $11993.mem2.call();
            return rnd2$10381;
          }
        }
      );
  final Lazy<PreludeBase.TMaybe<Long>> rnd1$10374 = Thunk.<PreludeBase.TMaybe<Long>>shared(
        new Lazy.D<PreludeBase.TMaybe<Long>>() {
          public PreludeBase.TMaybe<Long> call() {
            final PreludeBase.TTuple2<PreludeBase.TMaybe<Long>, PreludeBase.TMaybe<Long>> $11995 =
            gen$13286$10373.call();
            final PreludeBase.TMaybe<Long> rnd1$10378 = $11995.mem1.call();
            return rnd1$10378;
          }
        }
      );
  final PreludeBase.TList<TSolver> $11998 = PreludeList.IListMonoid_$lbrack$rbrack.<TSolver>concat(
        PreludeList.<PreludeBase.TList<TSolver>, PreludeBase.TTuple2<Integer, TrickySet.TTrickySet>>map(
              new Func.U.D<PreludeBase.TTuple2<Integer, TrickySet.TTrickySet>, PreludeBase.TList<TSolver>>() {
                public Lazy<PreludeBase.TList<TSolver>> apply(
                  final Lazy<PreludeBase.TTuple2<Integer, TrickySet.TTrickySet>> η$11997
                ) {
                  return Thunk.<PreludeBase.TList<TSolver>>shared(
                            new Lazy.D<PreludeBase.TList<TSolver>>() {
                              public PreludeBase.TList<TSolver> call() {
                                return let$11991.tryTrickySet$10377(η$11997.call());
                              }
                            }
                          );
                }
              },
              Solver.<PreludeBase.TTuple2<Integer, TrickySet.TTrickySet>>maybeShuffle(
                    rnd1$10374.call(),
                    Solver.findApplicableTrickySets(
                          Thunk.<PreludeBase.TList<Unknown.TUnknown>>shared(
                                new Lazy.D<PreludeBase.TList<Unknown.TUnknown>>() {
                                  public PreludeBase.TList<Unknown.TUnknown> call() {
                                    return TSolver.unknowns(arg$1);
                                  }
                                }
                              )
                        )
                  )
            )
      );
  final PreludeBase.TList.DCons<TSolver> $11999 = $11998.asCons();
  if ($11999 != null) {
    return PreludeBase.TMaybe.DJust.<TSolver>mk(
              Thunk.<TSolver>shared(
                    new Lazy.D<TSolver>() {
                      public TSolver call() {
                        return TSolver.upd$rnd($11999.mem1.call(), rnd2$10375);
                      }
                    }
                  )
            );
  }
  return PreludeBase.TMaybe.DNothing.<TSolver>mk();
}
final public static PreludeBase.TMaybe<TSolver> applyOneTrickySetIfAllowed(final TSolver arg$1) {
  if (SolverOptions.TSolverOptions.usePermanentTrickySets(TSolver.options(arg$1))) {
    return Solver.applyOneTrickySet(arg$1);
  }
  else {
    return PreludeBase.TMaybe.DNothing.<TSolver>mk();
  }
}
final public static Lazy<PreludeBase.TList<Solution.TSolution>> solutionsStuck(final TSolver arg$1) {
  final Lazy<SolverOptions.TSolverOptions> options$10279 = Thunk.<SolverOptions.TSolverOptions>shared(
        new Lazy.D<SolverOptions.TSolverOptions>() {
          public SolverOptions.TSolverOptions call() {
            return TSolver.options(arg$1);
          }
        }
      );
  final Lazy<Unknown.TUnknown> minUnknown$10276 = Thunk.<Unknown.TUnknown>shared(
        new Lazy.D<Unknown.TUnknown>() {
          public Unknown.TUnknown call() {
            return Solver.<Unknown.TUnknown, Integer>minBy(
                      PreludeBase.IOrd_Int.it,
                      new Func.U.D<Unknown.TUnknown, Integer>() {
                        public Lazy<Integer> apply(final Lazy<Unknown.TUnknown> η$12000) {
                          return Thunk.<Integer>shared(
                                    new Lazy.D<Integer>() {
                                      public Integer call() {
                                        return Unknown.numPossible(η$12000.call());
                                      }
                                    }
                                  );
                        }
                      },
                      TSolver.unknowns(arg$1)
                    );
          }
        }
      );
  final Lazy<PreludeBase.TList<Integer>> possible$10278 = Thunk.<PreludeBase.TList<Integer>>shared(
        new Lazy.D<PreludeBase.TList<Integer>>() {
          public PreludeBase.TList<Integer> call() {
            return Unknown.getPossible(minUnknown$10276.call());
          }
        }
      );
  final PreludeBase.TList<Integer> $12001 = possible$10278.call();
  final PreludeBase.TList.DList<Integer> $12002 = $12001.asList();
  if ($12002 != null) {
    return PreludeBase.TList.DList.<Solution.TSolution>mk();
  }
  final PreludeBase.TList.DCons<Integer> $12003 = $12001.asCons();
  if ($12003 != null) {
    final PreludeBase.TList<Integer> $12004 = $12003.mem2.call();
    final PreludeBase.TList.DList<Integer> $12005 = $12004.asList();
    if ($12005 != null) {
      if (
        SolverOptions.TSolverOptions.useGuessing(options$10279.call()) && ! SolverOptions.TSolverOptions.useHeuristics(
              options$10279.call()
            )
      ) {
        return Solver.placeAndContinue(
                  arg$1,
                  Thunk.<Next.TNext>shared(
                        new Lazy.D<Next.TNext>() {
                          public Next.TNext call() {
                            return Next.$new(
                                      Thunk.<String/*<Character>*/>lazy("Forced guess"), (int)$12003.mem1.call(),
                                      Unknown.TUnknown.cellNumber(minUnknown$10276.call())
                                    );
                          }
                        }
                      )
                );
      }
      else {
        final PreludeBase.TMaybe<TSolver> $12006 = Solver.applyOneTrickySetIfAllowed(arg$1);
        final PreludeBase.TMaybe.DJust<TSolver> $12007 = $12006.asJust();
        if ($12007 != null) {
          final TSolver newSolver$10282 = $12007.mem1.call();
          return Thunk.<PreludeBase.TList<Solution.TSolution>>nested(
                    new Lazy.D<Lazy<PreludeBase.TList<Solution.TSolution>>>() {
                      public Lazy<PreludeBase.TList<Solution.TSolution>> call() {
                        return Solver.solutionsTop(newSolver$10282);
                      }
                    }
                  );
        }
        final PreludeBase.TMaybe.DNothing<TSolver> $12009 = $12006.asNothing();
        assert $12009 != null;
        return PreludeBase.TList.DList.<Solution.TSolution>mk();
      }
    }
  }
  final PreludeBase.TMaybe<TSolver> $12010 = Solver.applyOneTrickySetIfAllowed(arg$1);
  final PreludeBase.TMaybe.DJust<TSolver> $12011 = $12010.asJust();
  if ($12011 != null) {
    final TSolver newSolver$10284 = $12011.mem1.call();
    return Thunk.<PreludeBase.TList<Solution.TSolution>>nested(
              new Lazy.D<Lazy<PreludeBase.TList<Solution.TSolution>>>() {
                public Lazy<PreludeBase.TList<Solution.TSolution>> call() {
                  return Solver.solutionsTop(newSolver$10284);
                }
              }
            );
  }
  final PreludeBase.TMaybe.DNothing<TSolver> $12013 = $12010.asNothing();
  assert $12013 != null;
  if (SolverOptions.TSolverOptions.useGuessing(options$10279.call())) {
    return Thunk.<PreludeBase.TList<Solution.TSolution>>shared(
              new Lazy.D<PreludeBase.TList<Solution.TSolution>>() {
                public PreludeBase.TList<Solution.TSolution> call() {
                  return Solver.doGuesses(
                            arg$1,
                            Thunk.<Integer>shared(
                                  new Lazy.D<Integer>() {
                                    public Integer call() {
                                      return Unknown.TUnknown.cellNumber(minUnknown$10276.call());
                                    }
                                  }
                                ),
                            Solver.<Integer>maybeShuffle(TSolver.rnd(arg$1), possible$10278.call())
                          );
                }
              }
            );
  }
  else {
    return PreludeBase.TList.DList.<Solution.TSolution>mk();
  }
}
final public static Lazy<PreludeBase.TList<Solution.TSolution>> solutionsTop(final TSolver arg$1) {
  final PreludeBase.TList<Unknown.TUnknown> $12014 = TSolver.unknowns(arg$1);
  final PreludeBase.TList.DList<Unknown.TUnknown> $12015 = $12014.asList();
  if ($12015 != null) {
    return PreludeBase.TList.DCons.<Solution.TSolution>mk(
              Thunk.<Solution.TSolution>shared(
                    new Lazy.D<Solution.TSolution>() {
                      public Solution.TSolution call() {
                        return Solution.$new(
                                  Thunk.<Puzzle.TPuzzle>shared(
                                        new Lazy.D<Puzzle.TPuzzle>() {
                                          public Puzzle.TPuzzle call() {
                                            return TSolver.puzzle(arg$1);
                                          }
                                        }
                                      ),
                                  Thunk.<PreludeBase.TList<Step.TStep>>shared(
                                        new Lazy.D<PreludeBase.TList<Step.TStep>>() {
                                          public PreludeBase.TList<Step.TStep> call() {
                                            return TSolver.steps(arg$1);
                                          }
                                        }
                                      )
                                );
                      }
                    }
                  ),
              PreludeBase.TList.DList.<Solution.TSolution>mk()
            );
  }
  return Thunk.<PreludeBase.TList<Solution.TSolution>>nested(
            new Lazy.D<Lazy<PreludeBase.TList<Solution.TSolution>>>() {
              public Lazy<PreludeBase.TList<Solution.TSolution>> call() {
                return Solver.solutionsHeuristic(arg$1);
              }
            }
          );
}
final public static Lazy<PreludeBase.TList<Solution.TSolution>> solutionsHeuristic(final TSolver arg$1) {
  if (SolverOptions.TSolverOptions.useHeuristics(TSolver.options(arg$1))) {
    final PreludeBase.TTuple2<PreludeBase.TMaybe<Long>, PreludeBase.TMaybe<Long>> gen$3289$10242 =
    Solver.maybeSplit(TSolver.rnd(arg$1));
    final Lazy<PreludeBase.TMaybe<Long>> rnd2$10244 = Thunk.<PreludeBase.TMaybe<Long>>shared(
          new Lazy.D<PreludeBase.TMaybe<Long>>() {
            public PreludeBase.TMaybe<Long> call() {
              final PreludeBase.TMaybe<Long> rnd2$10249 = gen$3289$10242.mem2.call();
              return rnd2$10249;
            }
          }
        );
    final Lazy<PreludeBase.TMaybe<Long>> rnd1$10243 = Thunk.<PreludeBase.TMaybe<Long>>shared(
          new Lazy.D<PreludeBase.TMaybe<Long>>() {
            public PreludeBase.TMaybe<Long> call() {
              final PreludeBase.TMaybe<Long> rnd1$10246 = gen$3289$10242.mem1.call();
              return rnd1$10246;
            }
          }
        );
    final PreludeBase.TList<Next.TNext> $12022 = PreludeList.IListMonoid_$lbrack$rbrack.<
      Next.TNext
    >concat(
          PreludeList.<PreludeBase.TList<Next.TNext>, PreludeBase.TList<Next.TNext>>map(
                new Func.U.D<PreludeBase.TList<Next.TNext>, PreludeBase.TList<Next.TNext>>() {
                  public Lazy<PreludeBase.TList<Next.TNext>> apply(final Lazy<PreludeBase.TList<Next.TNext>> η$12019) {
                    return Thunk.<PreludeBase.TList<Next.TNext>>shared(
                              new Lazy.D<PreludeBase.TList<Next.TNext>>() {
                                public PreludeBase.TList<Next.TNext> call() {
                                  return Solver.<Next.TNext>maybeShuffle(rnd1$10243.call(), η$12019.call());
                                }
                              }
                            );
                  }
                },
                PreludeList.<PreludeBase.TList<Next.TNext>, Func.U<TSolver, PreludeBase.TList<Next.TNext>>>map(
                      new Func.U.D<Func.U<TSolver, PreludeBase.TList<Next.TNext>>, PreludeBase.TList<Next.TNext>>() {
                        public Lazy<PreludeBase.TList<Next.TNext>> apply(
                          final Lazy<Func.U<TSolver, PreludeBase.TList<Next.TNext>>> arg$12020
                        ) {
                          final Func.U<TSolver, PreludeBase.TList<Next.TNext>> f$10250 =
                          arg$12020.call();
                          return Thunk.<PreludeBase.TList<Next.TNext>>nested(
                                    new Lazy.D<Lazy<PreludeBase.TList<Next.TNext>>>() {
                                      public Lazy<PreludeBase.TList<Next.TNext>> call() {
                                        return f$10250.apply(arg$1);
                                      }
                                    }
                                  );
                        }
                      },
                      Solver.heuristics(arg$1)
                    )
              )
        );
    final PreludeBase.TList.DCons<Next.TNext> $12023 = $12022.asCons();
    if ($12023 != null) {
      return Solver.placeAndContinue(TSolver.upd$rnd(arg$1, rnd2$10244), $12023.mem1);
    }
    final PreludeBase.TList.DList<Next.TNext> $12024 = $12022.asList();
    assert $12024 != null;
    return Thunk.<PreludeBase.TList<Solution.TSolution>>nested(
              new Lazy.D<Lazy<PreludeBase.TList<Solution.TSolution>>>() {
                public Lazy<PreludeBase.TList<Solution.TSolution>> call() {
                  return Solver.solutionsStuck(arg$1);
                }
              }
            );
  }
  else {
    return Thunk.<PreludeBase.TList<Solution.TSolution>>nested(
              new Lazy.D<Lazy<PreludeBase.TList<Solution.TSolution>>>() {
                public Lazy<PreludeBase.TList<Solution.TSolution>> call() {
                  return Solver.solutionsStuck(arg$1);
                }
              }
            );
  }
}
final public static Lazy<PreludeBase.TList<Solution.TSolution>> placeAndContinue(
  final TSolver arg$1, final Lazy<Next.TNext> arg$2
) {
  final Lazy<String/*<Character>*/> description$10259 = Thunk.<String/*<Character>*/>shared(
        new Lazy.D<String/*<Character>*/>() {
          public String/*<Character>*/ call() {
            final Next.TNext $12025 = arg$2.call();
            final String/*<Character>*/ description$10270 = $12025.mem2.call();
            return description$10270;
          }
        }
      );
  final Lazy<Placement.TPlacement> placement$10258 = Thunk.<Placement.TPlacement>shared(
        new Lazy.D<Placement.TPlacement>() {
          public Placement.TPlacement call() {
            final Next.TNext $12027 = arg$2.call();
            final Placement.TPlacement placement$10267 = $12027.mem1.call();
            return placement$10267;
          }
        }
      );
  final Lazy<Integer> digit$10262 = Thunk.<Integer>shared(
        new Lazy.D<Integer>() {
          public Integer call() {
            final Placement.TPlacement $12029 = placement$10258.call();
            final int digit$10274 = (int)$12029.mem2.call();
            return digit$10274;
          }
        }
      );
  final Lazy<Integer> cellNumber$10261 = Thunk.<Integer>shared(
        new Lazy.D<Integer>() {
          public Integer call() {
            final Placement.TPlacement $12031 = placement$10258.call();
            final int cellNumber$10271 = (int)$12031.mem1.call();
            return cellNumber$10271;
          }
        }
      );
  final Lazy<TSolver> newSolver$10263 = Thunk.<TSolver>shared(
        new Lazy.D<TSolver>() {
          public TSolver call() {
            return Solver.place(arg$1, cellNumber$10261, digit$10262);
          }
        }
      );
  return Thunk.<PreludeBase.TList<Solution.TSolution>>nested(
            new Lazy.D<Lazy<PreludeBase.TList<Solution.TSolution>>>() {
              public Lazy<PreludeBase.TList<Solution.TSolution>> call() {
                return Solver.solutionsTop(
                          TSolver.upd$steps(
                                newSolver$10263.call(),
                                Thunk.<PreludeBase.TList<Step.TStep>>shared(
                                      new Lazy.D<PreludeBase.TList<Step.TStep>>() {
                                        public PreludeBase.TList<Step.TStep> call() {
                                          return PreludeList.IListMonoid_$lbrack$rbrack.<
                                                Step.TStep
                                              >$plus$plus(
                                                    TSolver.steps(arg$1),
                                                    PreludeBase.TList.DCons.<Step.TStep>mk(
                                                          Step.TStep.mk(
                                                                Thunk.<Puzzle.TPuzzle>shared(
                                                                      new Lazy.D<Puzzle.TPuzzle>() {
                                                                        public Puzzle.TPuzzle call() {
                                                                          return TSolver.puzzle(
                                                                                    newSolver$10263
                                                                                    .call()
                                                                                  );
                                                                        }
                                                                      }
                                                                    ),
                                                                PreludeBase.TMaybe.DJust.<
                                                                  Placement.TPlacement
                                                                >mk(placement$10258),
                                                                description$10259
                                                              ),
                                                          PreludeBase.TList.DList.<Step.TStep>mk()
                                                        )
                                                  );
                                        }
                                      }
                                    )
                              )
                        );
              }
            }
          );
}
final public static PreludeBase.TList<Solution.TSolution> doGuesses(
  final TSolver arg$1, final Lazy<Integer> arg$2, final PreludeBase.TList<Integer> arg$3
) {
  return PreludeList.<Integer, PreludeBase.TList<Solution.TSolution>>foldr(
            new Func.U.D<Integer, Func.U<PreludeBase.TList<Solution.TSolution>, PreludeBase.TList<Solution.TSolution>>>() {
              public Lazy<Func.U<PreludeBase.TList<Solution.TSolution>, PreludeBase.TList<Solution.TSolution>>> apply(
                final Lazy<Integer> arg$12033
              ) {
                return new Func.U.D<PreludeBase.TList<Solution.TSolution>, PreludeBase.TList<Solution.TSolution>>() {
                      public Lazy<PreludeBase.TList<Solution.TSolution>> apply(
                        final Lazy<PreludeBase.TList<Solution.TSolution>> arg$12034
                      ) {
                        return Thunk.<PreludeBase.TList<Solution.TSolution>>shared(
                                  new Lazy.D<PreludeBase.TList<Solution.TSolution>>() {
                                    public PreludeBase.TList<Solution.TSolution> call() {
                                      return PreludeList.IListMonoid_$lbrack$rbrack.<Solution.TSolution>$plus$plus(
                                                Solver.placeAndContinue(
                                                      arg$1,
                                                      Thunk.<Next.TNext>shared(
                                                            new Lazy.D<Next.TNext>() {
                                                              public Next.TNext call() {
                                                                return Next.$new(
                                                                          Thunk.<String/*<Character>*/>lazy(
                                                                                "Guess"
                                                                              ),
                                                                          (int)arg$12033.call(), (int)arg$2.call()
                                                                        );
                                                              }
                                                            }
                                                          )
                                                    ).call(),
                                                arg$12034
                                              );
                                    }
                                  }
                                );
                      }
                    };
              }
            },
            PreludeBase.TList.DList.<Solution.TSolution>mk(), arg$3
          ).call();
}
final public static Lazy<PreludeBase.TList<Solution.TSolution>> solutions(
  final Lazy<SolverOptions.TSolverOptions> arg$1, final Puzzle.TPuzzle arg$2
) {
  return Thunk.<PreludeBase.TList<Solution.TSolution>>nested(
            new Lazy.D<Lazy<PreludeBase.TList<Solution.TSolution>>>() {
              public Lazy<PreludeBase.TList<Solution.TSolution>> call() {
                return Solver.solutionsTop(Solver.$new(arg$1, PreludeBase.TMaybe.DNothing.<Long>mk(), arg$2));
              }
            }
          );
}
final public static boolean isSolvableWith(final Lazy<SolverOptions.TSolverOptions> arg$1, final Puzzle.TPuzzle arg$2) {
  return ! PreludeList.IListView_$lbrack$rbrack.<Solution.TSolution>$null(Solver.solutions(arg$1, arg$2).call());
}
final public static Lazy<PreludeBase.TList<Solution.TSolution>> randomSolutions(
  final Lazy<SolverOptions.TSolverOptions> arg$1, final Lazy<Long> arg$2, final Puzzle.TPuzzle arg$3
) {
  return Thunk.<PreludeBase.TList<Solution.TSolution>>nested(
            new Lazy.D<Lazy<PreludeBase.TList<Solution.TSolution>>>() {
              public Lazy<PreludeBase.TList<Solution.TSolution>> call() {
                return Solver.solutionsTop(Solver.$new(arg$1, PreludeBase.TMaybe.DJust.<Long>mk(arg$2), arg$3));
              }
            }
          );
}
final public static PreludeBase.TList<Solution.TSolution> allRandomSolutions(
  final Lazy<Long> arg$1, final Puzzle.TPuzzle arg$2
) {
  return Solver.randomSolutions(SolverOptions.all, arg$1, arg$2).call();
}

}
