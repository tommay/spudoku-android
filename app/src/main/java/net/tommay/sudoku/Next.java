/*
  Source code is in UTF-8 encoding. The following symbols may appear, among others:
  α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς σ τ υ φ χ ψ ω « • ¦ » ∀ ∃ ∷ … → ← ﬁ ﬂ ƒ
  If you can't read this, you're out of luck. This code was generated with the frege compiler version 3.24.141
  from ./net/tommay/sudoku/Next.fr Do not edit this file! Instead, edit the source file and recompile.
*/

package net.tommay.sudoku;

import frege.run7.Func;
import frege.run7.Lazy;
import frege.run7.Thunk;
import frege.run.Kind;
import frege.run.RunTM;
import frege.runtime.Meta;
import frege.runtime.Phantom.RealWorld;
import frege.Prelude;
import frege.control.Category;
import frege.control.Semigroupoid;
import frege.java.IO;
import frege.java.Lang;
import frege.java.Util;
import frege.java.util.Regex;
import frege.prelude.Maybe;
import frege.prelude.PreludeArrays;
import frege.prelude.PreludeBase;
import frege.prelude.PreludeIO;
import frege.prelude.PreludeList;
import frege.prelude.PreludeMonad;
import frege.prelude.PreludeText;
import net.tommay.sudoku.Digit;
import net.tommay.sudoku.Placement;

@SuppressWarnings("unused")
@Meta.FregePackage(
  source="./net/tommay/sudoku/Next.fr", time=1481937170316L, jmajor=1, jminor=7,
  imps={
    "net.tommay.sudoku.Digit", "net.tommay.sudoku.Placement", "frege.Prelude", "frege.prelude.PreludeArrays",
    "frege.prelude.PreludeBase", "frege.prelude.PreludeIO", "frege.prelude.PreludeList", "frege.prelude.PreludeMonad",
    "frege.prelude.PreludeText", "frege.java.util.Regex"
  },
  nmss={
    "Digit", "Placement", "Prelude", "PreludeArrays", "PreludeBase", "PreludeIO", "PreludeList",
    "PreludeMonad", "PreludeText", "Regexp"
  },
  symas={}, symcs={}, symis={},
  symts={
    @Meta.SymT(
      offset=141, name=@Meta.QName(kind=0, pack="net.tommay.sudoku.Next", base="Next"), typ=0,
      kind=5,
      cons={
        @Meta.SymD(
          offset=148, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.Next", base="Next", member="Next"), cid=0,
          typ=3, fields={@Meta.Field(offset=0, sigma=1, strict=false), @Meta.Field(offset=0, sigma=2, strict=false)}
        )
      },
      lnks={}, funs={}, prod=true
    )
  },
  symvs={
    @Meta.SymV(
      offset=171, name=@Meta.QName(pack="net.tommay.sudoku.Next", base="new"), stri="s(uss)", sig=5,
      depth=3, rkind=49
    )
  },
  symls={
    @Meta.SymL(
      offset=148, name=@Meta.QName(pack="net.tommay.sudoku.Next", base="Next"),
      alias=@Meta.QName(kind=2, pack="net.tommay.sudoku.Next", base="Next", member="Next")
    )
  },
  taus={
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="net.tommay.sudoku.Next", base="Next")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="net.tommay.sudoku.Placement", base="Placement")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="StringJ")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Char")}),
    @Meta.Tau(kind=0, suba=2, subb=3), @Meta.Tau(kind=9),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Int")})
  },
  rhos={
    @Meta.Rho(rhofun=false, rhotau=0), @Meta.Rho(rhofun=false, rhotau=1), @Meta.Rho(rhofun=false, rhotau=4),
    @Meta.Rho(sigma=2, rhotau=0), @Meta.Rho(sigma=1, rhotau=3), @Meta.Rho(rhofun=false, rhotau=6),
    @Meta.Rho(sigma=4, rhotau=0), @Meta.Rho(sigma=4, rhotau=6), @Meta.Rho(sigma=2, rhotau=7)
  },
  sigmas={
    @Meta.Sigma(rho=0), @Meta.Sigma(rho=1), @Meta.Sigma(rho=2), @Meta.Sigma(rho=4), @Meta.Sigma(rho=5),
    @Meta.Sigma(rho=8)
  },
  exprs={@Meta.Expr()}
)
final public class Next  {
  



final public static class TNext implements frege.runtime.Value, Lazy<TNext> {
  private TNext(final Lazy<Placement.TPlacement> arg$1, final Lazy<String/*<Character>*/> arg$2) {
    mem1 = Thunk.<Placement.TPlacement>shared(arg$1);
    mem2 = Thunk.<String/*<Character>*/>shared(arg$2);
  }
  final public int constructor() {
    return 0;
  }
  final public static TNext mk(final Lazy<Placement.TPlacement> arg$1, final Lazy<String/*<Character>*/> arg$2) {
    return new TNext(arg$1, arg$2);
  }
  final public Lazy<Placement.TPlacement> mem1  ;
  final public Lazy<String/*<Character>*/> mem2  ;
  final public TNext call() {
    return this;
  }
  final public boolean isShared() {
    return true;
  }
  final public Thunk<TNext> asThunk() {
    return null;
  }
  @SuppressWarnings("unchecked") final public TNext simsalabim() {
    return (TNext)this;
  }
}
final public static TNext $new(final Lazy<String/*<Character>*/> arg$1, final int arg$2, final int arg$3) {
  return TNext.mk(Placement.TPlacement.mk(Thunk.<Integer>lazy(arg$3), Thunk.<Integer>lazy(arg$2)), arg$1);
}

}
