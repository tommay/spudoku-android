/*
  Source code is in UTF-8 encoding. The following symbols may appear, among others:
  α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς σ τ υ φ χ ψ ω « • ¦ » ∀ ∃ ∷ … → ← ﬁ ﬂ ƒ
  If you can't read this, you're out of luck. This code was generated with the frege compiler version 3.24.141
  from ./net/tommay/sudoku/Creater.fr Do not edit this file! Instead, edit the source file and recompile.
*/

package net.tommay.sudoku;

import frege.run7.Func;
import frege.run7.Lazy;
import frege.run7.Thunk;
import frege.run.Kind;
import frege.run.RunTM;
import frege.runtime.Meta;
import frege.runtime.Phantom.RealWorld;
import frege.Prelude;
import frege.control.Category;
import frege.control.Semigroupoid;
import frege.data.Bits;
import frege.data.Char;
import frege.data.Foldable;
import frege.data.HashMap;
import frege.data.Iterators;
import frege.data.JSON;
import frege.data.List;
import frege.data.MicroParsec;
import frege.data.Monoid;
import frege.data.Traversable;
import frege.data.wrapper.Const;
import frege.data.wrapper.Dual;
import frege.data.wrapper.Endo;
import frege.data.wrapper.Identity;
import frege.data.wrapper.Num;
import frege.java.IO;
import frege.java.Lang;
import frege.java.Util;
import frege.java.util.Regex;
import frege.lib.PP;
import frege.prelude.Maybe;
import frege.prelude.PreludeArrays;
import frege.prelude.PreludeBase;
import frege.prelude.PreludeIO;
import frege.prelude.PreludeList;
import frege.prelude.PreludeMonad;
import frege.prelude.PreludeText;
import frege.system.Random;
import net.tommay.sudoku.Digit;
import net.tommay.sudoku.EasyPeasy;
import net.tommay.sudoku.ExclusionSet;
import net.tommay.sudoku.Next;
import net.tommay.sudoku.Placement;
import net.tommay.sudoku.Puzzle;
import net.tommay.sudoku.Solution;
import net.tommay.sudoku.Solver;
import net.tommay.sudoku.SolverOptions;
import net.tommay.sudoku.SolverUtil;
import net.tommay.sudoku.Step;
import net.tommay.sudoku.TrickySet;
import net.tommay.sudoku.Unknown;

@SuppressWarnings("unused")
@Meta.FregePackage(
  source="./net/tommay/sudoku/Creater.fr", time=1481937174049L, jmajor=1, jminor=7,
  imps={
    "frege.Prelude", "frege.prelude.PreludeArrays", "frege.prelude.PreludeBase", "frege.prelude.PreludeIO",
    "frege.prelude.PreludeList", "frege.prelude.PreludeMonad", "frege.prelude.PreludeText", "net.tommay.sudoku.Puzzle",
    "frege.system.Random", "frege.java.util.Regex", "net.tommay.sudoku.Solution", "net.tommay.sudoku.Solver",
    "net.tommay.sudoku.Util"
  },
  nmss={
    "Prelude", "PreludeArrays", "PreludeBase", "PreludeIO", "PreludeList", "PreludeMonad", "PreludeText",
    "Puzzle", "Random", "Regexp", "Solution", "Solver", "Util"
  },
  symas={}, symcs={}, symis={}, symts={},
  symvs={
    @Meta.SymV(
      offset=267, name=@Meta.QName(pack="net.tommay.sudoku.Creater", base="createWithSolution"), stri="s(uus)",
      sig=4, depth=3, rkind=49
    ),
    @Meta.SymV(
      offset=1308, name=@Meta.QName(pack="net.tommay.sudoku.Creater", base="createList"), stri="s(uus)",
      sig=5, depth=3, rkind=177
    ),
    @Meta.SymV(
      offset=605, name=@Meta.QName(pack="net.tommay.sudoku.Creater", base="create"), stri="s(uus)",
      sig=6, depth=3, rkind=49
    )
  },
  symls={},
  taus={
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.system.Random", base="StdGen")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="[]")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Int")}),
    @Meta.Tau(kind=0, suba=1, subb=2), @Meta.Tau(kind=0, suba=1, subb=3),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="net.tommay.sudoku.Puzzle", base="Puzzle")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="net.tommay.sudoku.Solution", base="Solution")}),
    @Meta.Tau(kind=0, suba=1, subb=6),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="(,)")}),
    @Meta.Tau(kind=0, suba=8, subb=5), @Meta.Tau(kind=0, suba=9, subb=5), @Meta.Tau(kind=0, suba=1, subb=5)
  },
  rhos={
    @Meta.Rho(rhofun=false, rhotau=0), @Meta.Rho(rhofun=false, rhotau=4), @Meta.Rho(rhofun=false, rhotau=5),
    @Meta.Rho(rhofun=false, rhotau=7), @Meta.Rho(sigma=2, rhotau=3), @Meta.Rho(rhofun=false, rhotau=10),
    @Meta.Rho(sigma=3, rhotau=5), @Meta.Rho(sigma=1, rhotau=6), @Meta.Rho(sigma=0, rhotau=7),
    @Meta.Rho(rhofun=false, rhotau=11), @Meta.Rho(sigma=3, rhotau=9), @Meta.Rho(sigma=1, rhotau=10),
    @Meta.Rho(sigma=0, rhotau=11), @Meta.Rho(sigma=3, rhotau=2), @Meta.Rho(sigma=1, rhotau=13),
    @Meta.Rho(sigma=0, rhotau=14)
  },
  sigmas={
    @Meta.Sigma(rho=0), @Meta.Sigma(rho=1), @Meta.Sigma(rho=2), @Meta.Sigma(rho=4), @Meta.Sigma(rho=8),
    @Meta.Sigma(rho=12), @Meta.Sigma(rho=15)
  },
  exprs={@Meta.Expr()}
)
final public class Creater  {
  




final public static Puzzle.TPuzzle randomSolvedPuzzle(final Lazy<Long> arg$1) {
  return Solution.TSolution.puzzle(
            PreludeList.IListView_$lbrack$rbrack.<Solution.TSolution>head(Solver.allRandomSolutions(arg$1, Puzzle.empty))
          );
}
final public static Puzzle.TPuzzle create$tick(
  final Lazy<Puzzle.TPuzzle> arg$1, final PreludeBase.TList<PreludeBase.TList<Integer>> arg$2,
  final Func.U<Puzzle.TPuzzle, PreludeBase.TList<Solution.TSolution>> arg$3
) {
  return PreludeList.<PreludeBase.TList<Integer>, Puzzle.TPuzzle>foldr(
            new Func.U.D<PreludeBase.TList<Integer>, Func.U<Puzzle.TPuzzle, Puzzle.TPuzzle>>() {
              public Lazy<Func.U<Puzzle.TPuzzle, Puzzle.TPuzzle>> apply(final Lazy<PreludeBase.TList<Integer>> arg$10200) {
                return new Func.U.D<Puzzle.TPuzzle, Puzzle.TPuzzle>() {
                      public Lazy<Puzzle.TPuzzle> apply(final Lazy<Puzzle.TPuzzle> arg$10201) {
                        final Lazy<Puzzle.TPuzzle> newPuzzle$10068 = Thunk.<Puzzle.TPuzzle>shared(
                              new Lazy.D<Puzzle.TPuzzle>() {
                                public Puzzle.TPuzzle call() {
                                  return Puzzle.remove(arg$10201.call(), arg$10200);
                                }
                              }
                            );
                        final PreludeBase.TList<Solution.TSolution> $10202 = arg$3.apply(
                              newPuzzle$10068
                            ).call();
                        final PreludeBase.TList.DCons<Solution.TSolution> $10203 = $10202
                        .asCons();
                        if ($10203 != null) {
                          final PreludeBase.TList<Solution.TSolution> $10204 = $10203.mem2
                          .call();
                          final PreludeBase.TList.DList<Solution.TSolution> $10205 = $10204
                          .asList();
                          if ($10205 != null) {
                            return newPuzzle$10068;
                          }
                        }
                        return arg$10201;
                      }
                    };
              }
            },
            arg$1, arg$2
          ).call();
}
final public static PreludeBase.TTuple2<Puzzle.TPuzzle, Puzzle.TPuzzle> createWithSolution(
  final Lazy<Long> arg$1, final Lazy<PreludeBase.TList<PreludeBase.TList<Integer>>> arg$2,
  final Func.U<Puzzle.TPuzzle, PreludeBase.TList<Solution.TSolution>> arg$3
) {
  final Lazy<PreludeBase.TTuple2<Long, Long>> gen$412$10050 = Thunk.<PreludeBase.TTuple2<Long, Long>>shared(
        new Lazy.D<PreludeBase.TTuple2<Long, Long>>() {
          public PreludeBase.TTuple2<Long, Long> call() {
            return Random.IRandomGen_StdGen.split(arg$1);
          }
        }
      );
  final Lazy<Long> rnd2$10052 = Thunk.<Long>shared(
        new Lazy.D<Long>() {
          public Long call() {
            final PreludeBase.TTuple2<Long, Long> $10206 = gen$412$10050.call();
            final long rnd2$10059 = (long)$10206.mem2.call();
            return rnd2$10059;
          }
        }
      );
  final Lazy<Long> rnd1$10051 = Thunk.<Long>shared(
        new Lazy.D<Long>() {
          public Long call() {
            final PreludeBase.TTuple2<Long, Long> $10208 = gen$412$10050.call();
            final long rnd1$10056 = (long)$10208.mem1.call();
            return rnd1$10056;
          }
        }
      );
  final Lazy<Puzzle.TPuzzle> solvedPuzzle$10053 = Thunk.<Puzzle.TPuzzle>shared(
        new Lazy.D<Puzzle.TPuzzle>() {
          public Puzzle.TPuzzle call() {
            return Creater.randomSolvedPuzzle(rnd1$10051);
          }
        }
      );
  return PreludeBase.TTuple2.<Puzzle.TPuzzle, Puzzle.TPuzzle>mk(
            Thunk.<Puzzle.TPuzzle>shared(
                  new Lazy.D<Puzzle.TPuzzle>() {
                    public Puzzle.TPuzzle call() {
                      return Creater.create$tick(
                                solvedPuzzle$10053,
                                net.tommay.sudoku.Util.<PreludeBase.TList<Integer>>shuffle(rnd2$10052, arg$2.call()), arg$3
                              );
                    }
                  }
                ),
            solvedPuzzle$10053
          );
}
final public static Puzzle.TPuzzle create(
  final Lazy<Long> arg$1, final Lazy<PreludeBase.TList<PreludeBase.TList<Integer>>> arg$2,
  final Func.U<Puzzle.TPuzzle, PreludeBase.TList<Solution.TSolution>> arg$3
) {
  return PreludeBase.<Puzzle.TPuzzle, Puzzle.TPuzzle>fst(Creater.createWithSolution(arg$1, arg$2, arg$3));
}
final public static PreludeBase.TList<Puzzle.TPuzzle> createList(
  final Lazy<Long> arg$1, final Lazy<PreludeBase.TList<PreludeBase.TList<Integer>>> arg$2,
  final Func.U<Puzzle.TPuzzle, PreludeBase.TList<Solution.TSolution>> arg$3
) {
  final Lazy<PreludeBase.TTuple2<Long, Long>> gen$1429$10074 = Thunk.<PreludeBase.TTuple2<Long, Long>>shared(
        new Lazy.D<PreludeBase.TTuple2<Long, Long>>() {
          public PreludeBase.TTuple2<Long, Long> call() {
            return Random.IRandomGen_StdGen.split(arg$1);
          }
        }
      );
  final Lazy<Long> rnd2$10076 = Thunk.<Long>shared(
        new Lazy.D<Long>() {
          public Long call() {
            final PreludeBase.TTuple2<Long, Long> $10210 = gen$1429$10074.call();
            final long rnd2$10081 = (long)$10210.mem2.call();
            return rnd2$10081;
          }
        }
      );
  final Lazy<Long> rnd1$10075 = Thunk.<Long>shared(
        new Lazy.D<Long>() {
          public Long call() {
            final PreludeBase.TTuple2<Long, Long> $10212 = gen$1429$10074.call();
            final long rnd1$10078 = (long)$10212.mem1.call();
            return rnd1$10078;
          }
        }
      );
  return PreludeBase.TList.DCons.<Puzzle.TPuzzle>mk(
            Thunk.<Puzzle.TPuzzle>shared(
                  new Lazy.D<Puzzle.TPuzzle>() {
                    public Puzzle.TPuzzle call() {
                      return Creater.create(rnd1$10075, arg$2, arg$3);
                    }
                  }
                ),
            Thunk.<PreludeBase.TList<Puzzle.TPuzzle>>shared(
                  new Lazy.D<PreludeBase.TList<Puzzle.TPuzzle>>() {
                    public PreludeBase.TList<Puzzle.TPuzzle> call() {
                      return Creater.createList(rnd2$10076, arg$2, arg$3);
                    }
                  }
                )
          );
}

}
