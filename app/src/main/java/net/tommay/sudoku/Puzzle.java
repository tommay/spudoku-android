/*
  Source code is in UTF-8 encoding. The following symbols may appear, among others:
  α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς σ τ υ φ χ ψ ω « • ¦ » ∀ ∃ ∷ … → ← ﬁ ﬂ ƒ
  If you can't read this, you're out of luck. This code was generated with the frege compiler version 3.24.141
  from ./net/tommay/sudoku/Puzzle.fr Do not edit this file! Instead, edit the source file and recompile.
*/

package net.tommay.sudoku;

import frege.run7.Func;
import frege.run7.Lazy;
import frege.run7.Thunk;
import frege.run.Kind;
import frege.run.RunTM;
import frege.runtime.Meta;
import frege.runtime.Phantom.RealWorld;
import frege.Prelude;
import frege.control.Category;
import frege.control.Semigroupoid;
import frege.data.Bits;
import frege.data.Char;
import frege.data.Foldable;
import frege.data.HashMap;
import frege.data.Iterators;
import frege.data.JSON;
import frege.data.List;
import frege.data.MicroParsec;
import frege.data.Monoid;
import frege.data.Traversable;
import frege.data.wrapper.Const;
import frege.data.wrapper.Dual;
import frege.data.wrapper.Endo;
import frege.data.wrapper.Identity;
import frege.data.wrapper.Num;
import frege.java.IO;
import frege.java.Lang;
import frege.java.Util;
import frege.java.util.Regex;
import frege.lib.PP;
import frege.prelude.Maybe;
import frege.prelude.PreludeArrays;
import frege.prelude.PreludeBase;
import frege.prelude.PreludeIO;
import frege.prelude.PreludeList;
import frege.prelude.PreludeMonad;
import frege.prelude.PreludeText;
import frege.system.Random;
import net.tommay.sudoku.Digit;

@SuppressWarnings("unused")
@Meta.FregePackage(
  source="./net/tommay/sudoku/Puzzle.fr", time=1481937170162L, jmajor=1, jminor=7,
  imps={
    "frege.data.Char", "net.tommay.sudoku.Digit", "frege.data.List", "frege.data.HashMap", "frege.Prelude",
    "frege.prelude.PreludeArrays", "frege.prelude.PreludeBase", "frege.prelude.PreludeIO", "frege.prelude.PreludeList",
    "frege.prelude.PreludeMonad", "frege.prelude.PreludeText", "frege.java.util.Regex", "net.tommay.sudoku.Util"
  },
  nmss={
    "Char", "Digit", "List", "Map", "Prelude", "PreludeArrays", "PreludeBase", "PreludeIO", "PreludeList",
    "PreludeMonad", "PreludeText", "Regexp", "Util"
  },
  symas={
    @Meta.SymA(
      offset=247, name=@Meta.QName(kind=0, pack="net.tommay.sudoku.Puzzle", base="Map"), vars={},
      typ=0, kind=1
    )
  },
  symcs={}, symis={},
  symts={
    @Meta.SymT(
      offset=300, name=@Meta.QName(kind=0, pack="net.tommay.sudoku.Puzzle", base="Puzzle"), typ=1,
      kind=1,
      cons={
        @Meta.SymD(
          offset=309, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.Puzzle", base="Puzzle", member="Puzzle"), cid=0,
          typ=3, fields={@Meta.Field(name="placed", offset=320, sigma=2, strict=false)}, priv=true,
          publik=false
        )
      },
      lnks={},
      funs={
        @Meta.SymV(
          offset=321, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.Puzzle", base="Puzzle", member="upd$placed"),
          stri="s(su)", sig=4, depth=2, rkind=49, doc="update field @placed@"
        ),
        @Meta.SymV(
          offset=321, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.Puzzle", base="Puzzle", member="has$placed"),
          stri="s(u)", sig=6, depth=1, rkind=49, doc="check if constructor has field @placed@"
        ),
        @Meta.SymV(
          offset=321, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.Puzzle", base="Puzzle", member="chg$placed"),
          stri="s(ss)", sig=8, depth=2, rkind=49, doc="change field @placed@"
        ),
        @Meta.SymV(
          offset=321, name=@Meta.QName(kind=2, pack="net.tommay.sudoku.Puzzle", base="Puzzle", member="placed"),
          stri="s(s)", sig=9, depth=1, rkind=49, doc="access field @placed@"
        )
      },
      prod=true
    )
  },
  symvs={
    @Meta.SymV(
      offset=2269, name=@Meta.QName(pack="net.tommay.sudoku.Puzzle", base="toPuzzleString"), stri="s(u)",
      sig=10, depth=1, rkind=49
    ),
    @Meta.SymV(
      offset=1951, name=@Meta.QName(pack="net.tommay.sudoku.Puzzle", base="toString"), stri="s(u)",
      sig=11, depth=1, rkind=49
    ),
    @Meta.SymV(
      offset=959, name=@Meta.QName(pack="net.tommay.sudoku.Puzzle", base="size"), stri="s(s)",
      sig=12, depth=1, rkind=49
    ),
    @Meta.SymV(
      offset=691, name=@Meta.QName(pack="net.tommay.sudoku.Puzzle", base="remove"), stri="s(su)",
      sig=14, depth=2, rkind=49
    ),
    @Meta.SymV(
      offset=543, name=@Meta.QName(pack="net.tommay.sudoku.Puzzle", base="place"), stri="s(suu)",
      sig=16, depth=3, rkind=49
    ),
    @Meta.SymV(
      offset=1145, name=@Meta.QName(pack="net.tommay.sudoku.Puzzle", base="fromString"), stri="s(u)",
      sig=18, depth=1, rkind=49
    ),
    @Meta.SymV(
      offset=395, name=@Meta.QName(pack="net.tommay.sudoku.Puzzle", base="empty"), stri="s",
      sig=1, depth=0, rkind=49
    ),
    @Meta.SymV(
      offset=465, name=@Meta.QName(pack="net.tommay.sudoku.Puzzle", base="each"), stri="s(s)",
      sig=19, depth=1, rkind=49
    )
  },
  symls={},
  taus={
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.data.HashMap", base="HashMap")}), @Meta.Tau(kind=9),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="net.tommay.sudoku.Puzzle", base="Puzzle")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Int")}),
    @Meta.Tau(kind=0, suba=0, subb=3), @Meta.Tau(kind=0, suba=4, subb=3), @Meta.Tau(suba=1, tvar="α"),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Bool")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="->")}),
    @Meta.Tau(kind=0, suba=8, subb=5), @Meta.Tau(kind=0, suba=9, subb=5),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="StringJ")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Char")}),
    @Meta.Tau(kind=0, suba=11, subb=12),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="[]")}),
    @Meta.Tau(kind=0, suba=14, subb=12), @Meta.Tau(kind=0, suba=14, subb=3),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="(,)")}),
    @Meta.Tau(kind=0, suba=17, subb=3), @Meta.Tau(kind=0, suba=18, subb=3), @Meta.Tau(kind=0, suba=14, subb=19)
  },
  rhos={
    @Meta.Rho(rhofun=false, rhotau=0), @Meta.Rho(rhofun=false, rhotau=2), @Meta.Rho(rhofun=false, rhotau=5),
    @Meta.Rho(sigma=2, rhotau=1), @Meta.Rho(sigma=1, rhotau=3), @Meta.Rho(rhofun=false, rhotau=6),
    @Meta.Rho(rhofun=false, rhotau=7), @Meta.Rho(sigma=5, rhotau=6), @Meta.Rho(rhofun=false, rhotau=10),
    @Meta.Rho(sigma=7, rhotau=1), @Meta.Rho(sigma=1, rhotau=9), @Meta.Rho(sigma=1, rhotau=2),
    @Meta.Rho(rhofun=false, rhotau=13), @Meta.Rho(sigma=1, rhotau=12), @Meta.Rho(rhofun=false, rhotau=15),
    @Meta.Rho(sigma=1, rhotau=14), @Meta.Rho(rhofun=false, rhotau=3), @Meta.Rho(sigma=1, rhotau=16),
    @Meta.Rho(rhofun=false, rhotau=16), @Meta.Rho(sigma=13, rhotau=1), @Meta.Rho(sigma=1, rhotau=19),
    @Meta.Rho(sigma=15, rhotau=1), @Meta.Rho(sigma=15, rhotau=21), @Meta.Rho(sigma=1, rhotau=22),
    @Meta.Rho(sigma=17, rhotau=1), @Meta.Rho(rhofun=false, rhotau=20), @Meta.Rho(sigma=1, rhotau=25)
  },
  sigmas={
    @Meta.Sigma(rho=0), @Meta.Sigma(rho=1), @Meta.Sigma(rho=2), @Meta.Sigma(rho=3), @Meta.Sigma(rho=4),
    @Meta.Sigma(rho=5), @Meta.Sigma(bound={"α"}, kinds={1}, rho=7), @Meta.Sigma(rho=8), @Meta.Sigma(rho=10),
    @Meta.Sigma(rho=11), @Meta.Sigma(rho=13), @Meta.Sigma(rho=15), @Meta.Sigma(rho=17), @Meta.Sigma(rho=18),
    @Meta.Sigma(rho=20), @Meta.Sigma(rho=16), @Meta.Sigma(rho=23), @Meta.Sigma(rho=12), @Meta.Sigma(rho=24),
    @Meta.Sigma(rho=26)
  },
  exprs={@Meta.Expr()}
)
final public class Puzzle  {
  



final public static class TPuzzle implements frege.runtime.Value, Lazy<TPuzzle> {
  private TPuzzle(final Lazy<HashMap.THashMap<Integer, Integer>> arg$1) {
    mem$placed = Thunk.<HashMap.THashMap<Integer, Integer>>shared(arg$1);
  }
  final public int constructor() {
    return 0;
  }
  final public static TPuzzle mk(final Lazy<HashMap.THashMap<Integer, Integer>> arg$1) {
    return new TPuzzle(arg$1);
  }
  final public Lazy<HashMap.THashMap<Integer, Integer>> mem$placed  ;
  final public TPuzzle call() {
    return this;
  }
  final public boolean isShared() {
    return true;
  }
  final public Thunk<TPuzzle> asThunk() {
    return null;
  }
  @SuppressWarnings("unchecked") final public TPuzzle simsalabim() {
    return (TPuzzle)this;
  }
  final public static TPuzzle upd$placed(final TPuzzle arg$1, final Lazy<HashMap.THashMap<Integer, Integer>> arg$2) {
    return TPuzzle.mk(arg$2);
  }
  final public static <α> boolean has$placed(final Lazy<α> arg$1) {
    return true;
  }
  final public static TPuzzle chg$placed(
    final TPuzzle arg$1, final Func.U<HashMap.THashMap<Integer, Integer>, HashMap.THashMap<Integer, Integer>> arg$2
  ) {
    return TPuzzle.mk(
              Thunk.<HashMap.THashMap<Integer, Integer>>nested(
                    new Lazy.D<Lazy<HashMap.THashMap<Integer, Integer>>>() {
                      public Lazy<HashMap.THashMap<Integer, Integer>> call() {
                        return arg$2.apply(arg$1.mem$placed);
                      }
                    }
                  )
            );
  }
  final public static HashMap.THashMap<Integer, Integer> placed(final TPuzzle arg$1) {
    final HashMap.THashMap<Integer, Integer> a1$9877 = arg$1.mem$placed.call();
    return a1$9877;
  }
}
final public static PreludeBase.TList<PreludeBase.TMaybe<Integer>> toDigits(final String/*<Character>*/ arg$1) {
  final class Let$10325  {
    final Let$10325 let$10325 = this;
    final public PreludeBase.TList<PreludeBase.TMaybe<Integer>> $lc999$9903(final PreludeBase.TList<Character> arg$2) {
      final PreludeBase.TList.DCons<Character> $10326 = arg$2.asCons();
      if ($10326 != null) {
        final char $char$9905 = (char)$10326.mem1.call();
        if ('-' == $char$9905) {
          return PreludeBase.<PreludeBase.TMaybe<Integer>>$excl$colon(
                    PreludeBase.TMaybe.DNothing.<Integer>mk(),
                    Thunk.<PreludeBase.TList<PreludeBase.TMaybe<Integer>>>shared(
                          new Lazy.D<PreludeBase.TList<PreludeBase.TMaybe<Integer>>>() {
                            public PreludeBase.TList<PreludeBase.TMaybe<Integer>> call() {
                              return let$10325.$lc999$9903($10326.mem2.call());
                            }
                          }
                        )
                  );
        }
        return PreludeBase.<PreludeBase.TMaybe<Integer>>$excl$colon(
                  PreludeBase.TMaybe.DJust.<Integer>mk(
                        Thunk.<Integer>shared(
                              new Lazy.D<Integer>() {
                                public Integer call() {
                                  return Char.digitToInt($char$9905);
                                }
                              }
                            )
                      ),
                  Thunk.<PreludeBase.TList<PreludeBase.TMaybe<Integer>>>shared(
                        new Lazy.D<PreludeBase.TList<PreludeBase.TMaybe<Integer>>>() {
                          public PreludeBase.TList<PreludeBase.TMaybe<Integer>> call() {
                            return let$10325.$lc999$9903($10326.mem2.call());
                          }
                        }
                      )
                );
      }
      final PreludeBase.TList.DList<Character> $10328 = arg$2.asList();
      assert $10328 != null;
      return PreludeBase.TList.DList.<PreludeBase.TMaybe<Integer>>mk();
    }
  }
  final Let$10325 let$10325 = new Let$10325();
  return let$10325.$lc999$9903(PreludeList.IListView_StringJ.<Character>toList(arg$1));
}
final public static int size(final TPuzzle arg$1) {
  return HashMap.<Integer, Integer>size(TPuzzle.placed(arg$1));
}
final public static TPuzzle remove(final TPuzzle arg$1, final Lazy<PreludeBase.TList<Integer>> arg$2) {
  return TPuzzle.upd$placed(
            arg$1,
            Thunk.<HashMap.THashMap<Integer, Integer>>nested(
                  new Lazy.D<Lazy<HashMap.THashMap<Integer, Integer>>>() {
                    public Lazy<HashMap.THashMap<Integer, Integer>> call() {
                      return PreludeList.<Integer, HashMap.THashMap<Integer, Integer>>foldr(
                                new Func.U.D<
                                  Integer, Func.U<HashMap.THashMap<Integer, Integer>, HashMap.THashMap<Integer, Integer>>
                                >() {
                                  public Lazy<Func.U<
                                    HashMap.THashMap<Integer, Integer>, HashMap.THashMap<Integer, Integer>
                                  >> apply(final Lazy<Integer> arg$10329) {
                                    final int cellNumber$9892 = (int)arg$10329.call();
                                    return new Func.U.D<
                                          HashMap.THashMap<Integer, Integer>, HashMap.THashMap<Integer, Integer>
                                        >() {
                                          public Lazy<HashMap.THashMap<Integer, Integer>> apply(
                                            final Lazy<HashMap.THashMap<Integer, Integer>> arg$10331
                                          ) {
                                            final HashMap.THashMap<Integer, Integer> map$9893 =
                                            arg$10331.call();
                                            return Thunk.<HashMap.THashMap<Integer, Integer>>shared(
                                                      new Lazy.D<HashMap.THashMap<Integer, Integer>>() {
                                                        public HashMap.THashMap<Integer, Integer> call() {
                                                          return HashMap.<Integer, Integer>delete(
                                                                    PreludeBase.IEq_Int.it, cellNumber$9892,
                                                                    map$9893
                                                                  );
                                                        }
                                                      }
                                                    );
                                          }
                                        };
                                  }
                                },
                                Thunk.<HashMap.THashMap<Integer, Integer>>shared(
                                      new Lazy.D<HashMap.THashMap<Integer, Integer>>() {
                                        public HashMap.THashMap<Integer, Integer> call() {
                                          return TPuzzle.placed(arg$1);
                                        }
                                      }
                                    ),
                                arg$2.call()
                              );
                    }
                  }
                )
          );
}
final public static TPuzzle place(final TPuzzle arg$1, final Lazy<Integer> arg$2, final Lazy<Integer> arg$3) {
  return TPuzzle.upd$placed(
            arg$1,
            Thunk.<HashMap.THashMap<Integer, Integer>>shared(
                  new Lazy.D<HashMap.THashMap<Integer, Integer>>() {
                    public HashMap.THashMap<Integer, Integer> call() {
                      return HashMap.<Integer, Integer>insert(
                                PreludeBase.IEq_Int.it, (int)arg$2.call(), arg$3, TPuzzle.placed(arg$1)
                              );
                    }
                  }
                )
          );
}
final public static TPuzzle empty = TPuzzle.mk(HashMap.IListEmpty_HashMap.<Integer, Integer>empty());
final public static TPuzzle fromString(final Lazy<String/*<Character>*/> arg$1) {
  return PreludeList.<PreludeBase.TTuple2<Integer, PreludeBase.TMaybe<Integer>>, TPuzzle>foldr(
            new Func.U.D<PreludeBase.TTuple2<Integer, PreludeBase.TMaybe<Integer>>, Func.U<TPuzzle, TPuzzle>>() {
              public Lazy<Func.U<TPuzzle, TPuzzle>> apply(
                final Lazy<PreludeBase.TTuple2<Integer, PreludeBase.TMaybe<Integer>>> arg$10333
              ) {
                final PreludeBase.TTuple2<Integer, PreludeBase.TMaybe<Integer>> $10334 =
                arg$10333.call();
                final PreludeBase.TMaybe<Integer> digit$9899 = $10334.mem2.call();
                return new Func.U.D<TPuzzle, TPuzzle>() {
                      public Lazy<TPuzzle> apply(final Lazy<TPuzzle> arg$10336) {
                        final TPuzzle $this$9900 = arg$10336.call();
                        final PreludeBase.TMaybe.DNothing<Integer> $10338 = digit$9899
                        .asNothing();
                        if ($10338 != null) {
                          return $this$9900;
                        }
                        final PreludeBase.TMaybe.DJust<Integer> $10339 = digit$9899.asJust();
                        assert $10339 != null;
                        return Thunk.<TPuzzle>shared(
                                  new Lazy.D<TPuzzle>() {
                                    public TPuzzle call() {
                                      return Puzzle.place($this$9900, $10334.mem1, $10339.mem1);
                                    }
                                  }
                                );
                      }
                    };
              }
            },
            Puzzle.empty,
            PreludeList.<Integer, PreludeBase.TMaybe<Integer>>zip(
                  PreludeBase.IEnum_Int.enumFromTo(0, 80),
                  Thunk.<PreludeBase.TList<PreludeBase.TMaybe<Integer>>>shared(
                        new Lazy.D<PreludeBase.TList<PreludeBase.TMaybe<Integer>>>() {
                          public PreludeBase.TList<PreludeBase.TMaybe<Integer>> call() {
                            return Puzzle.toDigits(arg$1.call());
                          }
                        }
                      )
                )
          ).call();
}
final public static PreludeBase.TList<PreludeBase.TTuple2<Integer, Integer>> each(final TPuzzle arg$1) {
  return HashMap.<Integer, Integer>each(TPuzzle.placed(arg$1));
}
final public static PreludeBase.TList<Character> toString(final Lazy<TPuzzle> arg$1) {
  return PreludeList.<Character, PreludeBase.TTuple2<Integer, Character>>map(
            new Func.U.D<PreludeBase.TTuple2<Integer, Character>, Character>() {
              public Lazy<Character> apply(final Lazy<PreludeBase.TTuple2<Integer, Character>> η$10340) {
                return Thunk.<Character>shared(
                          new Lazy.D<Character>() {
                            public Character call() {
                              return PreludeBase.<Character, Integer>snd(η$10340.call());
                            }
                          }
                        );
              }
            },
            List.<PreludeBase.TList<?>, PreludeBase.TTuple2<Integer, Character>>sort(
                  new Prelude.IOrd_$l$c$r<Character, Integer>(PreludeBase.IOrd_Int.it, PreludeBase.IOrd_Char.it),
                  PreludeList.IListSource_$lbrack$rbrack.<PreludeBase.TList<?>>mk(),
                  Thunk.<Kind.U<PreludeBase.TList<?>, PreludeBase.TTuple2<Integer, Character>>>shared(
                        new Lazy.D<Kind.U<PreludeBase.TList<?>, PreludeBase.TTuple2<Integer, Character>>>() {
                          public Kind.U<PreludeBase.TList<?>, PreludeBase.TTuple2<Integer, Character>> call() {
                            return (Kind.U<PreludeBase.TList<?>, PreludeBase.TTuple2<Integer, Character>>)Thunk.<
                                  PreludeBase.TList<PreludeBase.TTuple2<Integer, Character>>
                                >shared(
                                      new Lazy.D<PreludeBase.TList<PreludeBase.TTuple2<Integer, Character>>>() {
                                        public PreludeBase.TList<PreludeBase.TTuple2<Integer, Character>> call() {
                                          return PreludeList.IListMonoid_$lbrack$rbrack.<
                                                PreludeBase.TTuple2<Integer, Character>
                                              >$plus$plus(
                                                    PreludeList.<
                                                      PreludeBase.TTuple2<Integer, Character>,
                                                      PreludeBase.TTuple2<Integer, Integer>
                                                    >map(
                                                          new Func.U.D<
                                                            PreludeBase.TTuple2<Integer, Integer>,
                                                            PreludeBase.TTuple2<Integer, Character>
                                                          >() {
                                                            public Lazy<PreludeBase.TTuple2<
                                                              Integer, Character
                                                            >> apply(
                                                              final Lazy<PreludeBase.TTuple2<
                                                                Integer, Integer
                                                              >> arg$10341
                                                            ) {
                                                              final PreludeBase.TTuple2<
                                                                Integer, Integer
                                                              > $10342 = arg$10341.call();
                                                              return PreludeBase.TTuple2.<
                                                                    Integer, Character
                                                                  >mk(
                                                                        $10342.mem1,
                                                                        Thunk.<Character>shared(
                                                                              new Lazy.D<Character>() {
                                                                                public Character call() {
                                                                                  return Char.intToDigit(
                                                                                            (int)$10342.mem2
                                                                                            .call()
                                                                                          );
                                                                                }
                                                                              }
                                                                            )
                                                                      );
                                                            }
                                                          },
                                                          Puzzle.each(arg$1.call())
                                                        ),
                                                    Thunk.<PreludeBase.TList<PreludeBase.TTuple2<Integer, Character>>>shared(
                                                          new Lazy.D<PreludeBase.TList<
                                                            PreludeBase.TTuple2<Integer, Character>
                                                          >>() {
                                                            public PreludeBase.TList<
                                                              PreludeBase.TTuple2<Integer, Character>
                                                            > call() {
                                                              return PreludeList.<Integer, Character>zip(
                                                                        List.<Integer>$back$back(
                                                                              PreludeBase.IEq_Int.it,
                                                                              PreludeBase.IEnum_Int.enumFromTo(
                                                                                    0, 80
                                                                                  ),
                                                                              HashMap.<
                                                                                Integer, Integer
                                                                              >keys(TPuzzle.placed(arg$1.call()))
                                                                            ),
                                                                        Thunk.<PreludeBase.TList<Character>>shared(
                                                                              new Lazy.D<PreludeBase.TList<
                                                                                Character
                                                                              >>() {
                                                                                public PreludeBase.TList<
                                                                                  Character
                                                                                > call() {
                                                                                  return PreludeList.<
                                                                                        Character
                                                                                      >repeat(
                                                                                            Thunk.<
                                                                                              Character
                                                                                            >lazy(
                                                                                                  '-'
                                                                                                )
                                                                                          );
                                                                                }
                                                                              }
                                                                            )
                                                                      );
                                                            }
                                                          }
                                                        )
                                                  );
                                        }
                                      }
                                    ).call();
                          }
                        }
                      )
                )
          );
}
final public static String/*<Character>*/ toPuzzleString(final Lazy<TPuzzle> arg$1) {
  return PreludeText.unlines(
            PreludeList.<String/*<Character>*/, PreludeBase.TList<Character>>map(
                  new Func.U.D<PreludeBase.TList<Character>, String/*<Character>*/>() {
                    public Lazy<String/*<Character>*/> apply(final Lazy<PreludeBase.TList<Character>> arg$10343) {
                      final PreludeBase.TList<Character> puzzles$9915 = arg$10343.call();
                      return Thunk.<String/*<Character>*/>shared(
                                new Lazy.D<String/*<Character>*/>() {
                                  public String/*<Character>*/ call() {
                                    return PreludeText.unlines(
                                              PreludeList.<String/*<Character>*/, PreludeBase.TList<Character>>map(
                                                    new Func.U.D<PreludeBase.TList<Character>, String/*<Character>*/>() {
                                                      public Lazy<String/*<Character>*/> apply(
                                                        final Lazy<PreludeBase.TList<Character>> arg$10345
                                                      ) {
                                                        final PreludeBase.TList<Character> row$9916 =
                                                        arg$10345.call();
                                                        return Thunk.<String/*<Character>*/>shared(
                                                                  new Lazy.D<String/*<Character>*/>() {
                                                                    public String/*<Character>*/ call() {
                                                                      return PreludeText.unwords(
                                                                                PreludeList.<
                                                                                  String/*
                                                                                    <Character>
                                                                                  */,
                                                                                  PreludeBase.TList<
                                                                                    Character
                                                                                  >
                                                                                >map(
                                                                                      new Func.U.D<
                                                                                        PreludeBase.TList<
                                                                                          Character
                                                                                        >,
                                                                                        String/*
                                                                                          <
                                                                                            Character
                                                                                          >
                                                                                        */
                                                                                      >() {
                                                                                        public Lazy<String/*
                                                                                          <
                                                                                            Character
                                                                                          >
                                                                                        */> apply(
                                                                                          final Lazy<PreludeBase.TList<
                                                                                            Character
                                                                                          >> η$10347
                                                                                        ) {
                                                                                          return Thunk.<
                                                                                                String/*
                                                                                                  <
                                                                                                    Character
                                                                                                  >
                                                                                                */
                                                                                              >shared(
                                                                                                    new Lazy.D<String/*
                                                                                                      <
                                                                                                        Character
                                                                                                      >
                                                                                                    */>() {
                                                                                                      public String/*
                                                                                                        <
                                                                                                          Character
                                                                                                        >
                                                                                                      */ call() {
                                                                                                        return PreludeText.packed(
                                                                                                                  η$10347
                                                                                                                  .call()
                                                                                                                );
                                                                                                      }
                                                                                                    }
                                                                                                  );
                                                                                        }
                                                                                      },
                                                                                      net.tommay.sudoku.Util.<
                                                                                        Character
                                                                                      >slices(
                                                                                            Thunk.<
                                                                                              Integer
                                                                                            >lazy(
                                                                                                  3
                                                                                                ),
                                                                                            row$9916
                                                                                          )
                                                                                    )
                                                                              );
                                                                    }
                                                                  }
                                                                );
                                                      }
                                                    },
                                                    net.tommay.sudoku.Util.<Character>slices(
                                                          Thunk.<Integer>lazy(9), puzzles$9915
                                                        )
                                                  )
                                            );
                                  }
                                }
                              );
                    }
                  },
                  net.tommay.sudoku.Util.<Character>slices(Thunk.<Integer>lazy(27), Puzzle.toString(arg$1))
                )
          );
}

}
