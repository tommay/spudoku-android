module net.tommay.sudoku.Solver where

import net.tommay.sudoku.Digit (Digit)
import net.tommay.sudoku.EasyPeasy ()
import net.tommay.sudoku.ExclusionSet ()
import net.tommay.sudoku.ExclusionSet (ExclusionSet (ExclusionSet))
import net.tommay.sudoku.Next (Next (Next))
import net.tommay.sudoku.Placement (Placement (Placement))
import net.tommay.sudoku.Puzzle (Puzzle)
import net.tommay.sudoku.Solution (Solution)
import net.tommay.sudoku.SolverOptions (SolverOptions)
import net.tommay.sudoku.SolverOptions (Heuristic)  -- (..)
import net.tommay.sudoku.SolverUtil ()
import net.tommay.sudoku.Step (Step (Step))
import net.tommay.sudoku.TrickySet (TrickySet)
import net.tommay.sudoku.Unknown (Unknown)
import net.tommay.sudoku.Util ()

import System.Random as Random ()

abstract data Solver = Solver {
  options :: SolverOptions,
  puzzle :: Puzzle,
  rnd :: Maybe Random.StdGen,
  unknowns :: [Unknown],
  steps :: [Step]
}

private new :: SolverOptions -> Maybe Random.StdGen -> Puzzle -> Solver
private new options' maybeRnd puzzle =
  let (rnd1, rnd2) = maybeSplit maybeRnd
      emptySolver = Solver.Solver {
        options = options',
        puzzle = Puzzle.empty,
        rnd = rnd1,
        unknowns = maybeShuffle rnd2 [Unknown.new n | n <- [0..80]],
        steps = [Step puzzle Nothing "Initial puzzle"]
      }
  in foldr (\ (cellNumber, digit) accum ->
       place accum cellNumber digit)
     emptySolver
     $ Puzzle.each puzzle

private place :: Solver -> Int -> Digit -> Solver
private place this cellNumber digit =
  let newPuzzle = Puzzle.place (Solver.puzzle this) cellNumber digit
      newUnknowns = map (Unknown.place cellNumber digit)
        $ filter ((/= cellNumber) . Unknown.cellNumber)
        $ Solver.unknowns this
  in this.{ puzzle = newPuzzle, unknowns = newUnknowns }

-- Try to solve the Puzzle, returning a list of Solutions.  The
-- Haskell version uses tail-recursive style where each Solution is
-- consed onto a list of solutions discovered higher in the stack and
-- passed down.  But for some reason the blows Frege out of memory so
-- use a more "foldr" style where prepended to the list of subsequent
-- solutions (see doGuesses).  This version will still blow out memory
-- but at least it allows Create to work.  Frege is not doing something
-- right.
--
solutions :: SolverOptions -> Puzzle -> [Solution]
solutions options puzzle =
  let solver = Solver.new options Nothing puzzle
  in solutionsTop solver

randomSolutions :: SolverOptions -> Random.StdGen -> Puzzle -> [Solution]
randomSolutions options rnd puzzle =
  let solver = Solver.new options (Just rnd) puzzle
  in solutionsTop solver

-- Compute all the solutions and return them in a random order.
--
allRandomSolutions :: Random.StdGen -> Puzzle -> [Solution]
allRandomSolutions = randomSolutions SolverOptions.all

private solutionsTop :: Solver -> [Solution]
private solutionsTop this =
  case Solver.unknowns this of
    [] ->
      -- No more unknowns, solved!
      [Solution.new
        (Solver.puzzle this)
        (Solver.steps this)]
    _ -> solutionsHeuristic this

private solutionsHeuristic :: Solver -> [Solution]
private solutionsHeuristic this =
  if SolverOptions.useHeuristics $ Solver.options this
    then -- Try the heuristic functions.
      let (rnd1, rnd2) = maybeSplit $ Solver.rnd this
          -- This uses rnd1 to shuffle each function's list, but that's ok
          -- because only the first Next is used.
          nextList = concat
            $ map (maybeShuffle rnd1)
            $ map (\ f -> f this)
            $ heuristics this
      in case nextList of
        (next : _) ->
          placeAndContinue this.{rnd = rnd2} next
        [] ->
          solutionsStuck this
    else -- Skip the heuristics and continue with solutionsStuck.
      solutionsStuck this

private heuristics :: Solver -> [Solver -> [Next]]
private heuristics this =
  map (\ h -> case h of
        EasyPeasy -> findEasyPeasy
        MissingOne -> findMissingOne
        MissingTwo -> findMissingTwo
        Tricky -> findTricky
        Needed -> findNeeded
        Forced -> findForced
	)
  $ SolverOptions.heuristics $ Solver.options this

private placeAndContinue :: Solver -> Next -> [Solution]
private placeAndContinue this next =
  let Next placement description = next
      Placement cellNumber digit = placement
      newSolver = place this cellNumber digit
      step = Step (Solver.puzzle newSolver) (Just placement) description
      newSteps = (Solver.steps this) ++ [step]
      newSolver2 = newSolver.{ steps = newSteps }
  in solutionsTop newSolver2

private solutionsStuck :: Solver -> [Solution]
private solutionsStuck this =
  -- We get here because we can't place a digit using human-style
  -- heuristics, so we've either failed or we have to guess and
  -- recurse.  We can distinguish by examining the cell with the
  -- fewest possibilities remaining, which is also the best cell to
  -- make a guess for.
  let minUnknown = minBy Unknown.numPossible $ Solver.unknowns this
      cellNumber = Unknown.cellNumber minUnknown
      possible = Unknown.getPossible minUnknown
      options = Solver.options this
  in case possible of
    [] ->
      -- Failed.  No solutions.
      []
    [digit] ->
      -- One possibility.  The choice is forced, no guessing.  But we
      -- only use the force if a) we're guessing, b) we're not using
      -- heuristics, because if we are then forcing is done by
      -- findForced.
      if (SolverOptions.useGuessing options) &&
         (not $ SolverOptions.useHeuristics options)
        then let next = Next.new "Forced guess" digit cellNumber
             in placeAndContinue this next
        else -- There is a forced guess but we're not configured to
             -- use it.  See if we can permanently apply a TrickySet
             -- to create an opportunity.
             case applyOneTrickySetIfAllowed this of
               Just newSolver -> solutionsTop newSolver
               Nothing -> []
    _ ->
      -- Multiple possibilities.  Before we guess, see if it's possible
      -- to permanently apply a TrickySet to create possibilities for
      -- heuristics.
      case applyOneTrickySetIfAllowed this of
        Just newSolver -> solutionsTop newSolver
        Nothing -> if SolverOptions.useGuessing options
          -- Guess each possibility, maybe in a random order, and
          -- recurse.  We could use Random.split when shuffling or
          -- recursing, but it's not really important for this
          -- application.
          then let shuffledPossible = maybeShuffle (Solver.rnd this) possible
               in doGuesses this cellNumber shuffledPossible
          else []

-- For each digit in the list, use it as a guess for unknown
-- and try to solve the resulting Puzzle.
-- XXX How to do this with : instead of ++?
--
private doGuesses :: Solver -> Int -> [Digit] -> [Solution]
private doGuesses this cellNumber digits =
  foldr (\ digit accum ->
          let next = Next.new "Guess" digit cellNumber
          in placeAndContinue this next ++ accum)
    []
    digits

private findEasyPeasy :: Solver -> [Next]
private findEasyPeasy this =
  EasyPeasy.find (Solver.puzzle this) (Solver.unknowns this)

-- Try to place a digit where a set has only one Unknown.
--
private findMissingOne :: Solver -> [Next]
private findMissingOne this =
  concat $ map (findMissingOneInSet this) ExclusionSet.exclusionSets

private findMissingOneInSet :: Solver -> ExclusionSet -> [Next]
private findMissingOneInSet this set =
  let ExclusionSet name cellNumbers = set
  in case SolverUtil.unknownsInSet (Solver.unknowns this) cellNumbers of
       [unknown] ->
         -- Exactly one cell in the set is unknown.  Place a digit in it.
         -- Note that since this is the only unknown position in the set
         -- there should be exactly one possible digit remaining.  But we
         -- may have made a wrong guess, which leaves no possibilities.
         findForcedForUnknown ("Missing one in " ++ name) unknown
       _ ->
         -- Zero or multiple cells in the set are unknown.
         []

-- Try to place a digit where a set has two unplaced cells.  We only
-- place one of the digits but the second will follow quickly.
--
private findMissingTwo :: Solver -> [Next]
private findMissingTwo this =
  concat $ map (findMissingTwoInSet this) ExclusionSet.exclusionSets

private findMissingTwoInSet :: Solver -> ExclusionSet -> [Next]
private findMissingTwoInSet this set =
  let ExclusionSet name cellNumbers = set
  in case SolverUtil.unknownsInSet (Solver.unknowns this) cellNumbers of
       unknowns@[_, _] ->
         concat $
           map (findForcedForUnknown $ "Missing two in " ++ name) unknowns
       _ -> []

-- Try to place a digit where there is a set that doesn't yet have
-- some digit (i.e., it needs it) and there is only one cell in the
-- set where it can possibly go.
--
private findNeeded :: Solver -> [Next]
private findNeeded this =
  concat $ map (findNeededInSet this) ExclusionSet.exclusionSets

-- XXX update from Haskell version.
private findNeededInSet :: Solver -> ExclusionSet -> [Next]
private findNeededInSet this set =
  let ExclusionSet name cellNumbers = set
      unknowns = SolverUtil.unknownsInSet (Solver.unknowns this) cellNumbers
  in concat $ map (findNeededDigitInSet unknowns name) [1..9]

-- XXX update name from Haskell version.
private findNeededDigitInSet :: [Unknown] -> String -> Digit -> [Next]
private findNeededDigitInSet unknowns name digit =
  case filter (Unknown.isDigitPossible digit) unknowns of
    [unknown] -> [Next.new
                  (unwords ["Need a", show digit, "in", name])
                  digit (Unknown.cellNumber unknown)]
    _ -> []

private findForced :: Solver -> [Next]
private findForced this =
  concat $ map (findForcedForUnknown "Forced") $ Solver.unknowns this

-- XXX update to use numPossible ala Haskell version.
private findForcedForUnknown :: String -> Unknown -> [Next]
private findForcedForUnknown description unknown =
  case Unknown.getPossible unknown of
    [digit] -> [Next.new description digit (Unknown.cellNumber unknown)]
    _ -> []

-- XXX finish working on TrickySets in Haskell the port the work to
-- Frege and Scala.

private findTricky :: Solver -> [Next]
private findTricky this =
  let unknowns = Solver.unknowns this
      applicableTrickySets = findApplicableTrickySets unknowns
  in concat $ map
       (\ (digit, trickySet) ->
         -- XXX we could also check for new forced digits in the
         -- eliminate positions.  We could remove the digit from the
         -- possibilities permanently, but that's not something a
         -- person would remember unless they're using paper.  So just
         -- remove while we see if that creates a new placement.
         let tmpUnknowns = eliminateWithTrickySet unknowns digit trickySet
         in trickySetCheckNeeded tmpUnknowns trickySet digit)
       applicableTrickySets

private trickySetCheckNeeded :: [Unknown] -> TrickySet -> Digit -> [Next]
private trickySetCheckNeeded unknowns trickySet digit =
  let unknownForEachNeededSet =
        concat $ map
          (findUnknownWhereDigitIsNeeded unknowns digit)
          $ TrickySet.checkNeeded trickySet
  in map (Next.new
           (TrickySet.name trickySet)
           digit . Unknown.cellNumber) unknownForEachNeededSet

private trickySetMatchesForDigit :: [Unknown] -> TrickySet -> Digit -> Bool
private trickySetMatchesForDigit unknowns trickySet digit =
  let common = TrickySet.common trickySet
      rest = TrickySet.rest trickySet
  in (isDigitPossibleInSet unknowns digit common) &&
     (notIsDigitPossibleInSet unknowns digit rest)

private findUnknownWhereDigitIsNeeded :: [Unknown] -> Digit -> [Int] -> [Unknown]
private findUnknownWhereDigitIsNeeded unknowns digit set =
  let unknowns' = filter (Unknown.isDigitPossible digit)
        $ filter (SolverUtil.isUnknownInSet set) unknowns
  in case unknowns' of
    [_] -> unknowns'
    _ -> []

private isDigitPossibleInSet :: [Unknown] -> Digit -> [Int] -> Bool
private isDigitPossibleInSet unknowns digit set =
  let possibleUnknowns =
        -- Filters can be in either order but this order is way faster.
        filter (Unknown.isDigitPossible digit)
        $ filter (SolverUtil.isUnknownInSet set) unknowns
  in case possibleUnknowns of
       [] -> False
       _ -> True

-- XXX It is stinky-ass slow to use not $ isDigitPossibleInSet ...
-- Making this new function makes things 4 times faster solving
-- puzzle-1339.txt.
--
private notIsDigitPossibleInSet :: [Unknown] -> Digit -> [Int] -> Bool
private notIsDigitPossibleInSet unknowns digit set =
  let possibleUnknowns =
        -- Filters can be in either order but this order is way faster.
        filter (Unknown.isDigitPossible digit)
        $ filter (SolverUtil.isUnknownInSet set) unknowns
  in case possibleUnknowns of
       [] -> True
       _ -> False

private applyOneTrickySetIfAllowed :: Solver -> Maybe Solver
private applyOneTrickySetIfAllowed this =
  if SolverOptions.usePermanentTrickySets $ Solver.options this
    then applyOneTrickySet this
    else Nothing

-- Try all applicable TrickyuSets in a random order until one makes a
-- difference and return a new Solver with some possibilities
-- eliminated, or Nothing.  This is vastly inefficient, but it's only
-- used when grading puzzles for difficulty.
--
private applyOneTrickySet :: Solver -> Maybe Solver
private applyOneTrickySet this =
  let (rnd1, rnd2) = maybeSplit $ Solver.rnd this
      applicableTrickySets = maybeShuffle rnd1
        $ findApplicableTrickySets $ Solver.unknowns this
      tryTrickySet (digit, trickySet) =
        applyTrickySet this digit trickySet
  in case concat $ map tryTrickySet applicableTrickySets of
       (solver:_) -> Just solver.{ rnd = rnd2 }
       _ -> Nothing

private applyTrickySet :: Solver -> Digit -> TrickySet -> [Solver]
private applyTrickySet this digit trickySet =
  let oldUnknowns = Solver.unknowns this
      newUnknowns = eliminateWithTrickySet oldUnknowns digit trickySet
  in if newUnknowns /= oldUnknowns
       then
         let newSolver = Solver.addStep this
               (Step (Solver.puzzle this) Nothing
                 ("Apply " ++ TrickySet.name trickySet))
         in [newSolver.{ unknowns = newUnknowns }]
       else []

private findApplicableTrickySets :: [Unknown] -> [(Digit, TrickySet)]
private findApplicableTrickySets unknowns =
  let allTrickySets = TrickySet.trickySets ++ TrickySet.inverseTrickySets
  in [(digit, trickySet) | digit <- [1..9], trickySet <- allTrickySets,
      trickySetMatchesForDigit unknowns trickySet digit]

private eliminateWithTrickySet :: [Unknown] -> Digit -> TrickySet -> [Unknown]
private eliminateWithTrickySet unknowns digit trickySet =
  let cellNumbers = TrickySet.eliminate trickySet
  in map (\ u ->
          if Unknown.cellNumber u `elem` cellNumbers
             then Unknown.removeDigitFromPossible digit u
             else u)
       unknowns

private addStep :: Solver -> Step -> Solver
private addStep this step =
  this.{ steps = Solver.steps this ++ [step] }

isSolvableWith :: SolverOptions -> Puzzle -> Bool
isSolvableWith options puzzle =
  not $ null $ Solver.solutions options puzzle

private minBy :: Ord b => (a -> b) -> [a] -> a
private minBy func list =
  let enhanced = map (\ a -> (func a, a)) list
  -- foldl1 is a smidge faster than foldr1.
  in snd $ foldl1 (\ (a@(na, _)) (b@(nb, _)) ->
       -- The results are of course the same we select a or b when
       -- na == nb, but testing na <= nb makes things much slower,
       -- probably because it chooses elements deeper in the list
       -- which makes for more list manipulation.
       if na < nb
         then a
         else b)
       enhanced

private maybeSplit :: Maybe Random.StdGen -> (Maybe Random.StdGen, Maybe Random.StdGen)
private maybeSplit Nothing =
  (Nothing, Nothing)
private maybeSplit (Just rnd) =
  let (rnd1, rnd2) = Random.split rnd
  in (Just rnd1, Just rnd2)

private maybeShuffle :: Maybe Random.StdGen -> [a] -> [a]
private maybeShuffle Nothing list = list
private maybeShuffle (Just rnd) list =
  Util.shuffle rnd list
