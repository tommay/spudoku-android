module net.tommay.sudoku.EasyPeasy where

import net.tommay.sudoku.Digit (Digit)
import net.tommay.sudoku.ExclusionSet (ExclusionSet)
import net.tommay.sudoku.Next (Next)
import net.tommay.sudoku.Puzzle (Puzzle)
import net.tommay.sudoku.SolverUtil ()
import net.tommay.sudoku.Unknown (Unknown)
import net.tommay.sudoku.Util ()

import Data.List as List ()

-- Easy peasies are found by using stripes of three rows or columns.
-- The first item in the tuples is the set we're looking to place a
-- digit in.  Thw other two are the other two rows/columns in the
-- stripe.  Here we build all the possible stripes so they can be
-- searched for easy peasies.
--
private makeEasyPeasyStripes :: [(ExclusionSet, [ExclusionSet])]
private makeEasyPeasyStripes =
  concat $ map makeEasyPeasyStripe
  $ Util.slices 3 (ExclusionSet.rows ++ ExclusionSet.columns)

private makeEasyPeasyStripe :: [ExclusionSet] -> [(ExclusionSet, [ExclusionSet])]
private makeEasyPeasyStripe slice =
  map (\ set -> (set, List.delete set slice)) slice

-- Return a list of all possible easy peasy placements for the Puzzle.
--
find :: Puzzle -> [Unknown] -> [Next]
find puzzle unknowns =
  concat $ map (findForEasyPeasyStripe puzzle unknowns) makeEasyPeasyStripes

-- Returns any easy peasies in the Puzzle and EasyPeasyStripe.  All
-- digits are considered
--
private findForEasyPeasyStripe :: Puzzle -> [Unknown] -> (ExclusionSet, [ExclusionSet]) -> [Next]
private findForEasyPeasyStripe puzzle unknowns (col0, [col1, col2]) =
  let digitsInCol1 = getDigitsInSet puzzle col1
      digitsInCol2 = getDigitsInSet puzzle col2
      easyPeasyDigits = digitsInCol1 List.`intersect` digitsInCol2
  in concat $ map (placeDigitInSet unknowns col0) easyPeasyDigits

private getDigitsInSet :: Puzzle -> ExclusionSet -> [Digit]
private getDigitsInSet puzzle set =
  map snd
  $ filter (\ (cellNumber, digit) -> cellNumber `elem` ExclusionSet.cells set)
  $ Puzzle.each puzzle

private placeDigitInSet :: [Unknown] -> ExclusionSet -> Digit -> [Next]
private placeDigitInSet unknowns set digit =
  let unknowns' = SolverUtil.unknownsInSet unknowns $ ExclusionSet.cells set
  in case filter (Unknown.isDigitPossible digit) unknowns' of
      [unknown] -> [Next.new ("Easy peasy " ++ ExclusionSet.name set)
                    digit (Unknown.cellNumber unknown)]
      _ -> []

